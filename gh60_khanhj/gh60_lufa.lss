
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000052cc  00005360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000052cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a5  00800134  00800134  00005394  2**0
                  ALLOC
  3 .noinit       00000004  008001d9  008001d9  00005394  2**0
                  ALLOC
  4 .stab         000023dc  00000000  00000000  00005394  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000405  00000000  00000000  00007770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00007b75  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a48  00000000  00000000  00007b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010b02  00000000  00000000  000085ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e24  00000000  00000000  000190d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000050ed  00000000  00000000  0001cef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001c0c  00000000  00000000  00021fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000048a7  00000000  00000000  00023bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008950  00000000  00000000  00028497  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000be0  00000000  00000000  00030de7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__ctors_end>
       4:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
       8:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
       c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      10:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      14:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      18:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      1c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      20:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      24:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      28:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__vector_10>
      2c:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__vector_11>
      30:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <__vector_12>
      34:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      3c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      40:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      44:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      4c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      50:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <__vector_21>
      58:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      5c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      60:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      68:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      70:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      74:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      78:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      7c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      84:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      88:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      90:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      94:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__bad_interrupt>
      98:	22 0e       	add	r2, r18
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      9a:	44 0e       	add	r4, r20

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	2f 0f       	add	r18, r31
      9e:	44 0e       	add	r4, r20
      a0:	2f 0f       	add	r18, r31
      a2:	86 0e       	add	r8, r22
      a4:	a9 0e       	add	r10, r25
      a6:	2f 0f       	add	r18, r31
      a8:	fe 0e       	add	r15, r30

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      aa:	11 0f       	add	r17, r17
      ac:	06 13       	cpse	r16, r22
      ae:	06 13       	cpse	r16, r22
      b0:	34 13       	cpse	r19, r20
      b2:	34 13       	cpse	r19, r20
      b4:	90 13       	cpse	r25, r16
      b6:	cc 13       	cpse	r28, r28
      b8:	cf 15       	cp	r28, r15
      ba:	cf 15       	cp	r28, r15
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      bc:	e4 13       	cpse	r30, r20
      be:	cf 15       	cp	r28, r15
      c0:	db 14       	cp	r13, r11
      c2:	db 14       	cp	r13, r11
      c4:	a9 15       	cp	r26, r9
      c6:	cf 15       	cp	r28, r15
      c8:	cf 15       	cp	r28, r15
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      ca:	bd 15       	cp	r27, r13

000000cc <fn_actions>:
      cc:	f1 a1                                               ..

000000ce <keymaps>:
      ce:	29 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 46 29 1e     ):;<=>?@ABCDEF).

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      de:	1f 20 21 22 23 24 25 26 27 2d 2e 2a 2b 14 1a 08     . !"#$%&'-.*+...
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ee:	15 17 1c 18 0c 12 13 2f 30 31 e0 04 16 07 09 0a     ......./01......
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      fe:	0b 0d 0e 0f 33 34 28 4e e1 1d 1b 06 19 05 11 10     ....34(N........

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10e:	36 37 38 e5 52 4d e0 e3 e2 2c e6 c0 e4 50 51 4f     678.RM...,...PQO
     11e:	a8 4c 4a 4b a8 a9 aa 01 01 01 01 01 01 01 01 01     .LJK............
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     12e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     13e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
     14e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     15e:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
				ReportSize     -= 2;
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	01 01 01 01 01 01 01 01                             ........

00000176 <__c.1889>:
     176:	0a 00                                               ..

00000178 <__c.1887>:
     178:	25 30 32 58 00                                      %02X.

0000017d <__c.1885>:
				ReportSize     -= 1;
     17d:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000187 <__c.4857>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     187:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     197:	00                                                  .

00000198 <__c.4855>:
     198:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     1a8:	00                                                  .

000001a9 <__c.4850>:
     1a9:	0d 0a 69 6e 69 74 0a 00                             ..init..

000001b1 <__c.4748>:

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1b1:	5b 44 5d 00                                         [D].

000001b5 <__c.4743>:
				break;
     1b5:	5b 43 5d 00                                         [C].

000001b9 <ProductString>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b9:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

000001c5 <ManufacturerString>:
     1c5:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
     1d5:	6b 00 00 00                                         k...

000001d9 <LanguageString>:
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d9:	04 03 09 04                                         ....

000001dd <ConfigurationDescriptor>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1dd:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
     1ed:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1fd:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     20d:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     21d:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     22d:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     23d:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     24d:	03 20 00 01                                         . ..

00000251 <DeviceDescriptor>:
     251:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     261:	00 01                                               ..

00000263 <ConsoleReport>:
     263:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
     273:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     283:	02 c0                                               ..

00000285 <ExtrakeyReport>:
				break;
     285:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     295:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a5:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b5:	10 95 01 81 00 c0                                   ......

000002bb <MouseReport>:
     2bb:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2cb:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2db:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...

				if (ParserData->UsingReportIDs)
     2eb:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2fb:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000308 <KeyboardReport>:
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     308:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     328:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     338:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000348 <__c.2086>:
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     348:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000358 <__c.2081>:
     358:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000366 <__c.2073>:
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     366:	0a 00                                               ..

00000368 <__c.2068>:
     368:	25 30 32 58 20 00                                   %02X .

0000036e <__c.2065>:
					}
				}

				ParserData->UsingReportIDs = true;
     36e:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

00000379 <__c.2428>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     379:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000384 <__c.1745>:
     384:	25 30 32 58 3a 20 25 30 31 36 62 25 73 0a 00        %02X: %016b%s..

00000393 <__c.1742>:
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     393:	72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41 42     r/c 0123456789AB
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3a3:	43 44 45 46 0a 00                                   CDEF..

000003a9 <__c.2507>:
     3a9:	64 6f 6e 65 2e 0a 00                                done...

000003b0 <__c.2501>:
				break;
     3b0:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c0:	2e 2e 2e 20 00                                      ... .

000003c5 <__c.2146>:
     3c5:	29 0a 00                                            )..

000003c8 <__c.2144>:
     3c8:	25 75 00                                            %u.

000003cb <__c.2142>:
     3cb:	2f 00                                               /.

000003cd <__c.2140>:
     3cd:	25 75 00                                            %u.

000003d0 <__c.2138>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3d0:	5d 28 00                                            ](.

000003d3 <__c.2136>:
     3d3:	25 64 00                                            %d.

000003d6 <__c.2134>:

					while (CurrCollectionPath->Parent != NULL)
     3d6:	20 00                                                .

000003d8 <__c.2132>:
     3d8:	25 64 00                                            %d.

000003db <__c.2130>:
     3db:	20 00                                                .

000003dd <__c.2128>:
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3dd:	25 64 00                                            %d.

000003e0 <__c.2126>:
     3e0:	20 00                                                .

000003e2 <__c.2124>:
     3e2:	25 64 00                                            %d.

000003e5 <__c.2122>:
     3e5:	7c 00                                               |.

000003e7 <__c.2120>:
     3e7:	25 30 32 58 00                                      %02X.

000003ec <__c.2118>:
     3ec:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3fc:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
				}

				CurrCollectionPath->Type       = ReportItemData;
     40c:	20 5b 00                                             [.

0000040f <__c.2873>:
     40f:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     41f:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000042a <__c.2870>:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42a:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     43a:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000443 <__c.2867>:

					for (uint8_t i = 1; i < UsageListSize; i++)
     443:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					  UsageList[i - 1] = UsageList[i];
     453:	20 25 64 0a 00                                       %d..

00000458 <__c.2864>:

					UsageListSize--;
     458:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     468:	64 0a 00                                            d..

0000046b <__c.2861>:
     46b:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     47b:	0a 00                                               ..

0000047d <__c.2857>:
     47d:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000048c <__c.2850>:
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48c:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49c:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004a7 <__c.2847>:
     4a7:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4b7:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004c0 <__c.2844>:
     4c0:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4d0:	20 25 64 0a 00                                       %d..

000004d5 <__c.2841>:
     4d5:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e5:	64 0a 00                                            d..

000004e8 <__c.2838>:
     4e8:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f8:	0a 00                                               ..

000004fa <__c.2834>:
     4fa:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000509 <__c.2827>:
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     509:	0a 00                                               ..

0000050b <__c.2825>:
     50b:	25 75 00                                            %u.

0000050e <__c.2823>:
     50e:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
     51e:	5f 6d 61 78 3a 20 00                                _max: .

00000525 <__c.2821>:
     525:	0a 00                                               ..

00000527 <__c.2819>:
     527:	25 75 00                                            %u.

0000052a <__c.2817>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     52a:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     53a:	65 64 3a 20 00                                      ed: .

0000053f <__c.2815>:

						for (uint8_t i = 1; i < UsageListSize; i++)
     53f:	0a 00                                               ..

00000541 <__c.2813>:
     541:	25 75 00                                            %u.

00000544 <__c.2811>:
     544:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     554:	00                                                  .

00000555 <__c.2809>:
     555:	0a 00                                               ..

00000557 <__c.2807>:
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     557:	25 75 00                                            %u.

0000055a <__c.2805>:
     55a:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000569 <__c.2803>:
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     569:	0a 00                                               ..

0000056b <__c.2801>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56b:	25 75 00                                            %u.

0000056e <__c.2799>:
     56e:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     57e:	20 00                                                .

00000580 <__c.2797>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     580:	0a 00                                               ..

00000582 <__c.2795>:
     582:	25 75 00                                            %u.

00000585 <__c.2793>:
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     585:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     595:	20 00                                                .

00000597 <__c.2791>:
     597:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000005a5 <__c.2911>:
     5a5:	4d 3e 00                                            M>.

000005a8 <__c.2909>:
     5a8:	4d 25 64 3e 20 00                                   M%d> .

000005ae <__c.2907>:

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ae:	3f 00                                               ?.

000005b0 <__c.2904>:
     5b0:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000005bd <__c.2890>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bd:	43 3e 20 00                                         C> .

000005c1 <__c.2880>:
     5c1:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     5d1:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     5e1:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     5f1:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;
     601:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000060f <__c.2878>:

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     60f:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     61f:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     62f:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     63f:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     64f:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     65f:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     66f:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     67f:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
					  ParserData->TotalReportItems++;
     68f:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     69f:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
			UsageListSize       = 0;
     6af:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6bf:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6cf:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6df:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     6ef:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     6ff:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

0000070a <__c.2783>:
     70a:	3f 00                                               ?.

0000070c <__c.2780>:
     70c:	4d 3e 20 00                                         M> .

00000710 <__c.2785>:
     710:	43 3e 20 00                                         C> .

00000714 <__c.2929>:
     714:	4c 25 64 0a 00                                      L%d..

00000719 <__c.2769>:
     719:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     729:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     739:	73 65 6b 65 79 0a 00                                sekey..

00000740 <__c.2601>:
     740:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     750:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     760:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     770:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     780:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     790:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     7a0:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     7b0:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     7c0:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     7d0:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 00              r.e:.eeprom..

000007dd <__c.2696>:
     7dd:	0a 00                                               ..

000007df <__c.2694>:
     7df:	25 75 00                                            %u.

000007e2 <__c.2692>:
     7e2:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

000007ea <__c.2690>:
     7ea:	0a 00                                               ..

000007ec <__c.2688>:
     7ec:	25 75 00                                            %u.

000007ef <__c.2686>:
     7ef:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     7ff:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

0000080b <__c.2684>:
     80b:	0a 00                                               ..

0000080d <__c.2682>:
     80d:	25 75 00                                            %u.

00000810 <__c.2680>:
     810:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     820:	20 00                                                .

00000822 <__c.2678>:
     822:	0a 00                                               ..

00000824 <__c.2676>:
     824:	25 75 00                                            %u.

00000827 <__c.2674>:
     827:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000831 <__c.2672>:
     831:	0a 00                                               ..

00000833 <__c.2670>:
     833:	25 75 00                                            %u.

00000836 <__c.2668>:
     836:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     846:	20 00                                                .

00000848 <__c.2666>:
     848:	0a 00                                               ..

0000084a <__c.2664>:
     84a:	25 75 00                                            %u.

0000084d <__c.2662>:
     84d:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     85d:	20 00                                                .

0000085f <__c.2660>:
     85f:	0a 00                                               ..

00000861 <__c.2658>:
     861:	25 75 00                                            %u.

00000864 <__c.2656>:
     864:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     874:	74 72 6f 6c 3a 20 00                                trol: .

0000087b <__c.2654>:
     87b:	0a 00                                               ..

0000087d <__c.2652>:
     87d:	25 75 00                                            %u.

00000880 <__c.2650>:
     880:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     890:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000899 <__c.2648>:
     899:	0a 00                                               ..

0000089b <__c.2646>:
     89b:	25 30 32 58 00                                      %02X.

000008a0 <__c.2644>:
     8a0:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     8b0:	77 3a 20 00                                         w: .

000008b4 <__c.2641>:
     8b4:	0a 00                                               ..

000008b6 <__c.2639>:
     8b6:	25 75 00                                            %u.

000008b9 <__c.2637>:
     8b9:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000008c2 <__c.2635>:
     8c2:	0a 00                                               ..

000008c4 <__c.2633>:
     8c4:	25 75 00                                            %u.

000008c7 <__c.2631>:
     8c7:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000008d3 <__c.2629>:
     8d3:	0a 00                                               ..

000008d5 <__c.2627>:
     8d5:	25 75 00                                            %u.

000008d8 <__c.2625>:
     8d8:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

000008e2 <__c.2623>:
     8e2:	0a 00                                               ..

000008e4 <__c.2621>:
     8e4:	25 75 00                                            %u.

000008e7 <__c.2619>:
     8e7:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000008f1 <__c.2617>:
     8f1:	0a 00                                               ..

000008f3 <__c.2615>:
     8f3:	25 30 32 58 00                                      %02X.

000008f8 <__c.2613>:
     8f8:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     908:	3a 20 00                                            : .

0000090b <__c.2610>:
     90b:	0a 00                                               ..

0000090d <__c.2608>:
     90d:	25 75 00                                            %u.

00000910 <__c.2606>:
     910:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000920 <__c.2764>:
     920:	3f 00                                               ?.

00000922 <__c.2755>:
     922:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     932:	25 30 34 6c 58 0a 00                                %04lX..

00000939 <__c.2753>:
     939:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     949:	58 0a 00                                            X..

0000094c <__c.2751>:
     94c:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     95c:	6c 3a 20 25 58 0a 00                                l: %X..

00000963 <__c.2749>:
     963:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     973:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

0000097d <__c.2747>:
     97d:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

0000098b <__c.2744>:
     98b:	47 43 43 3a 20 34 2e 38 2e 32 20 41 56 52 2d 4c     GCC: 4.8.2 AVR-L
     99b:	49 42 43 3a 20 31 2e 38 2e 30 20 41 56 52 5f 41     IBC: 1.8.0 AVR_A
     9ab:	52 43 48 3a 20 61 76 72 35 31 0a 00                 RCH: avr51..

000009b7 <__c.2742>:
     9b7:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     9c7:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     9d7:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     9e7:	45 20 43 4f 4d 4d 41 4e 44 20 34 30 39 36 0a 00     E COMMAND 4096..

000009f7 <__c.2740>:
     9f7:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     a07:	31 37 3a 33 35 3a 30 35 20 4a 75 6c 20 20 33 20     17:35:05 Jul  3 
     a17:	32 30 31 37 29 0a 00                                2017)..

00000a1e <__c.2738>:
     a1e:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     a2e:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     a3e:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     a4e:	30 30 31 0a 00                                      001..

00000a53 <__c.2736>:
     a53:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     a63:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     a73:	6f 72 20 47 48 36 30 0a 00                          or GH60..

00000a7c <__c.2734>:
     a7c:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000a8b <__c.2731>:
     a8b:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000a98 <__c.2729>:
     a98:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000aa4 <__c.2726>:
     aa4:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000ab4 <__c.2724>:
     ab4:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000ac3 <__c.2721>:
     ac3:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000ad1 <__c.2719>:
     ad1:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000ade <__c.2716>:
     ade:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000aea <__c.2714>:
     aea:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000af7 <__c.2711>:
     af7:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     b07:	00                                                  .

00000b08 <__c.2708>:
     b08:	43 3e 20 00                                         C> .

00000b0c <__c.2702>:
     b0c:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000b18 <__ctors_end>:
     b18:	11 24       	eor	r1, r1
     b1a:	1f be       	out	0x3f, r1	; 63
     b1c:	cf ef       	ldi	r28, 0xFF	; 255
     b1e:	d0 e2       	ldi	r29, 0x20	; 32
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	cd bf       	out	0x3d, r28	; 61

00000b24 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     b24:	04 b6       	in	r0, 0x34	; 52
     b26:	03 fe       	sbrs	r0, 3
     b28:	24 c0       	rjmp	.+72     	; 0xb72 <__do_copy_data>
     b2a:	80 91 d9 01 	lds	r24, 0x01D9
     b2e:	90 91 da 01 	lds	r25, 0x01DA
     b32:	a0 91 db 01 	lds	r26, 0x01DB
     b36:	b0 91 dc 01 	lds	r27, 0x01DC
     b3a:	87 30       	cpi	r24, 0x07	; 7
     b3c:	90 4b       	sbci	r25, 0xB0	; 176
     b3e:	a7 40       	sbci	r26, 0x07	; 7
     b40:	b0 4b       	sbci	r27, 0xB0	; 176
     b42:	b9 f4       	brne	.+46     	; 0xb72 <__do_copy_data>
        reset_key = 0;
     b44:	10 92 d9 01 	sts	0x01D9, r1
     b48:	10 92 da 01 	sts	0x01DA, r1
     b4c:	10 92 db 01 	sts	0x01DB, r1
     b50:	10 92 dc 01 	sts	0x01DC, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     b54:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     b56:	84 b7       	in	r24, 0x34	; 52
     b58:	87 7f       	andi	r24, 0xF7	; 247
     b5a:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     b5c:	88 e1       	ldi	r24, 0x18	; 24
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	80 93 60 00 	sts	0x0060, r24
     b66:	10 92 60 00 	sts	0x0060, r1
     b6a:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     b6c:	e0 e0       	ldi	r30, 0x00	; 0
     b6e:	f8 ef       	ldi	r31, 0xF8	; 248
     b70:	09 95       	icall

00000b72 <__do_copy_data>:
     b72:	11 e0       	ldi	r17, 0x01	; 1
     b74:	a0 e0       	ldi	r26, 0x00	; 0
     b76:	b1 e0       	ldi	r27, 0x01	; 1
     b78:	ec ec       	ldi	r30, 0xCC	; 204
     b7a:	f2 e5       	ldi	r31, 0x52	; 82
     b7c:	00 e0       	ldi	r16, 0x00	; 0
     b7e:	0b bf       	out	0x3b, r16	; 59
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <__do_copy_data+0x14>
     b82:	07 90       	elpm	r0, Z+
     b84:	0d 92       	st	X+, r0
     b86:	a4 33       	cpi	r26, 0x34	; 52
     b88:	b1 07       	cpc	r27, r17
     b8a:	d9 f7       	brne	.-10     	; 0xb82 <__do_copy_data+0x10>

00000b8c <__do_clear_bss>:
     b8c:	11 e0       	ldi	r17, 0x01	; 1
     b8e:	a4 e3       	ldi	r26, 0x34	; 52
     b90:	b1 e0       	ldi	r27, 0x01	; 1
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <.do_clear_bss_start>

00000b94 <.do_clear_bss_loop>:
     b94:	1d 92       	st	X+, r1

00000b96 <.do_clear_bss_start>:
     b96:	a9 3d       	cpi	r26, 0xD9	; 217
     b98:	b1 07       	cpc	r27, r17
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <.do_clear_bss_loop>
     b9c:	0e 94 19 0a 	call	0x1432	; 0x1432 <main>
     ba0:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <_exit>

00000ba4 <__bad_interrupt>:
     ba4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ba8 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     ba8:	ff 93       	push	r31
	push	ZL
     baa:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     bac:	e0 91 34 01 	lds	r30, 0x0134
	lds	ZH, xfunc_out+1	;/
     bb0:	f0 91 35 01 	lds	r31, 0x0135
	sbiw	ZL, 0		;Skip if null
     bb4:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     bb6:	09 f0       	breq	.+2      	; 0xbba <xputc+0x12>
	icall
     bb8:	09 95       	icall
2:	pop	ZL
     bba:	ef 91       	pop	r30
	pop	ZH
     bbc:	ff 91       	pop	r31
	ret
     bbe:	08 95       	ret

00000bc0 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     bc0:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     bc2:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     bc4:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     bc6:	11 f0       	breq	.+4      	; 0xbcc <xputs+0xc>
	rcall	xputc
     bc8:	ef df       	rcall	.-34     	; 0xba8 <xputc>
	rjmp	1b
     bca:	fb cf       	rjmp	.-10     	; 0xbc2 <xputs+0x2>
2:	ret
     bcc:	08 95       	ret

00000bce <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     bce:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     bd0:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     bd2:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     bd4:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <xitoa+0x22>
	neg	r20		;
     bd8:	41 95       	neg	r20
	sbrs	r25, 7		;
     bda:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <xitoa+0x22>
	ldi	r30, '-'	;
     bde:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     be0:	60 95       	com	r22
	com	r23		;
     be2:	70 95       	com	r23
	com	r24		;
     be4:	80 95       	com	r24
	com	r25		;
     be6:	90 95       	com	r25
	adc	r22, r1		;
     be8:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     bea:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     bec:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     bee:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     bf0:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <xitoa+0x2a>
	neg	r18		;
     bf4:	21 95       	neg	r18
	ldi	r19, '0'	;/
     bf6:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     bf8:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     bfa:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     bfc:	66 0f       	add	r22, r22
	rol	r23		;
     bfe:	77 1f       	adc	r23, r23
	rol	r24		;
     c00:	88 1f       	adc	r24, r24
	rol	r25		;
     c02:	99 1f       	adc	r25, r25
	rol	r26		;
     c04:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     c06:	a4 17       	cp	r26, r20
	brcs	3f		;
     c08:	10 f0       	brcs	.+4      	; 0xc0e <xitoa+0x40>
	sub	r26, r20	;
     c0a:	a4 1b       	sub	r26, r20
	inc	r22		;
     c0c:	63 95       	inc	r22
3:	dec	r21		;
     c0e:	5a 95       	dec	r21
	brne	2b		;/
     c10:	a9 f7       	brne	.-22     	; 0xbfc <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     c12:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     c14:	08 f0       	brcs	.+2      	; 0xc18 <xitoa+0x4a>
	subi	r26, -7		;
     c16:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     c18:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     c1a:	af 93       	push	r26
	inc	r31		;/
     c1c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     c1e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     c20:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     c22:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     c24:	91 05       	cpc	r25, r1
	brne	1b		;/
     c26:	41 f7       	brne	.-48     	; 0xbf8 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     c28:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     c2a:	11 f4       	brne	.+4      	; 0xc30 <xitoa+0x62>
	push	r30		;
     c2c:	ef 93       	push	r30
	inc	r31		;/
     c2e:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     c30:	f2 17       	cp	r31, r18
	brcc	6f		;
     c32:	18 f4       	brcc	.+6      	; 0xc3a <xitoa+0x6c>
	push	r19		;
     c34:	3f 93       	push	r19
	inc	r31		;
     c36:	f3 95       	inc	r31
	rjmp	5b		;/
     c38:	fb cf       	rjmp	.-10     	; 0xc30 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     c3a:	8f 91       	pop	r24
	rcall	xputc		;
     c3c:	b5 df       	rcall	.-150    	; 0xba8 <xputc>
	dec	r31		;
     c3e:	fa 95       	dec	r31
	brne	6b		;/
     c40:	e1 f7       	brne	.-8      	; 0xc3a <xitoa+0x6c>

	ret
     c42:	08 95       	ret

00000c44 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     c44:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     c46:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     c48:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     c4a:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     c4c:	21 f0       	breq	.+8      	; 0xc56 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     c4e:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     c50:	19 f0       	breq	.+6      	; 0xc58 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     c52:	aa df       	rcall	.-172    	; 0xba8 <xputc>
	rjmp	0b		;/
     c54:	f9 cf       	rjmp	.-14     	; 0xc48 <xvprintf+0x4>
90:	ret
     c56:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     c58:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     c5a:	e8 94       	clt
	_LPMI	r21		;Get flags
     c5c:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     c5e:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     c60:	c1 f3       	breq	.-16     	; 0xc52 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     c62:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     c64:	11 f4       	brne	.+4      	; 0xc6a <xvprintf+0x26>
	set			;/
     c66:	68 94       	set
22:	_LPMI	r21		;Get width
     c68:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     c6a:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     c6c:	48 f4       	brcc	.+18     	; 0xc80 <xvprintf+0x3c>
	subi	r21, '0'	;
     c6e:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     c70:	90 f3       	brcs	.-28     	; 0xc56 <xvprintf+0x12>
	lsl	r18		;
     c72:	22 0f       	add	r18, r18
	mov	r0, r18		;
     c74:	02 2e       	mov	r0, r18
	lsl	r18		;
     c76:	22 0f       	add	r18, r18
	lsl	r18		;
     c78:	22 0f       	add	r18, r18
	add	r18, r0		;
     c7a:	20 0d       	add	r18, r0
	add	r18, r21	;
     c7c:	25 0f       	add	r18, r21
	rjmp	22b		;/
     c7e:	f4 cf       	rjmp	.-24     	; 0xc68 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     c80:	0e f4       	brtc	.+2      	; 0xc84 <xvprintf+0x40>
	neg	r18		;
     c82:	21 95       	neg	r18
25:	ld	r24, Y+		;
     c84:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     c86:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     c88:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     c8a:	19 f3       	breq	.-58     	; 0xc52 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     c8c:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     c8e:	29 f1       	breq	.+74     	; 0xcda <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     c90:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     c92:	59 f1       	breq	.+86     	; 0xcea <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     c94:	bc 01       	movw	r22, r24
	clr	r24		;
     c96:	88 27       	eor	r24, r24
	clr	r25		;
     c98:	99 27       	eor	r25, r25
	clt			;/
     c9a:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     c9c:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     c9e:	21 f4       	brne	.+8      	; 0xca8 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     ca0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     ca2:	99 91       	ld	r25, Y+
	set			;
     ca4:	68 94       	set
	_LPMI	r21		;/
     ca6:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     ca8:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     caa:	39 f4       	brne	.+14     	; 0xcba <xvprintf+0x76>
	ldi	r20, -10	;
     cac:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     cae:	7e f0       	brts	.+30     	; 0xcce <xvprintf+0x8a>
	sbrs	r23, 7		;
     cb0:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <xvprintf+0x8a>
	ldi	r24, -1		;
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     cb6:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     cb8:	0a c0       	rjmp	.+20     	; 0xcce <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     cba:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     cbc:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     cbe:	39 f0       	breq	.+14     	; 0xcce <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     cc0:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     cc2:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     cc4:	21 f0       	breq	.+8      	; 0xcce <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     cc6:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     cc8:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     cca:	09 f0       	breq	.+2      	; 0xcce <xvprintf+0x8a>
	ret			;abort
     ccc:	08 95       	ret
40:	push	ZH		;Output the value
     cce:	ff 93       	push	r31
	push	ZL		;
     cd0:	ef 93       	push	r30
	rcall	xitoa		;
     cd2:	7d df       	rcall	.-262    	; 0xbce <xitoa>
42:	pop	ZL		;
     cd4:	ef 91       	pop	r30
	pop	ZH		;
     cd6:	ff 91       	pop	r31
	rjmp	0b		;/
     cd8:	b7 cf       	rjmp	.-146    	; 0xc48 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     cda:	ff 93       	push	r31
	push	ZL
     cdc:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     cde:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     ce0:	81 91       	ld	r24, Z+
	cpi	r24, 0
     ce2:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     ce4:	b9 f3       	breq	.-18     	; 0xcd4 <xvprintf+0x90>
	rcall	xputc
     ce6:	60 df       	rcall	.-320    	; 0xba8 <xputc>
	rjmp	51b
     ce8:	fb cf       	rjmp	.-10     	; 0xce0 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     cea:	ff 93       	push	r31
	push	ZL
     cec:	ef 93       	push	r30
	rcall	xputs
     cee:	68 df       	rcall	.-304    	; 0xbc0 <xputs>
	rjmp	42b
     cf0:	f1 cf       	rjmp	.-30     	; 0xcd4 <xvprintf+0x90>

00000cf2 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     cf2:	df 93       	push	r29
	push	YL
     cf4:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     cf6:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     cf8:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     cfa:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     cfc:	a3 df       	rcall	.-186    	; 0xc44 <xvprintf>
	pop	YL
     cfe:	cf 91       	pop	r28
	pop	YH
     d00:	df 91       	pop	r29
	ret
     d02:	08 95       	ret

00000d04 <unselect_rows>:
 * pin: D2  D3  D4  D5  D6  D7
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRD  &= ~0b11111100;
     d04:	8a b1       	in	r24, 0x0a	; 10
     d06:	83 70       	andi	r24, 0x03	; 3
     d08:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b11111100;
     d0a:	8b b1       	in	r24, 0x0b	; 11
     d0c:	83 70       	andi	r24, 0x03	; 3
     d0e:	8b b9       	out	0x0b, r24	; 11
     d10:	08 95       	ret

00000d12 <matrix_init>:


void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     d12:	0e 94 82 06 	call	0xd04	; 0xd04 <unselect_rows>
 * pin:                                 B7                      (Rev.B)
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     d16:	80 b3       	in	r24, 0x10	; 16
     d18:	80 7c       	andi	r24, 0xC0	; 192
     d1a:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     d1c:	81 b3       	in	r24, 0x11	; 17
     d1e:	8f 63       	ori	r24, 0x3F	; 63
     d20:	81 bb       	out	0x11, r24	; 17

    DDRC  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     d22:	87 b1       	in	r24, 0x07	; 7
     d24:	17 b8       	out	0x07, r1	; 7
    PORTC |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     d26:	88 b1       	in	r24, 0x08	; 8
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	88 b9       	out	0x08, r24	; 8
     d2c:	e2 e4       	ldi	r30, 0x42	; 66
     d2e:	f1 e0       	ldi	r31, 0x01	; 1
     d30:	a6 e3       	ldi	r26, 0x36	; 54
     d32:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     d34:	11 92       	st	Z+, r1
     d36:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     d38:	1d 92       	st	X+, r1
     d3a:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	ee 34       	cpi	r30, 0x4E	; 78
     d40:	f8 07       	cpc	r31, r24
     d42:	c1 f7       	brne	.-16     	; 0xd34 <matrix_init+0x22>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     d44:	08 95       	ret

00000d46 <matrix_scan>:

uint8_t matrix_scan(void)
{
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	c6 e3       	ldi	r28, 0x36	; 54
     d54:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     d56:	10 e0       	ldi	r17, 0x00	; 0
     d58:	01 e0       	ldi	r16, 0x01	; 1
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     d5a:	68 e7       	ldi	r22, 0x78	; 120
     d5c:	e6 2e       	mov	r14, r22
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	f6 2e       	mov	r15, r22
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     d62:	13 30       	cpi	r17, 0x03	; 3
     d64:	99 f0       	breq	.+38     	; 0xd8c <matrix_scan+0x46>
     d66:	28 f4       	brcc	.+10     	; 0xd72 <matrix_scan+0x2c>
     d68:	11 30       	cpi	r17, 0x01	; 1
     d6a:	51 f0       	breq	.+20     	; 0xd80 <matrix_scan+0x3a>
     d6c:	12 30       	cpi	r17, 0x02	; 2
     d6e:	59 f0       	breq	.+22     	; 0xd86 <matrix_scan+0x40>
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <matrix_scan+0x34>
     d72:	14 30       	cpi	r17, 0x04	; 4
     d74:	71 f0       	breq	.+28     	; 0xd92 <matrix_scan+0x4c>
     d76:	15 30       	cpi	r17, 0x05	; 5
     d78:	79 f0       	breq	.+30     	; 0xd98 <matrix_scan+0x52>
        case 0:
            DDRD  |= (1<<2);
     d7a:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
     d7c:	5a 98       	cbi	0x0b, 2	; 11
     d7e:	0e c0       	rjmp	.+28     	; 0xd9c <matrix_scan+0x56>
            break;
        case 1:
            DDRD  |= (1<<3);
     d80:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1<<3);
     d82:	5b 98       	cbi	0x0b, 3	; 11
     d84:	0b c0       	rjmp	.+22     	; 0xd9c <matrix_scan+0x56>
            break;
        case 2:
            DDRD  |= (1<<4);
     d86:	54 9a       	sbi	0x0a, 4	; 10
            PORTD &= ~(1<<4);
     d88:	5c 98       	cbi	0x0b, 4	; 11
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <matrix_scan+0x56>
            break;
        case 3:
            DDRD  |= (1<<5);
     d8c:	55 9a       	sbi	0x0a, 5	; 10
            PORTD &= ~(1<<5);
     d8e:	5d 98       	cbi	0x0b, 5	; 11
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <matrix_scan+0x56>
            break;
        case 4:
            DDRD  |= (1<<6);
     d92:	56 9a       	sbi	0x0a, 6	; 10
            PORTD &= ~(1<<6);
     d94:	5e 98       	cbi	0x0b, 6	; 11
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <matrix_scan+0x56>
            break;
        case 5:
            DDRD  |= (1<<7);
     d98:	57 9a       	sbi	0x0a, 7	; 10
            PORTD &= ~(1<<7);
     d9a:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d9c:	80 ea       	ldi	r24, 0xA0	; 160
     d9e:	8a 95       	dec	r24
     da0:	f1 f7       	brne	.-4      	; 0xd9e <matrix_scan+0x58>

}

static matrix_row_t read_cols(void)
{
    return (PINC&(1<<0) ? 0 : (1<<0)) |
     da2:	26 b1       	in	r18, 0x06	; 6
     da4:	21 70       	andi	r18, 0x01	; 1
     da6:	20 27       	eor	r18, r16
     da8:	30 e0       	ldi	r19, 0x00	; 0
           (PINC&(1<<1) ? 0 : (1<<1)) |
     daa:	31 9b       	sbis	0x06, 1	; 6
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <matrix_scan+0x6e>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <matrix_scan+0x72>
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	90 e0       	ldi	r25, 0x00	; 0

}

static matrix_row_t read_cols(void)
{
    return (PINC&(1<<0) ? 0 : (1<<0)) |
     db8:	28 2b       	or	r18, r24
     dba:	39 2b       	or	r19, r25
           (PINC&(1<<1) ? 0 : (1<<1)) |
           (PINC&(1<<2) ? 0 : (1<<2)) |
     dbc:	32 9b       	sbis	0x06, 2	; 6
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <matrix_scan+0x80>
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <matrix_scan+0x84>
     dc6:	84 e0       	ldi	r24, 0x04	; 4
     dc8:	90 e0       	ldi	r25, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return (PINC&(1<<0) ? 0 : (1<<0)) |
           (PINC&(1<<1) ? 0 : (1<<1)) |
     dca:	82 2b       	or	r24, r18
     dcc:	93 2b       	or	r25, r19
           (PINC&(1<<2) ? 0 : (1<<2)) |
           (PINC&(1<<3) ? 0 : (1<<3)) |
     dce:	33 9b       	sbis	0x06, 3	; 6
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <matrix_scan+0x92>
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <matrix_scan+0x96>
     dd8:	68 e0       	ldi	r22, 0x08	; 8
     dda:	70 e0       	ldi	r23, 0x00	; 0

static matrix_row_t read_cols(void)
{
    return (PINC&(1<<0) ? 0 : (1<<0)) |
           (PINC&(1<<1) ? 0 : (1<<1)) |
           (PINC&(1<<2) ? 0 : (1<<2)) |
     ddc:	9c 01       	movw	r18, r24
     dde:	26 2b       	or	r18, r22
     de0:	37 2b       	or	r19, r23
           (PINC&(1<<3) ? 0 : (1<<3)) |
           (PINC&(1<<4) ? 0 : (1<<4)) |
     de2:	34 9b       	sbis	0x06, 4	; 6
     de4:	03 c0       	rjmp	.+6      	; 0xdec <matrix_scan+0xa6>
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <matrix_scan+0xaa>
     dec:	40 e1       	ldi	r20, 0x10	; 16
     dee:	50 e0       	ldi	r21, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return (PINC&(1<<0) ? 0 : (1<<0)) |
           (PINC&(1<<1) ? 0 : (1<<1)) |
           (PINC&(1<<2) ? 0 : (1<<2)) |
           (PINC&(1<<3) ? 0 : (1<<3)) |
     df0:	24 2b       	or	r18, r20
     df2:	35 2b       	or	r19, r21
           (PINC&(1<<4) ? 0 : (1<<4)) |
           (PINC&(1<<5) ? 0 : (1<<5)) |
     df4:	35 9b       	sbis	0x06, 5	; 6
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <matrix_scan+0xb8>
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <matrix_scan+0xbc>
     dfe:	80 e2       	ldi	r24, 0x20	; 32
     e00:	90 e0       	ldi	r25, 0x00	; 0
{
    return (PINC&(1<<0) ? 0 : (1<<0)) |
           (PINC&(1<<1) ? 0 : (1<<1)) |
           (PINC&(1<<2) ? 0 : (1<<2)) |
           (PINC&(1<<3) ? 0 : (1<<3)) |
           (PINC&(1<<4) ? 0 : (1<<4)) |
     e02:	28 2b       	or	r18, r24
     e04:	39 2b       	or	r19, r25
           (PINC&(1<<5) ? 0 : (1<<5)) |
           (PINC&(1<<6) ? 0 : (1<<6)) |
     e06:	36 9b       	sbis	0x06, 6	; 6
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <matrix_scan+0xca>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <matrix_scan+0xce>
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	90 e0       	ldi	r25, 0x00	; 0
    return (PINC&(1<<0) ? 0 : (1<<0)) |
           (PINC&(1<<1) ? 0 : (1<<1)) |
           (PINC&(1<<2) ? 0 : (1<<2)) |
           (PINC&(1<<3) ? 0 : (1<<3)) |
           (PINC&(1<<4) ? 0 : (1<<4)) |
           (PINC&(1<<5) ? 0 : (1<<5)) |
     e14:	28 2b       	or	r18, r24
     e16:	39 2b       	or	r19, r25
           (PINC&(1<<6) ? 0 : (1<<6)) |
           (PINC&(1<<7) ? 0 : (1<<7)) |
     e18:	86 b1       	in	r24, 0x06	; 6
     e1a:	99 27       	eor	r25, r25
     e1c:	87 fd       	sbrc	r24, 7
     e1e:	90 95       	com	r25
     e20:	80 95       	com	r24
     e22:	90 95       	com	r25
     e24:	88 27       	eor	r24, r24
     e26:	99 0f       	add	r25, r25
     e28:	88 1f       	adc	r24, r24
     e2a:	99 27       	eor	r25, r25
     e2c:	96 95       	lsr	r25
     e2e:	98 2f       	mov	r25, r24
     e30:	88 27       	eor	r24, r24
     e32:	97 95       	ror	r25
     e34:	87 95       	ror	r24
           (PINC&(1<<1) ? 0 : (1<<1)) |
           (PINC&(1<<2) ? 0 : (1<<2)) |
           (PINC&(1<<3) ? 0 : (1<<3)) |
           (PINC&(1<<4) ? 0 : (1<<4)) |
           (PINC&(1<<5) ? 0 : (1<<5)) |
           (PINC&(1<<6) ? 0 : (1<<6)) |
     e36:	28 2b       	or	r18, r24
     e38:	39 2b       	or	r19, r25
           (PINC&(1<<7) ? 0 : (1<<7)) |
           (PINF&(1<<0) ? 0 : (1<<8)) |     
     e3a:	78 9b       	sbis	0x0f, 0	; 15
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <matrix_scan+0xfe>
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <matrix_scan+0x102>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	91 e0       	ldi	r25, 0x01	; 1
           (PINC&(1<<2) ? 0 : (1<<2)) |
           (PINC&(1<<3) ? 0 : (1<<3)) |
           (PINC&(1<<4) ? 0 : (1<<4)) |
           (PINC&(1<<5) ? 0 : (1<<5)) |
           (PINC&(1<<6) ? 0 : (1<<6)) |
           (PINC&(1<<7) ? 0 : (1<<7)) |
     e48:	28 2b       	or	r18, r24
     e4a:	39 2b       	or	r19, r25
           (PINF&(1<<0) ? 0 : (1<<8)) |     
           (PINF&(1<<1) ? 0 : (1<<9)) |
     e4c:	79 9b       	sbis	0x0f, 1	; 15
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <matrix_scan+0x110>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <matrix_scan+0x114>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	92 e0       	ldi	r25, 0x02	; 2
           (PINC&(1<<3) ? 0 : (1<<3)) |
           (PINC&(1<<4) ? 0 : (1<<4)) |
           (PINC&(1<<5) ? 0 : (1<<5)) |
           (PINC&(1<<6) ? 0 : (1<<6)) |
           (PINC&(1<<7) ? 0 : (1<<7)) |
           (PINF&(1<<0) ? 0 : (1<<8)) |     
     e5a:	28 2b       	or	r18, r24
     e5c:	39 2b       	or	r19, r25
           (PINF&(1<<1) ? 0 : (1<<9)) |
           (PINF&(1<<2) ? 0 : (1<<10)) |
     e5e:	7a 9b       	sbis	0x0f, 2	; 15
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <matrix_scan+0x122>
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <matrix_scan+0x126>
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	74 e0       	ldi	r23, 0x04	; 4
           (PINC&(1<<4) ? 0 : (1<<4)) |
           (PINC&(1<<5) ? 0 : (1<<5)) |
           (PINC&(1<<6) ? 0 : (1<<6)) |
           (PINC&(1<<7) ? 0 : (1<<7)) |
           (PINF&(1<<0) ? 0 : (1<<8)) |     
           (PINF&(1<<1) ? 0 : (1<<9)) |
     e6c:	26 2b       	or	r18, r22
     e6e:	37 2b       	or	r19, r23
           (PINF&(1<<2) ? 0 : (1<<10)) |
           (PINF&(1<<3) ? 0 : (1<<11)) |
     e70:	7b 9b       	sbis	0x0f, 3	; 15
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <matrix_scan+0x134>
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <matrix_scan+0x138>
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	58 e0       	ldi	r21, 0x08	; 8
           (PINC&(1<<5) ? 0 : (1<<5)) |
           (PINC&(1<<6) ? 0 : (1<<6)) |
           (PINC&(1<<7) ? 0 : (1<<7)) |
           (PINF&(1<<0) ? 0 : (1<<8)) |     
           (PINF&(1<<1) ? 0 : (1<<9)) |
           (PINF&(1<<2) ? 0 : (1<<10)) |
     e7e:	24 2b       	or	r18, r20
     e80:	35 2b       	or	r19, r21
           (PINF&(1<<3) ? 0 : (1<<11)) |
           (PINF&(1<<4) ? 0 : (1<<12)) |
     e82:	7c 9b       	sbis	0x0f, 4	; 15
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <matrix_scan+0x146>
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <matrix_scan+0x14a>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e1       	ldi	r25, 0x10	; 16
           (PINC&(1<<6) ? 0 : (1<<6)) |
           (PINC&(1<<7) ? 0 : (1<<7)) |
           (PINF&(1<<0) ? 0 : (1<<8)) |     
           (PINF&(1<<1) ? 0 : (1<<9)) |
           (PINF&(1<<2) ? 0 : (1<<10)) |
           (PINF&(1<<3) ? 0 : (1<<11)) |
     e90:	28 2b       	or	r18, r24
     e92:	39 2b       	or	r19, r25
           (PINF&(1<<4) ? 0 : (1<<12)) |
           (PINF&(1<<5) ? 0 : (1<<13));
     e94:	7d 9b       	sbis	0x0f, 5	; 15
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <matrix_scan+0x158>
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <matrix_scan+0x15c>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e2       	ldi	r25, 0x20	; 32
           (PINC&(1<<7) ? 0 : (1<<7)) |
           (PINF&(1<<0) ? 0 : (1<<8)) |     
           (PINF&(1<<1) ? 0 : (1<<9)) |
           (PINF&(1<<2) ? 0 : (1<<10)) |
           (PINF&(1<<3) ? 0 : (1<<11)) |
           (PINF&(1<<4) ? 0 : (1<<12)) |
     ea2:	28 2b       	or	r18, r24
     ea4:	39 2b       	or	r19, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     ea6:	88 81       	ld	r24, Y
     ea8:	99 81       	ldd	r25, Y+1	; 0x01
     eaa:	82 17       	cp	r24, r18
     eac:	93 07       	cpc	r25, r19
     eae:	49 f1       	breq	.+82     	; 0xf02 <matrix_scan+0x1bc>
            matrix_debouncing[i] = cols;
     eb0:	39 83       	std	Y+1, r19	; 0x01
     eb2:	28 83       	st	Y, r18
            if (debouncing) {
     eb4:	80 91 00 01 	lds	r24, 0x0100
     eb8:	88 23       	and	r24, r24
     eba:	01 f1       	breq	.+64     	; 0xefc <matrix_scan+0x1b6>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     ebc:	80 91 ba 01 	lds	r24, 0x01BA
     ec0:	80 ff       	sbrs	r24, 0
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <matrix_scan+0x186>
     ec4:	8d e7       	ldi	r24, 0x7D	; 125
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
     ecc:	80 91 ba 01 	lds	r24, 0x01BA
     ed0:	80 ff       	sbrs	r24, 0
     ed2:	0c c0       	rjmp	.+24     	; 0xeec <matrix_scan+0x1a6>
     ed4:	80 91 00 01 	lds	r24, 0x0100
     ed8:	1f 92       	push	r1
     eda:	8f 93       	push	r24
     edc:	ff 92       	push	r15
     ede:	ef 92       	push	r14
     ee0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	80 91 ba 01 	lds	r24, 0x01BA
     ef0:	80 ff       	sbrs	r24, 0
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <matrix_scan+0x1b6>
     ef4:	86 e7       	ldi	r24, 0x76	; 118
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            }
            debouncing = DEBOUNCE;
     efc:	85 e0       	ldi	r24, 0x05	; 5
     efe:	80 93 00 01 	sts	0x0100, r24
        }
        unselect_rows();
     f02:	0e 94 82 06 	call	0xd04	; 0xd04 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     f06:	1f 5f       	subi	r17, 0xFF	; 255
     f08:	22 96       	adiw	r28, 0x02	; 2
     f0a:	16 30       	cpi	r17, 0x06	; 6
     f0c:	09 f0       	breq	.+2      	; 0xf10 <matrix_scan+0x1ca>
     f0e:	29 cf       	rjmp	.-430    	; 0xd62 <matrix_scan+0x1c>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     f10:	80 91 00 01 	lds	r24, 0x0100
     f14:	88 23       	and	r24, r24
     f16:	c1 f0       	breq	.+48     	; 0xf48 <matrix_scan+0x202>
        if (--debouncing) {
     f18:	81 50       	subi	r24, 0x01	; 1
     f1a:	80 93 00 01 	sts	0x0100, r24
     f1e:	88 23       	and	r24, r24
     f20:	39 f0       	breq	.+14     	; 0xf30 <matrix_scan+0x1ea>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f22:	8f e9       	ldi	r24, 0x9F	; 159
     f24:	9f e0       	ldi	r25, 0x0F	; 15
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <matrix_scan+0x1e0>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <matrix_scan+0x1e6>
     f2c:	00 00       	nop
     f2e:	0c c0       	rjmp	.+24     	; 0xf48 <matrix_scan+0x202>
     f30:	a2 e4       	ldi	r26, 0x42	; 66
     f32:	b1 e0       	ldi	r27, 0x01	; 1
     f34:	e6 e3       	ldi	r30, 0x36	; 54
     f36:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
     f38:	81 91       	ld	r24, Z+
     f3a:	91 91       	ld	r25, Z+
     f3c:	8d 93       	st	X+, r24
     f3e:	9d 93       	st	X+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	e2 34       	cpi	r30, 0x42	; 66
     f44:	f9 07       	cpc	r31, r25
     f46:	c1 f7       	brne	.-16     	; 0xf38 <matrix_scan+0x1f2>
            }
        }
    }

    return 1;
}
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	08 95       	ret

00000f58 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     f58:	e8 2f       	mov	r30, r24
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	ee 5b       	subi	r30, 0xBE	; 190
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
}
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	08 95       	ret

00000f6a <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
     f6a:	81 ff       	sbrs	r24, 1
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <led_set+0x8>
        // output low
        DDRB |= (1<<2);
     f6e:	22 9a       	sbi	0x04, 2	; 4
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <led_set+0xa>
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
     f72:	22 98       	cbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
     f74:	2a 98       	cbi	0x05, 2	; 5
     f76:	08 95       	ret

00000f78 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     f78:	80 91 5a 01 	lds	r24, 0x015A
     f7c:	08 95       	ret

00000f7e <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
     f7e:	9f b7       	in	r25, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	10 92 51 01 	sts	0x0151, r1
     f86:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f88:	90 91 cf 01 	lds	r25, 0x01CF
     f8c:	94 30       	cpi	r25, 0x04	; 4
     f8e:	09 f0       	breq	.+2      	; 0xf92 <sendchar+0x14>
     f90:	58 c0       	rjmp	.+176    	; 0x1042 <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     f92:	90 91 e9 00 	lds	r25, 0x00E9
     f96:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f98:	20 91 ec 00 	lds	r18, 0x00EC
     f9c:	20 ff       	sbrs	r18, 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <sendchar+0x26>
     fa0:	20 e8       	ldi	r18, 0x80	; 128
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <sendchar+0x28>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     fa6:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fa8:	94 e0       	ldi	r25, 0x04	; 4
     faa:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     fae:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     fb2:	90 ff       	sbrs	r25, 0
     fb4:	43 c0       	rjmp	.+134    	; 0x103c <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     fb6:	90 91 ee 00 	lds	r25, 0x00EE
     fba:	97 ff       	sbrs	r25, 7
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
     fbe:	90 91 4e 01 	lds	r25, 0x014E
     fc2:	99 23       	and	r25, r25
     fc4:	21 f0       	breq	.+8      	; 0xfce <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fc6:	90 91 e8 00 	lds	r25, 0x00E8
     fca:	95 ff       	sbrs	r25, 5
     fcc:	37 c0       	rjmp	.+110    	; 0x103c <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
     fce:	10 92 4e 01 	sts	0x014E, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
     fd2:	96 e0       	ldi	r25, 0x06	; 6
     fd4:	30 91 e8 00 	lds	r19, 0x00E8
     fd8:	35 fd       	sbrc	r19, 5
     fda:	15 c0       	rjmp	.+42     	; 0x1006 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
     fdc:	30 91 cf 01 	lds	r19, 0x01CF
     fe0:	34 30       	cpi	r19, 0x04	; 4
     fe2:	61 f5       	brne	.+88     	; 0x103c <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     fe4:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
     fe8:	35 fd       	sbrc	r19, 5
     fea:	28 c0       	rjmp	.+80     	; 0x103c <sendchar+0xbe>
     fec:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
     fee:	21 f4       	brne	.+8      	; 0xff8 <sendchar+0x7a>
            timeouted = true;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 93 4e 01 	sts	0x014E, r24
            goto ERROR_EXIT;
     ff6:	22 c0       	rjmp	.+68     	; 0x103c <sendchar+0xbe>
     ff8:	ef e9       	ldi	r30, 0x9F	; 159
     ffa:	ff e0       	ldi	r31, 0x0F	; 15
     ffc:	31 97       	sbiw	r30, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <sendchar+0x7e>
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <sendchar+0x84>
    1002:	00 00       	nop
    1004:	e7 cf       	rjmp	.-50     	; 0xfd4 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1006:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    100a:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    100e:	85 fd       	sbrc	r24, 5
    1010:	0a c0       	rjmp	.+20     	; 0x1026 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1012:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1016:	80 ff       	sbrs	r24, 0
    1018:	fc cf       	rjmp	.-8      	; 0x1012 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    101a:	80 91 e8 00 	lds	r24, 0x00E8
    101e:	8e 77       	andi	r24, 0x7E	; 126
    1020:	80 93 e8 00 	sts	0x00E8, r24
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1026:	8f b7       	in	r24, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	90 93 51 01 	sts	0x0151, r25
    1030:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1032:	2f 70       	andi	r18, 0x0F	; 15
    1034:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	08 95       	ret
    103c:	2f 70       	andi	r18, 0x0F	; 15
    103e:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1044:	08 95       	ret

00001046 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	00 d0       	rcall	.+0      	; 0x104c <send_consumer+0x6>
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1052:	20 91 cf 01 	lds	r18, 0x01CF
    1056:	24 30       	cpi	r18, 0x04	; 4
    1058:	19 f5       	brne	.+70     	; 0x10a0 <send_consumer+0x5a>
        return;

    report_extra_t r = {
    105a:	23 e0       	ldi	r18, 0x03	; 3
    105c:	29 83       	std	Y+1, r18	; 0x01
    105e:	9b 83       	std	Y+3, r25	; 0x03
    1060:	8a 83       	std	Y+2, r24	; 0x02
    1062:	20 93 e9 00 	sts	0x00E9, r18
    1066:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1068:	90 91 e8 00 	lds	r25, 0x00E8
    106c:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    106e:	95 fd       	sbrc	r25, 5
    1070:	06 c0       	rjmp	.+12     	; 0x107e <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1072:	95 ed       	ldi	r25, 0xD5	; 213
    1074:	9a 95       	dec	r25
    1076:	f1 f7       	brne	.-4      	; 0x1074 <send_consumer+0x2e>
    1078:	00 00       	nop
    107a:	81 11       	cpse	r24, r1
    107c:	f5 cf       	rjmp	.-22     	; 0x1068 <send_consumer+0x22>
    107e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1082:	85 ff       	sbrs	r24, 5
    1084:	0d c0       	rjmp	.+26     	; 0x10a0 <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	63 e0       	ldi	r22, 0x03	; 3
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	ce 01       	movw	r24, r28
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1096:	80 91 e8 00 	lds	r24, 0x00E8
    109a:	8e 77       	andi	r24, 0x7E	; 126
    109c:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <send_system+0x6>
    10b2:	1f 92       	push	r1
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    10b8:	20 91 cf 01 	lds	r18, 0x01CF
    10bc:	24 30       	cpi	r18, 0x04	; 4
    10be:	21 f5       	brne	.+72     	; 0x1108 <send_system+0x5c>
        return;

    report_extra_t r = {
    10c0:	22 e0       	ldi	r18, 0x02	; 2
    10c2:	29 83       	std	Y+1, r18	; 0x01
    10c4:	9b 83       	std	Y+3, r25	; 0x03
    10c6:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	80 93 e9 00 	sts	0x00E9, r24
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10d0:	90 91 e8 00 	lds	r25, 0x00E8
    10d4:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    10d6:	95 fd       	sbrc	r25, 5
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <send_system+0x3a>
    10da:	95 ed       	ldi	r25, 0xD5	; 213
    10dc:	9a 95       	dec	r25
    10de:	f1 f7       	brne	.-4      	; 0x10dc <send_system+0x30>
    10e0:	00 00       	nop
    10e2:	81 11       	cpse	r24, r1
    10e4:	f5 cf       	rjmp	.-22     	; 0x10d0 <send_system+0x24>
    10e6:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    10ea:	85 ff       	sbrs	r24, 5
    10ec:	0d c0       	rjmp	.+26     	; 0x1108 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	63 e0       	ldi	r22, 0x03	; 3
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	ce 01       	movw	r24, r28
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10fe:	80 91 e8 00 	lds	r24, 0x00E8
    1102:	8e 77       	andi	r24, 0x7E	; 126
    1104:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1114:	20 91 cf 01 	lds	r18, 0x01CF
    1118:	24 30       	cpi	r18, 0x04	; 4
    111a:	f1 f4       	brne	.+60     	; 0x1158 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    111c:	22 e0       	ldi	r18, 0x02	; 2
    111e:	20 93 e9 00 	sts	0x00E9, r18
    1122:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1124:	30 91 e8 00 	lds	r19, 0x00E8
    1128:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    112a:	35 fd       	sbrc	r19, 5
    112c:	06 c0       	rjmp	.+12     	; 0x113a <send_mouse+0x26>
    112e:	35 ed       	ldi	r19, 0xD5	; 213
    1130:	3a 95       	dec	r19
    1132:	f1 f7       	brne	.-4      	; 0x1130 <send_mouse+0x1c>
    1134:	00 00       	nop
    1136:	21 11       	cpse	r18, r1
    1138:	f5 cf       	rjmp	.-22     	; 0x1124 <send_mouse+0x10>
    113a:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    113e:	25 ff       	sbrs	r18, 5
    1140:	0b c0       	rjmp	.+22     	; 0x1158 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	65 e0       	ldi	r22, 0x05	; 5
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    114e:	80 91 e8 00 	lds	r24, 0x00E8
    1152:	8e 77       	andi	r24, 0x7E	; 126
    1154:	80 93 e8 00 	sts	0x00E8, r24
    1158:	08 95       	ret

0000115a <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1160:	80 91 cf 01 	lds	r24, 0x01CF
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	39 f5       	brne	.+78     	; 0x11b6 <send_keyboard+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 e9 00 	sts	0x00E9, r24
    116e:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1170:	90 91 e8 00 	lds	r25, 0x00E8
    1174:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1176:	95 fd       	sbrc	r25, 5
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <send_keyboard+0x2c>
    117a:	95 ed       	ldi	r25, 0xD5	; 213
    117c:	9a 95       	dec	r25
    117e:	f1 f7       	brne	.-4      	; 0x117c <send_keyboard+0x22>
    1180:	00 00       	nop
    1182:	81 11       	cpse	r24, r1
    1184:	f5 cf       	rjmp	.-22     	; 0x1170 <send_keyboard+0x16>
    1186:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    118a:	85 ff       	sbrs	r24, 5
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <send_keyboard+0x5c>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	68 e0       	ldi	r22, 0x08	; 8
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	ce 01       	movw	r24, r28
    1198:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    119c:	80 91 e8 00 	lds	r24, 0x00E8
    11a0:	8e 77       	andi	r24, 0x7E	; 126
    11a2:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    11a6:	88 e0       	ldi	r24, 0x08	; 8
    11a8:	fe 01       	movw	r30, r28
    11aa:	a2 e5       	ldi	r26, 0x52	; 82
    11ac:	b1 e0       	ldi	r27, 0x01	; 1
    11ae:	01 90       	ld	r0, Z+
    11b0:	0d 92       	st	X+, r0
    11b2:	8a 95       	dec	r24
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <send_keyboard+0x54>
}
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    11bc:	85 eb       	ldi	r24, 0xB5	; 181
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    11c4:	80 91 ce 01 	lds	r24, 0x01CE
    11c8:	81 11       	cpse	r24, r1
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    11cc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <USB_Disable>
        USB_Init();
    11d0:	0e 94 c7 0c 	call	0x198e	; 0x198e <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    11d4:	80 91 e2 00 	lds	r24, 0x00E2
    11d8:	84 60       	ori	r24, 0x04	; 4
    11da:	80 93 e2 00 	sts	0x00E2, r24
    11de:	08 95       	ret

000011e0 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    11e0:	81 eb       	ldi	r24, 0xB1	; 177
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    11e8:	10 92 ce 01 	sts	0x01CE, r1
    11ec:	08 95       	ret

000011ee <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
    11ee:	08 95       	ret

000011f0 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    11f0:	80 91 4f 01 	lds	r24, 0x014F
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	80 93 4f 01 	sts	0x014F, r24
    11fa:	62 e3       	ldi	r22, 0x32	; 50
    11fc:	0e 94 f9 28 	call	0x51f2	; 0x51f2 <__udivmodqi4>
    1200:	91 11       	cpse	r25, r1
    1202:	35 c0       	rjmp	.+106    	; 0x126e <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    1204:	10 92 4f 01 	sts	0x014F, r1

    if (!console_flush) return;
    1208:	80 91 51 01 	lds	r24, 0x0151
    120c:	88 23       	and	r24, r24
    120e:	79 f1       	breq	.+94     	; 0x126e <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1210:	80 91 cf 01 	lds	r24, 0x01CF
    1214:	84 30       	cpi	r24, 0x04	; 4
    1216:	49 f5       	brne	.+82     	; 0x126a <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1218:	80 91 e9 00 	lds	r24, 0x00E9
    121c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    121e:	90 91 ec 00 	lds	r25, 0x00EC
    1222:	90 ff       	sbrs	r25, 0
    1224:	02 c0       	rjmp	.+4      	; 0x122a <EVENT_USB_Device_StartOfFrame+0x3a>
    1226:	90 e8       	ldi	r25, 0x80	; 128
    1228:	01 c0       	rjmp	.+2      	; 0x122c <EVENT_USB_Device_StartOfFrame+0x3c>
    122a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    122c:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    122e:	84 e0       	ldi	r24, 0x04	; 4
    1230:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1234:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1238:	80 ff       	sbrs	r24, 0
    123a:	14 c0       	rjmp	.+40     	; 0x1264 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    123c:	80 91 ee 00 	lds	r24, 0x00EE
    1240:	87 ff       	sbrs	r24, 7
    1242:	10 c0       	rjmp	.+32     	; 0x1264 <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1244:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1248:	85 ff       	sbrs	r24, 5
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    124c:	10 92 f1 00 	sts	0x00F1, r1
    1250:	f9 cf       	rjmp	.-14     	; 0x1244 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1252:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1256:	80 ff       	sbrs	r24, 0
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    125a:	80 91 e8 00 	lds	r24, 0x00E8
    125e:	8e 77       	andi	r24, 0x7E	; 126
    1260:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1264:	9f 70       	andi	r25, 0x0F	; 15
    1266:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    126a:	10 92 51 01 	sts	0x0151, r1
    126e:	08 95       	ret

00001270 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1270:	42 e0       	ldi	r20, 0x02	; 2
    1272:	61 ec       	ldi	r22, 0xC1	; 193
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	0e 94 df 0b 	call	0x17be	; 0x17be <Endpoint_ConfigureEndpoint_Prv>
    127a:	42 e0       	ldi	r20, 0x02	; 2
    127c:	61 ec       	ldi	r22, 0xC1	; 193
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	0e 94 df 0b 	call	0x17be	; 0x17be <Endpoint_ConfigureEndpoint_Prv>
    1284:	42 e0       	ldi	r20, 0x02	; 2
    1286:	61 ec       	ldi	r22, 0xC1	; 193
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	0e 94 df 0b 	call	0x17be	; 0x17be <Endpoint_ConfigureEndpoint_Prv>
    128e:	42 e2       	ldi	r20, 0x22	; 34
    1290:	61 ec       	ldi	r22, 0xC1	; 193
    1292:	84 e0       	ldi	r24, 0x04	; 4
    1294:	0c 94 df 0b 	jmp	0x17be	; 0x17be <Endpoint_ConfigureEndpoint_Prv>

00001298 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1298:	80 91 d1 01 	lds	r24, 0x01D1
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	09 f4       	brne	.+2      	; 0x12a2 <EVENT_USB_Device_ControlRequest+0xa>
    12a0:	53 c0       	rjmp	.+166    	; 0x1348 <EVENT_USB_Device_ControlRequest+0xb0>
    12a2:	30 f4       	brcc	.+12     	; 0x12b0 <EVENT_USB_Device_ControlRequest+0x18>
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	71 f0       	breq	.+28     	; 0x12c4 <EVENT_USB_Device_ControlRequest+0x2c>
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	09 f4       	brne	.+2      	; 0x12ae <EVENT_USB_Device_ControlRequest+0x16>
    12ac:	8c c0       	rjmp	.+280    	; 0x13c6 <EVENT_USB_Device_ControlRequest+0x12e>
    12ae:	08 95       	ret
    12b0:	8a 30       	cpi	r24, 0x0A	; 10
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <EVENT_USB_Device_ControlRequest+0x1e>
    12b4:	78 c0       	rjmp	.+240    	; 0x13a6 <EVENT_USB_Device_ControlRequest+0x10e>
    12b6:	8b 30       	cpi	r24, 0x0B	; 11
    12b8:	09 f4       	brne	.+2      	; 0x12bc <EVENT_USB_Device_ControlRequest+0x24>
    12ba:	5e c0       	rjmp	.+188    	; 0x1378 <EVENT_USB_Device_ControlRequest+0xe0>
    12bc:	89 30       	cpi	r24, 0x09	; 9
    12be:	09 f0       	breq	.+2      	; 0x12c2 <EVENT_USB_Device_ControlRequest+0x2a>
    12c0:	9a c0       	rjmp	.+308    	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
    12c2:	20 c0       	rjmp	.+64     	; 0x1304 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    12c4:	80 91 d0 01 	lds	r24, 0x01D0
    12c8:	81 3a       	cpi	r24, 0xA1	; 161
    12ca:	09 f0       	breq	.+2      	; 0x12ce <EVENT_USB_Device_ControlRequest+0x36>
    12cc:	94 c0       	rjmp	.+296    	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12ce:	80 91 e8 00 	lds	r24, 0x00E8
    12d2:	87 7f       	andi	r24, 0xF7	; 247
    12d4:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    12d8:	80 91 d4 01 	lds	r24, 0x01D4
    12dc:	90 91 d5 01 	lds	r25, 0x01D5
    12e0:	89 2b       	or	r24, r25
    12e2:	21 f0       	breq	.+8      	; 0x12ec <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    12e4:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    12ec:	68 e0       	ldi	r22, 0x08	; 8

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    12ee:	82 e5       	ldi	r24, 0x52	; 82
    12f0:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	0e 94 22 0b 	call	0x1644	; 0x1644 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12f8:	80 91 e8 00 	lds	r24, 0x00E8
    12fc:	8b 77       	andi	r24, 0x7B	; 123
    12fe:	80 93 e8 00 	sts	0x00E8, r24
    1302:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1304:	80 91 d0 01 	lds	r24, 0x01D0
    1308:	81 32       	cpi	r24, 0x21	; 33
    130a:	09 f0       	breq	.+2      	; 0x130e <EVENT_USB_Device_ControlRequest+0x76>
    130c:	74 c0       	rjmp	.+232    	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    130e:	80 91 d4 01 	lds	r24, 0x01D4
    1312:	90 91 d5 01 	lds	r25, 0x01D5
    1316:	89 2b       	or	r24, r25
    1318:	09 f0       	breq	.+2      	; 0x131c <EVENT_USB_Device_ControlRequest+0x84>
    131a:	6d c0       	rjmp	.+218    	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    131c:	80 91 e8 00 	lds	r24, 0x00E8
    1320:	87 7f       	andi	r24, 0xF7	; 247
    1322:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1326:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    132a:	82 fd       	sbrc	r24, 2
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    132e:	80 91 cf 01 	lds	r24, 0x01CF
    1332:	81 11       	cpse	r24, r1
    1334:	f8 cf       	rjmp	.-16     	; 0x1326 <EVENT_USB_Device_ControlRequest+0x8e>
    1336:	5f c0       	rjmp	.+190    	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1338:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    133c:	80 93 5a 01 	sts	0x015A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1340:	80 91 e8 00 	lds	r24, 0x00E8
    1344:	8b 77       	andi	r24, 0x7B	; 123
    1346:	53 c0       	rjmp	.+166    	; 0x13ee <EVENT_USB_Device_ControlRequest+0x156>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1348:	80 91 d0 01 	lds	r24, 0x01D0
    134c:	81 3a       	cpi	r24, 0xA1	; 161
    134e:	09 f0       	breq	.+2      	; 0x1352 <EVENT_USB_Device_ControlRequest+0xba>
    1350:	52 c0       	rjmp	.+164    	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1352:	80 91 d4 01 	lds	r24, 0x01D4
    1356:	90 91 d5 01 	lds	r25, 0x01D5
    135a:	89 2b       	or	r24, r25
    135c:	09 f0       	breq	.+2      	; 0x1360 <EVENT_USB_Device_ControlRequest+0xc8>
    135e:	4b c0       	rjmp	.+150    	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1360:	80 91 e8 00 	lds	r24, 0x00E8
    1364:	87 7f       	andi	r24, 0xF7	; 247
    1366:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    136a:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    136e:	80 ff       	sbrs	r24, 0
    1370:	fc cf       	rjmp	.-8      	; 0x136a <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    1372:	80 91 0b 01 	lds	r24, 0x010B
    1376:	36 c0       	rjmp	.+108    	; 0x13e4 <EVENT_USB_Device_ControlRequest+0x14c>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1378:	80 91 d0 01 	lds	r24, 0x01D0
    137c:	81 32       	cpi	r24, 0x21	; 33
    137e:	d9 f5       	brne	.+118    	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1380:	80 91 d4 01 	lds	r24, 0x01D4
    1384:	90 91 d5 01 	lds	r25, 0x01D5
    1388:	89 2b       	or	r24, r25
    138a:	a9 f5       	brne	.+106    	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    138c:	80 91 e8 00 	lds	r24, 0x00E8
    1390:	87 7f       	andi	r24, 0xF7	; 247
    1392:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1396:	0e 94 14 0c 	call	0x1828	; 0x1828 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    139a:	80 91 d2 01 	lds	r24, 0x01D2
    139e:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    13a2:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    13a6:	80 91 d0 01 	lds	r24, 0x01D0
    13aa:	81 32       	cpi	r24, 0x21	; 33
    13ac:	21 f5       	brne	.+72     	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
    13ae:	80 91 e8 00 	lds	r24, 0x00E8
    13b2:	87 7f       	andi	r24, 0xF7	; 247
    13b4:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    13b8:	0e 94 14 0c 	call	0x1828	; 0x1828 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    13bc:	80 91 d3 01 	lds	r24, 0x01D3
    13c0:	80 93 5b 01 	sts	0x015B, r24
    13c4:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    13c6:	80 91 d0 01 	lds	r24, 0x01D0
    13ca:	81 3a       	cpi	r24, 0xA1	; 161
    13cc:	a1 f4       	brne	.+40     	; 0x13f6 <EVENT_USB_Device_ControlRequest+0x15e>
    13ce:	80 91 e8 00 	lds	r24, 0x00E8
    13d2:	87 7f       	andi	r24, 0xF7	; 247
    13d4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13d8:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    13dc:	80 ff       	sbrs	r24, 0
    13de:	fc cf       	rjmp	.-8      	; 0x13d8 <EVENT_USB_Device_ControlRequest+0x140>
                Endpoint_Write_8(keyboard_idle);
    13e0:	80 91 5b 01 	lds	r24, 0x015B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13e4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13e8:	80 91 e8 00 	lds	r24, 0x00E8
    13ec:	8e 77       	andi	r24, 0x7E	; 126
    13ee:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    13f2:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <Endpoint_ClearStatusStage>
    13f6:	08 95       	ret

000013f8 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    13f8:	08 95       	ret

000013fa <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    13fa:	08 95       	ret

000013fc <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    13fc:	80 91 5a 01 	lds	r24, 0x015A
    1400:	80 93 50 01 	sts	0x0150, r24
    keyboard_led_stats = 0;
    1404:	10 92 5a 01 	sts	0x015A, r1
    led_set(keyboard_led_stats);
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <led_set>

    matrix_clear();
    140e:	0e 94 df 10 	call	0x21be	; 0x21be <matrix_clear>
    clear_keyboard();
    1412:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <clear_keyboard>

00001416 <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
    1416:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <hook_usb_suspend_entry>

0000141a <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    141a:	0e 94 38 1c 	call	0x3870	; 0x3870 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    141e:	80 91 cd 01 	lds	r24, 0x01CD
    1422:	88 23       	and	r24, r24
    1424:	29 f0       	breq	.+10     	; 0x1430 <hook_usb_suspend_loop+0x16>
    1426:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <suspend_wakeup_condition>
    142a:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    142c:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <USB_Device_SendRemoteWakeup>
    1430:	08 95       	ret

00001432 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1432:	84 b7       	in	r24, 0x34	; 52
    1434:	87 7f       	andi	r24, 0xF7	; 247
    1436:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1438:	88 e1       	ldi	r24, 0x18	; 24
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	80 93 60 00 	sts	0x0060, r24
    1442:	10 92 60 00 	sts	0x0060, r1
    1446:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	80 e8       	ldi	r24, 0x80	; 128
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	80 93 61 00 	sts	0x0061, r24
    1454:	90 93 61 00 	sts	0x0061, r25
    1458:	0f be       	out	0x3f, r0	; 63

#ifdef LUFA_DEBUG_SUART
    SUART_OUT_DDR |= (1<<SUART_OUT_BIT);
    SUART_OUT_PORT |= (1<<SUART_OUT_BIT);
#endif
    print_set_sendchar(sendchar);
    145a:	8f eb       	ldi	r24, 0xBF	; 191
    145c:	97 e0       	ldi	r25, 0x07	; 7
    145e:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <print_set_sendchar>
    print("\r\ninit\n");
    1462:	89 ea       	ldi	r24, 0xA9	; 169
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>

    hook_early_init();
    146a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <hook_early_init>
    keyboard_setup();
    146e:	0e 94 04 10 	call	0x2008	; 0x2008 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1472:	0e 94 65 0c 	call	0x18ca	; 0x18ca <USB_Disable>

    USB_Init();
    1476:	0e 94 c7 0c 	call	0x198e	; 0x198e <USB_Init>
    147a:	80 91 e2 00 	lds	r24, 0x00E2
    147e:	84 60       	ori	r24, 0x04	; 4
    1480:	80 93 e2 00 	sts	0x00E2, r24
    print("\r\ninit\n");

    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    1484:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1486:	80 91 cf 01 	lds	r24, 0x01CF
    148a:	84 30       	cpi	r24, 0x04	; 4
    148c:	e1 f7       	brne	.-8      	; 0x1486 <main+0x54>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    148e:	88 e9       	ldi	r24, 0x98	; 152
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>

    /* init modules */
    keyboard_init();
    1496:	0e 94 06 10 	call	0x200c	; 0x200c <keyboard_init>
    host_set_driver(&lufa_driver);
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    14a2:	87 e8       	ldi	r24, 0x87	; 135
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    hook_late_init();
    14aa:	0e 94 fd 09 	call	0x13fa	; 0x13fa <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    14ae:	80 91 cf 01 	lds	r24, 0x01CF
    14b2:	85 30       	cpi	r24, 0x05	; 5
    14b4:	19 f4       	brne	.+6      	; 0x14bc <main+0x8a>
#ifdef LUFA_DEBUG
            print("[s]");
#endif
            hook_usb_suspend_loop();
    14b6:	0e 94 0d 0a 	call	0x141a	; 0x141a <hook_usb_suspend_loop>
    14ba:	f9 cf       	rjmp	.-14     	; 0x14ae <main+0x7c>
        }

        keyboard_task();
    14bc:	0e 94 0c 10 	call	0x2018	; 0x2018 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    14c0:	f6 cf       	rjmp	.-20     	; 0x14ae <main+0x7c>

000014c2 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    14c2:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    14c6:	80 91 50 01 	lds	r24, 0x0150
    14ca:	80 93 5a 01 	sts	0x015A, r24
    14ce:	08 95       	ret

000014d0 <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
    14d0:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <hook_usb_wakeup>

000014d4 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    14d4:	29 2f       	mov	r18, r25
    14d6:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    14d8:	23 30       	cpi	r18, 0x03	; 3
    14da:	31 05       	cpc	r19, r1
    14dc:	a9 f0       	breq	.+42     	; 0x1508 <CALLBACK_USB_GetDescriptor+0x34>
    14de:	6c f4       	brge	.+26     	; 0x14fa <CALLBACK_USB_GetDescriptor+0x26>
    14e0:	21 30       	cpi	r18, 0x01	; 1
    14e2:	31 05       	cpc	r19, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <CALLBACK_USB_GetDescriptor+0x14>
    14e6:	42 c0       	rjmp	.+132    	; 0x156c <CALLBACK_USB_GetDescriptor+0x98>
    14e8:	22 30       	cpi	r18, 0x02	; 2
    14ea:	31 05       	cpc	r19, r1
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <CALLBACK_USB_GetDescriptor+0x1c>
    14ee:	43 c0       	rjmp	.+134    	; 0x1576 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    14f0:	84 e7       	ldi	r24, 0x74	; 116
    14f2:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    14f4:	2d ed       	ldi	r18, 0xDD	; 221
    14f6:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    14f8:	42 c0       	rjmp	.+132    	; 0x157e <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    14fa:	21 32       	cpi	r18, 0x21	; 33
    14fc:	31 05       	cpc	r19, r1
    14fe:	c9 f0       	breq	.+50     	; 0x1532 <CALLBACK_USB_GetDescriptor+0x5e>
    1500:	22 32       	cpi	r18, 0x22	; 34
    1502:	31 05       	cpc	r19, r1
    1504:	19 f1       	breq	.+70     	; 0x154c <CALLBACK_USB_GetDescriptor+0x78>
    1506:	37 c0       	rjmp	.+110    	; 0x1576 <CALLBACK_USB_GetDescriptor+0xa2>
    1508:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	91 05       	cpc	r25, r1
    150e:	41 f0       	breq	.+16     	; 0x1520 <CALLBACK_USB_GetDescriptor+0x4c>
    1510:	82 30       	cpi	r24, 0x02	; 2
    1512:	91 05       	cpc	r25, r1
    1514:	41 f0       	breq	.+16     	; 0x1526 <CALLBACK_USB_GetDescriptor+0x52>
    1516:	89 2b       	or	r24, r25
    1518:	71 f5       	brne	.+92     	; 0x1576 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    151a:	e9 ed       	ldi	r30, 0xD9	; 217
    151c:	f1 e0       	ldi	r31, 0x01	; 1
    151e:	05 c0       	rjmp	.+10     	; 0x152a <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1520:	e5 ec       	ldi	r30, 0xC5	; 197
    1522:	f1 e0       	ldi	r31, 0x01	; 1
    1524:	02 c0       	rjmp	.+4      	; 0x152a <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1526:	e9 eb       	ldi	r30, 0xB9	; 185
    1528:	f1 e0       	ldi	r31, 0x01	; 1
    152a:	84 91       	lpm	r24, Z
    152c:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    152e:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1530:	26 c0       	rjmp	.+76     	; 0x157e <CALLBACK_USB_GetDescriptor+0xaa>
    1532:	64 30       	cpi	r22, 0x04	; 4
    1534:	00 f5       	brcc	.+64     	; 0x1576 <CALLBACK_USB_GetDescriptor+0xa2>
    1536:	e6 2f       	mov	r30, r22
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	e0 5e       	subi	r30, 0xE0	; 224
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	20 81       	ld	r18, Z
    1544:	31 81       	ldd	r19, Z+1	; 0x01
    1546:	89 e0       	ldi	r24, 0x09	; 9
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	19 c0       	rjmp	.+50     	; 0x157e <CALLBACK_USB_GetDescriptor+0xaa>
    154c:	64 30       	cpi	r22, 0x04	; 4
    154e:	98 f4       	brcc	.+38     	; 0x1576 <CALLBACK_USB_GetDescriptor+0xa2>
    1550:	e6 2f       	mov	r30, r22
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	df 01       	movw	r26, r30
    1556:	aa 0f       	add	r26, r26
    1558:	bb 1f       	adc	r27, r27
    155a:	a8 5e       	subi	r26, 0xE8	; 232
    155c:	be 4f       	sbci	r27, 0xFE	; 254
    155e:	2d 91       	ld	r18, X+
    1560:	3c 91       	ld	r19, X
    1562:	ec 5e       	subi	r30, 0xEC	; 236
    1564:	fe 4f       	sbci	r31, 0xFE	; 254
    1566:	80 81       	ld	r24, Z
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	09 c0       	rjmp	.+18     	; 0x157e <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    156c:	82 e1       	ldi	r24, 0x12	; 18
    156e:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1570:	21 e5       	ldi	r18, 0x51	; 81
    1572:	32 e0       	ldi	r19, 0x02	; 2
    1574:	04 c0       	rjmp	.+8      	; 0x157e <CALLBACK_USB_GetDescriptor+0xaa>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    157e:	fa 01       	movw	r30, r20
    1580:	31 83       	std	Z+1, r19	; 0x01
    1582:	20 83       	st	Z, r18
    return Size;
}
    1584:	08 95       	ret

00001586 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1586:	84 e1       	ldi	r24, 0x14	; 20
    1588:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    158a:	86 e1       	ldi	r24, 0x16	; 22
    158c:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    158e:	09 b4       	in	r0, 0x29	; 41
    1590:	00 fe       	sbrs	r0, 0
    1592:	fd cf       	rjmp	.-6      	; 0x158e <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1594:	80 91 d8 00 	lds	r24, 0x00D8
    1598:	8f 7d       	andi	r24, 0xDF	; 223
    159a:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    159e:	80 91 e0 00 	lds	r24, 0x00E0
    15a2:	82 60       	ori	r24, 0x02	; 2
    15a4:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    15a8:	80 91 e0 00 	lds	r24, 0x00E0
    15ac:	81 fd       	sbrc	r24, 1
    15ae:	fc cf       	rjmp	.-8      	; 0x15a8 <USB_Device_SendRemoteWakeup+0x22>
}
    15b0:	08 95       	ret

000015b2 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	7c 01       	movw	r14, r24
    15c4:	8b 01       	movw	r16, r22
    15c6:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    15c8:	0e 94 35 0c 	call	0x186a	; 0x186a <Endpoint_WaitUntilReady>
    15cc:	81 11       	cpse	r24, r1
    15ce:	31 c0       	rjmp	.+98     	; 0x1632 <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    15d0:	20 97       	sbiw	r28, 0x00	; 0
    15d2:	31 f0       	breq	.+12     	; 0x15e0 <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    15d4:	88 81       	ld	r24, Y
    15d6:	99 81       	ldd	r25, Y+1	; 0x01
    15d8:	08 1b       	sub	r16, r24
    15da:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    15dc:	e8 0e       	add	r14, r24
    15de:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    15e0:	c1 2c       	mov	r12, r1
    15e2:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    15e4:	01 15       	cp	r16, r1
    15e6:	11 05       	cpc	r17, r1
    15e8:	19 f1       	breq	.+70     	; 0x1630 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15ea:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    15ee:	85 fd       	sbrc	r24, 5
    15f0:	14 c0       	rjmp	.+40     	; 0x161a <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15f2:	80 91 e8 00 	lds	r24, 0x00E8
    15f6:	8e 77       	andi	r24, 0x7E	; 126
    15f8:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    15fc:	20 97       	sbiw	r28, 0x00	; 0
    15fe:	41 f0       	breq	.+16     	; 0x1610 <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    1600:	88 81       	ld	r24, Y
    1602:	99 81       	ldd	r25, Y+1	; 0x01
    1604:	8c 0d       	add	r24, r12
    1606:	9d 1d       	adc	r25, r13
    1608:	99 83       	std	Y+1, r25	; 0x01
    160a:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    160c:	85 e0       	ldi	r24, 0x05	; 5
    160e:	11 c0       	rjmp	.+34     	; 0x1632 <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1610:	0e 94 35 0c 	call	0x186a	; 0x186a <Endpoint_WaitUntilReady>
    1614:	88 23       	and	r24, r24
    1616:	31 f3       	breq	.-52     	; 0x15e4 <Endpoint_Write_Stream_LE+0x32>
    1618:	0c c0       	rjmp	.+24     	; 0x1632 <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    161a:	f7 01       	movw	r30, r14
    161c:	81 91       	ld	r24, Z+
    161e:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1620:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1624:	01 50       	subi	r16, 0x01	; 1
    1626:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1628:	ff ef       	ldi	r31, 0xFF	; 255
    162a:	cf 1a       	sub	r12, r31
    162c:	df 0a       	sbc	r13, r31
    162e:	da cf       	rjmp	.-76     	; 0x15e4 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1630:	80 e0       	ldi	r24, 0x00	; 0
}
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	08 95       	ret

00001644 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1644:	20 91 d6 01 	lds	r18, 0x01D6
    1648:	30 91 d7 01 	lds	r19, 0x01D7
    164c:	26 17       	cp	r18, r22
    164e:	37 07       	cpc	r19, r23
    1650:	48 f0       	brcs	.+18     	; 0x1664 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1652:	61 15       	cp	r22, r1
    1654:	71 05       	cpc	r23, r1
    1656:	39 f4       	brne	.+14     	; 0x1666 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1658:	20 91 e8 00 	lds	r18, 0x00E8
    165c:	2e 77       	andi	r18, 0x7E	; 126
    165e:	20 93 e8 00 	sts	0x00E8, r18
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <Endpoint_Write_Control_Stream_LE+0x22>
    1664:	b9 01       	movw	r22, r18
    1666:	fc 01       	movw	r30, r24
    1668:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    166a:	61 15       	cp	r22, r1
    166c:	71 05       	cpc	r23, r1
    166e:	99 f1       	breq	.+102    	; 0x16d6 <Endpoint_Write_Control_Stream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1670:	80 91 cf 01 	lds	r24, 0x01CF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1674:	88 23       	and	r24, r24
    1676:	e9 f1       	breq	.+122    	; 0x16f2 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1678:	85 30       	cpi	r24, 0x05	; 5
    167a:	e9 f1       	breq	.+122    	; 0x16f6 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    167c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1680:	83 fd       	sbrc	r24, 3
    1682:	3b c0       	rjmp	.+118    	; 0x16fa <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1684:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1688:	82 ff       	sbrs	r24, 2
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <Endpoint_Write_Control_Stream_LE+0x54>
    168c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1690:	82 ff       	sbrs	r24, 2
    1692:	24 c0       	rjmp	.+72     	; 0x16dc <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1698:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    169c:	80 ff       	sbrs	r24, 0
    169e:	e5 cf       	rjmp	.-54     	; 0x166a <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    16a0:	80 91 f2 00 	lds	r24, 0x00F2
    16a4:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    16a8:	61 15       	cp	r22, r1
    16aa:	71 05       	cpc	r23, r1
    16ac:	51 f0       	breq	.+20     	; 0x16c2 <Endpoint_Write_Control_Stream_LE+0x7e>
    16ae:	88 30       	cpi	r24, 0x08	; 8
    16b0:	91 05       	cpc	r25, r1
    16b2:	38 f4       	brcc	.+14     	; 0x16c2 <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    16b4:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16b6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    16ba:	61 50       	subi	r22, 0x01	; 1
    16bc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	f3 cf       	rjmp	.-26     	; 0x16a8 <Endpoint_Write_Control_Stream_LE+0x64>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    16c2:	21 e0       	ldi	r18, 0x01	; 1
    16c4:	08 97       	sbiw	r24, 0x08	; 8
    16c6:	09 f0       	breq	.+2      	; 0x16ca <Endpoint_Write_Control_Stream_LE+0x86>
    16c8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16ca:	80 91 e8 00 	lds	r24, 0x00E8
    16ce:	8e 77       	andi	r24, 0x7E	; 126
    16d0:	80 93 e8 00 	sts	0x00E8, r24
    16d4:	ca cf       	rjmp	.-108    	; 0x166a <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    16d6:	21 11       	cpse	r18, r1
    16d8:	cb cf       	rjmp	.-106    	; 0x1670 <Endpoint_Write_Control_Stream_LE+0x2c>
    16da:	d8 cf       	rjmp	.-80     	; 0x168c <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16dc:	80 91 cf 01 	lds	r24, 0x01CF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16e0:	88 23       	and	r24, r24
    16e2:	39 f0       	breq	.+14     	; 0x16f2 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16e4:	85 30       	cpi	r24, 0x05	; 5
    16e6:	39 f0       	breq	.+14     	; 0x16f6 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    16ec:	83 ff       	sbrs	r24, 3
    16ee:	ce cf       	rjmp	.-100    	; 0x168c <Endpoint_Write_Control_Stream_LE+0x48>
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <Endpoint_Write_Control_Stream_LE+0xb6>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    16f6:	83 e0       	ldi	r24, 0x03	; 3
    16f8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16fc:	08 95       	ret

000016fe <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    16fe:	20 91 d6 01 	lds	r18, 0x01D6
    1702:	30 91 d7 01 	lds	r19, 0x01D7
    1706:	26 17       	cp	r18, r22
    1708:	37 07       	cpc	r19, r23
    170a:	48 f0       	brcs	.+18     	; 0x171e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    170c:	61 15       	cp	r22, r1
    170e:	71 05       	cpc	r23, r1
    1710:	39 f4       	brne	.+14     	; 0x1720 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1712:	20 91 e8 00 	lds	r18, 0x00E8
    1716:	2e 77       	andi	r18, 0x7E	; 126
    1718:	20 93 e8 00 	sts	0x00E8, r18
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <Endpoint_Write_Control_PStream_LE+0x22>
    171e:	b9 01       	movw	r22, r18
    1720:	fc 01       	movw	r30, r24
    1722:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1724:	61 15       	cp	r22, r1
    1726:	71 05       	cpc	r23, r1
    1728:	b1 f1       	breq	.+108    	; 0x1796 <Endpoint_Write_Control_PStream_LE+0x98>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    172a:	80 91 cf 01 	lds	r24, 0x01CF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    172e:	88 23       	and	r24, r24
    1730:	09 f4       	brne	.+2      	; 0x1734 <Endpoint_Write_Control_PStream_LE+0x36>
    1732:	3f c0       	rjmp	.+126    	; 0x17b2 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1734:	85 30       	cpi	r24, 0x05	; 5
    1736:	09 f4       	brne	.+2      	; 0x173a <Endpoint_Write_Control_PStream_LE+0x3c>
    1738:	3e c0       	rjmp	.+124    	; 0x17b6 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    173a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    173e:	83 fd       	sbrc	r24, 3
    1740:	3c c0       	rjmp	.+120    	; 0x17ba <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1742:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1746:	82 ff       	sbrs	r24, 2
    1748:	06 c0       	rjmp	.+12     	; 0x1756 <Endpoint_Write_Control_PStream_LE+0x58>
    174a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    174e:	82 ff       	sbrs	r24, 2
    1750:	25 c0       	rjmp	.+74     	; 0x179c <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1756:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    175a:	80 ff       	sbrs	r24, 0
    175c:	e3 cf       	rjmp	.-58     	; 0x1724 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    175e:	80 91 f2 00 	lds	r24, 0x00F2
    1762:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1766:	61 15       	cp	r22, r1
    1768:	71 05       	cpc	r23, r1
    176a:	59 f0       	breq	.+22     	; 0x1782 <Endpoint_Write_Control_PStream_LE+0x84>
    176c:	88 30       	cpi	r24, 0x08	; 8
    176e:	91 05       	cpc	r25, r1
    1770:	40 f4       	brcc	.+16     	; 0x1782 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1772:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1774:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1778:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    177a:	61 50       	subi	r22, 0x01	; 1
    177c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	f2 cf       	rjmp	.-28     	; 0x1766 <Endpoint_Write_Control_PStream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1782:	21 e0       	ldi	r18, 0x01	; 1
    1784:	08 97       	sbiw	r24, 0x08	; 8
    1786:	09 f0       	breq	.+2      	; 0x178a <Endpoint_Write_Control_PStream_LE+0x8c>
    1788:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    178a:	80 91 e8 00 	lds	r24, 0x00E8
    178e:	8e 77       	andi	r24, 0x7E	; 126
    1790:	80 93 e8 00 	sts	0x00E8, r24
    1794:	c7 cf       	rjmp	.-114    	; 0x1724 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1796:	21 11       	cpse	r18, r1
    1798:	c8 cf       	rjmp	.-112    	; 0x172a <Endpoint_Write_Control_PStream_LE+0x2c>
    179a:	d7 cf       	rjmp	.-82     	; 0x174a <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    179c:	80 91 cf 01 	lds	r24, 0x01CF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17a0:	88 23       	and	r24, r24
    17a2:	39 f0       	breq	.+14     	; 0x17b2 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17a4:	85 30       	cpi	r24, 0x05	; 5
    17a6:	39 f0       	breq	.+14     	; 0x17b6 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17a8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    17ac:	83 ff       	sbrs	r24, 3
    17ae:	cd cf       	rjmp	.-102    	; 0x174a <Endpoint_Write_Control_PStream_LE+0x4c>
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <Endpoint_Write_Control_PStream_LE+0xbc>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    17b6:	83 e0       	ldi	r24, 0x03	; 3
    17b8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    17bc:	08 95       	ret

000017be <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    17be:	98 2f       	mov	r25, r24
    17c0:	97 30       	cpi	r25, 0x07	; 7
    17c2:	58 f5       	brcc	.+86     	; 0x181a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17c4:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    17c8:	98 17       	cp	r25, r24
    17ca:	39 f0       	breq	.+14     	; 0x17da <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    17cc:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    17d0:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    17d4:	50 91 f0 00 	lds	r21, 0x00F0
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    17da:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    17dc:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    17de:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    17e0:	21 ff       	sbrs	r18, 1
    17e2:	19 c0       	rjmp	.+50     	; 0x1816 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    17e4:	30 91 eb 00 	lds	r19, 0x00EB
    17e8:	3e 7f       	andi	r19, 0xFE	; 254
    17ea:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    17ee:	30 91 ed 00 	lds	r19, 0x00ED
    17f2:	3d 7f       	andi	r19, 0xFD	; 253
    17f4:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    17f8:	30 91 eb 00 	lds	r19, 0x00EB
    17fc:	31 60       	ori	r19, 0x01	; 1
    17fe:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1802:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1806:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    180a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    180e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1812:	27 ff       	sbrs	r18, 7
    1814:	07 c0       	rjmp	.+14     	; 0x1824 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1816:	9f 5f       	subi	r25, 0xFF	; 255
    1818:	d3 cf       	rjmp	.-90     	; 0x17c0 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    181a:	8f 70       	andi	r24, 0x0F	; 15
    181c:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1824:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1826:	08 95       	ret

00001828 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1828:	80 91 d0 01 	lds	r24, 0x01D0
    182c:	87 fd       	sbrc	r24, 7
    182e:	05 c0       	rjmp	.+10     	; 0x183a <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1830:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1834:	80 ff       	sbrs	r24, 0
    1836:	0e c0       	rjmp	.+28     	; 0x1854 <Endpoint_ClearStatusStage+0x2c>
    1838:	12 c0       	rjmp	.+36     	; 0x185e <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    183a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    183e:	82 fd       	sbrc	r24, 2
    1840:	05 c0       	rjmp	.+10     	; 0x184c <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1842:	80 91 cf 01 	lds	r24, 0x01CF
    1846:	81 11       	cpse	r24, r1
    1848:	f8 cf       	rjmp	.-16     	; 0x183a <Endpoint_ClearStatusStage+0x12>
    184a:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    184c:	80 91 e8 00 	lds	r24, 0x00E8
    1850:	8b 77       	andi	r24, 0x7B	; 123
    1852:	08 c0       	rjmp	.+16     	; 0x1864 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1854:	80 91 cf 01 	lds	r24, 0x01CF
    1858:	81 11       	cpse	r24, r1
    185a:	ea cf       	rjmp	.-44     	; 0x1830 <Endpoint_ClearStatusStage+0x8>
    185c:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    185e:	80 91 e8 00 	lds	r24, 0x00E8
    1862:	8e 77       	andi	r24, 0x7E	; 126
    1864:	80 93 e8 00 	sts	0x00E8, r24
    1868:	08 95       	ret

0000186a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    186a:	80 91 e4 00 	lds	r24, 0x00E4
    186e:	90 91 e5 00 	lds	r25, 0x00E5
    1872:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1874:	20 91 ec 00 	lds	r18, 0x00EC
    1878:	20 ff       	sbrs	r18, 0
    187a:	21 c0       	rjmp	.+66     	; 0x18be <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    187c:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1880:	20 fd       	sbrc	r18, 0
    1882:	21 c0       	rjmp	.+66     	; 0x18c6 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1884:	20 91 cf 01 	lds	r18, 0x01CF

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1888:	22 23       	and	r18, r18
    188a:	89 f0       	breq	.+34     	; 0x18ae <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    188c:	25 30       	cpi	r18, 0x05	; 5
    188e:	89 f0       	breq	.+34     	; 0x18b2 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1890:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1894:	25 fd       	sbrc	r18, 5
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <Endpoint_WaitUntilReady+0x4c>
    1898:	20 91 e4 00 	lds	r18, 0x00E4
    189c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    18a0:	28 17       	cp	r18, r24
    18a2:	39 07       	cpc	r19, r25
    18a4:	39 f3       	breq	.-50     	; 0x1874 <Endpoint_WaitUntilReady+0xa>
    18a6:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    18a8:	41 f0       	breq	.+16     	; 0x18ba <Endpoint_WaitUntilReady+0x50>
    18aa:	c9 01       	movw	r24, r18
    18ac:	e3 cf       	rjmp	.-58     	; 0x1874 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    18b2:	83 e0       	ldi	r24, 0x03	; 3
    18b4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    18ba:	84 e0       	ldi	r24, 0x04	; 4
    18bc:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18be:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    18c2:	22 ff       	sbrs	r18, 2
    18c4:	df cf       	rjmp	.-66     	; 0x1884 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	08 95       	ret

000018ca <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    18ca:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    18ce:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    18d2:	e0 ee       	ldi	r30, 0xE0	; 224
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	81 60       	ori	r24, 0x01	; 1
    18da:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    18dc:	e8 ed       	ldi	r30, 0xD8	; 216
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8f 77       	andi	r24, 0x7F	; 127
    18e4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    18e6:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    18e8:	a7 ed       	ldi	r26, 0xD7	; 215
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	8c 91       	ld	r24, X
    18ee:	8e 7f       	andi	r24, 0xFE	; 254
    18f0:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 7e       	andi	r24, 0xEF	; 239
    18f6:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    18f8:	10 92 ce 01 	sts	0x01CE, r1
    18fc:	08 95       	ret

000018fe <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1906:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    190a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    190e:	c8 ed       	ldi	r28, 0xD8	; 216
    1910:	d0 e0       	ldi	r29, 0x00	; 0
    1912:	88 81       	ld	r24, Y
    1914:	8f 77       	andi	r24, 0x7F	; 127
    1916:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1918:	88 81       	ld	r24, Y
    191a:	80 68       	ori	r24, 0x80	; 128
    191c:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    191e:	88 81       	ld	r24, Y
    1920:	8f 7d       	andi	r24, 0xDF	; 223
    1922:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1924:	e7 ed       	ldi	r30, 0xD7	; 215
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	80 68       	ori	r24, 0x80	; 128
    192c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    192e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1930:	10 92 cf 01 	sts	0x01CF, r1
	USB_Device_ConfigurationNumber  = 0;
    1934:	10 92 cb 01 	sts	0x01CB, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1938:	10 92 cd 01 	sts	0x01CD, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    193c:	10 92 cc 01 	sts	0x01CC, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1940:	00 ee       	ldi	r16, 0xE0	; 224
    1942:	10 e0       	ldi	r17, 0x00	; 0
    1944:	f8 01       	movw	r30, r16
    1946:	80 81       	ld	r24, Z
    1948:	8b 7f       	andi	r24, 0xFB	; 251
    194a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    194c:	88 81       	ld	r24, Y
    194e:	81 60       	ori	r24, 0x01	; 1
    1950:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1952:	42 e0       	ldi	r20, 0x02	; 2
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	0e 94 df 0b 	call	0x17be	; 0x17be <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    195c:	e1 ee       	ldi	r30, 0xE1	; 225
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8e 7f       	andi	r24, 0xFE	; 254
    1964:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1966:	e2 ee       	ldi	r30, 0xE2	; 226
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	81 60       	ori	r24, 0x01	; 1
    196e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1970:	80 81       	ld	r24, Z
    1972:	88 60       	ori	r24, 0x08	; 8
    1974:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1976:	f8 01       	movw	r30, r16
    1978:	80 81       	ld	r24, Z
    197a:	8e 7f       	andi	r24, 0xFE	; 254
    197c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    197e:	88 81       	ld	r24, Y
    1980:	80 61       	ori	r24, 0x10	; 16
    1982:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    198e:	e8 ed       	ldi	r30, 0xD8	; 216
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8f 7e       	andi	r24, 0xEF	; 239
    1996:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1998:	e7 ed       	ldi	r30, 0xD7	; 215
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	81 60       	ori	r24, 0x01	; 1
    19a0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	80 93 ce 01 	sts	0x01CE, r24

	USB_ResetInterface();
    19a8:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <USB_ResetInterface>

000019ac <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    19ac:	e8 ed       	ldi	r30, 0xD8	; 216
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8c 7f       	andi	r24, 0xFC	; 252
    19b4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    19b6:	10 92 e2 00 	sts	0x00E2, r1
    19ba:	08 95       	ret

000019bc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    19bc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    19c0:	10 92 e1 00 	sts	0x00E1, r1
    19c4:	08 95       	ret

000019c6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    19c6:	1f 92       	push	r1
    19c8:	0f 92       	push	r0
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	0f 92       	push	r0
    19ce:	11 24       	eor	r1, r1
    19d0:	0b b6       	in	r0, 0x3b	; 59
    19d2:	0f 92       	push	r0
    19d4:	2f 93       	push	r18
    19d6:	3f 93       	push	r19
    19d8:	4f 93       	push	r20
    19da:	5f 93       	push	r21
    19dc:	6f 93       	push	r22
    19de:	7f 93       	push	r23
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
    19e8:	ef 93       	push	r30
    19ea:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    19ec:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    19f0:	82 ff       	sbrs	r24, 2
    19f2:	0b c0       	rjmp	.+22     	; 0x1a0a <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    19f4:	80 91 e2 00 	lds	r24, 0x00E2
    19f8:	82 ff       	sbrs	r24, 2
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    19fc:	80 91 e1 00 	lds	r24, 0x00E1
    1a00:	8b 7f       	andi	r24, 0xFB	; 251
    1a02:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1a06:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1a0a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1a0e:	80 ff       	sbrs	r24, 0
    1a10:	1f c0       	rjmp	.+62     	; 0x1a50 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1a12:	80 91 d8 00 	lds	r24, 0x00D8
    1a16:	80 ff       	sbrs	r24, 0
    1a18:	1b c0       	rjmp	.+54     	; 0x1a50 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1a1a:	80 91 da 00 	lds	r24, 0x00DA
    1a1e:	8e 7f       	andi	r24, 0xFE	; 254
    1a20:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1a24:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1a28:	80 ff       	sbrs	r24, 0
    1a2a:	0d c0       	rjmp	.+26     	; 0x1a46 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a2c:	84 e1       	ldi	r24, 0x14	; 20
    1a2e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a30:	86 e1       	ldi	r24, 0x16	; 22
    1a32:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1a34:	09 b4       	in	r0, 0x29	; 41
    1a36:	00 fe       	sbrs	r0, 0
    1a38:	fd cf       	rjmp	.-6      	; 0x1a34 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	80 93 cf 01 	sts	0x01CF, r24
			EVENT_USB_Device_Connect();
    1a40:	0e 94 de 08 	call	0x11bc	; 0x11bc <EVENT_USB_Device_Connect>
    1a44:	05 c0       	rjmp	.+10     	; 0x1a50 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a46:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1a48:	10 92 cf 01 	sts	0x01CF, r1
			EVENT_USB_Device_Disconnect();
    1a4c:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1a50:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1a54:	80 ff       	sbrs	r24, 0
    1a56:	19 c0       	rjmp	.+50     	; 0x1a8a <__vector_10+0xc4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1a58:	80 91 e2 00 	lds	r24, 0x00E2
    1a5c:	80 ff       	sbrs	r24, 0
    1a5e:	15 c0       	rjmp	.+42     	; 0x1a8a <__vector_10+0xc4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a60:	80 91 e2 00 	lds	r24, 0x00E2
    1a64:	8e 7f       	andi	r24, 0xFE	; 254
    1a66:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a6a:	80 91 e2 00 	lds	r24, 0x00E2
    1a6e:	80 61       	ori	r24, 0x10	; 16
    1a70:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1a74:	80 91 d8 00 	lds	r24, 0x00D8
    1a78:	80 62       	ori	r24, 0x20	; 32
    1a7a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a7e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1a80:	85 e0       	ldi	r24, 0x05	; 5
    1a82:	80 93 cf 01 	sts	0x01CF, r24
		EVENT_USB_Device_Suspend();
    1a86:	0e 94 0b 0a 	call	0x1416	; 0x1416 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1a8a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1a8e:	84 ff       	sbrs	r24, 4
    1a90:	30 c0       	rjmp	.+96     	; 0x1af2 <__vector_10+0x12c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1a92:	80 91 e2 00 	lds	r24, 0x00E2
    1a96:	84 ff       	sbrs	r24, 4
    1a98:	2c c0       	rjmp	.+88     	; 0x1af2 <__vector_10+0x12c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a9a:	84 e1       	ldi	r24, 0x14	; 20
    1a9c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a9e:	86 e1       	ldi	r24, 0x16	; 22
    1aa0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1aa2:	09 b4       	in	r0, 0x29	; 41
    1aa4:	00 fe       	sbrs	r0, 0
    1aa6:	fd cf       	rjmp	.-6      	; 0x1aa2 <__vector_10+0xdc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1aa8:	80 91 d8 00 	lds	r24, 0x00D8
    1aac:	8f 7d       	andi	r24, 0xDF	; 223
    1aae:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1ab2:	80 91 e1 00 	lds	r24, 0x00E1
    1ab6:	8f 7e       	andi	r24, 0xEF	; 239
    1ab8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1abc:	80 91 e2 00 	lds	r24, 0x00E2
    1ac0:	8f 7e       	andi	r24, 0xEF	; 239
    1ac2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1ac6:	80 91 e2 00 	lds	r24, 0x00E2
    1aca:	81 60       	ori	r24, 0x01	; 1
    1acc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1ad0:	80 91 cb 01 	lds	r24, 0x01CB
    1ad4:	88 23       	and	r24, r24
    1ad6:	11 f0       	breq	.+4      	; 0x1adc <__vector_10+0x116>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1ad8:	84 e0       	ldi	r24, 0x04	; 4
    1ada:	07 c0       	rjmp	.+14     	; 0x1aea <__vector_10+0x124>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1adc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1ae0:	87 ff       	sbrs	r24, 7
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <__vector_10+0x122>
    1ae4:	83 e0       	ldi	r24, 0x03	; 3
    1ae6:	01 c0       	rjmp	.+2      	; 0x1aea <__vector_10+0x124>
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	80 93 cf 01 	sts	0x01CF, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1aee:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1af2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1af6:	83 ff       	sbrs	r24, 3
    1af8:	29 c0       	rjmp	.+82     	; 0x1b4c <__vector_10+0x186>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1afa:	80 91 e2 00 	lds	r24, 0x00E2
    1afe:	83 ff       	sbrs	r24, 3
    1b00:	25 c0       	rjmp	.+74     	; 0x1b4c <__vector_10+0x186>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1b02:	80 91 e1 00 	lds	r24, 0x00E1
    1b06:	87 7f       	andi	r24, 0xF7	; 247
    1b08:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	80 93 cf 01 	sts	0x01CF, r24
		USB_Device_ConfigurationNumber = 0;
    1b12:	10 92 cb 01 	sts	0x01CB, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b16:	80 91 e1 00 	lds	r24, 0x00E1
    1b1a:	8e 7f       	andi	r24, 0xFE	; 254
    1b1c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1b20:	80 91 e2 00 	lds	r24, 0x00E2
    1b24:	8e 7f       	andi	r24, 0xFE	; 254
    1b26:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1b2a:	80 91 e2 00 	lds	r24, 0x00E2
    1b2e:	80 61       	ori	r24, 0x10	; 16
    1b30:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b34:	42 e0       	ldi	r20, 0x02	; 2
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	0e 94 df 0b 	call	0x17be	; 0x17be <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1b3e:	80 91 f0 00 	lds	r24, 0x00F0
    1b42:	88 60       	ori	r24, 0x08	; 8
    1b44:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1b48:	0e 94 f7 08 	call	0x11ee	; 0x11ee <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1b4c:	ff 91       	pop	r31
    1b4e:	ef 91       	pop	r30
    1b50:	bf 91       	pop	r27
    1b52:	af 91       	pop	r26
    1b54:	9f 91       	pop	r25
    1b56:	8f 91       	pop	r24
    1b58:	7f 91       	pop	r23
    1b5a:	6f 91       	pop	r22
    1b5c:	5f 91       	pop	r21
    1b5e:	4f 91       	pop	r20
    1b60:	3f 91       	pop	r19
    1b62:	2f 91       	pop	r18
    1b64:	0f 90       	pop	r0
    1b66:	0b be       	out	0x3b, r0	; 59
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	0f 90       	pop	r0
    1b6e:	1f 90       	pop	r1
    1b70:	18 95       	reti

00001b72 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1b72:	1f 92       	push	r1
    1b74:	0f 92       	push	r0
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	0f 92       	push	r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	0b b6       	in	r0, 0x3b	; 59
    1b7e:	0f 92       	push	r0
    1b80:	2f 93       	push	r18
    1b82:	3f 93       	push	r19
    1b84:	4f 93       	push	r20
    1b86:	5f 93       	push	r21
    1b88:	6f 93       	push	r22
    1b8a:	7f 93       	push	r23
    1b8c:	8f 93       	push	r24
    1b8e:	9f 93       	push	r25
    1b90:	af 93       	push	r26
    1b92:	bf 93       	push	r27
    1b94:	cf 93       	push	r28
    1b96:	ef 93       	push	r30
    1b98:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1b9a:	c0 91 e9 00 	lds	r28, 0x00E9
    1b9e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ba0:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ba4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1ba8:	80 91 f0 00 	lds	r24, 0x00F0
    1bac:	87 7f       	andi	r24, 0xF7	; 247
    1bae:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1bb2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1bb4:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <USB_Device_ProcessControlRequest>
    1bb8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1bbc:	80 91 f0 00 	lds	r24, 0x00F0
    1bc0:	88 60       	ori	r24, 0x08	; 8
    1bc2:	80 93 f0 00 	sts	0x00F0, r24
    1bc6:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1bca:	ff 91       	pop	r31
    1bcc:	ef 91       	pop	r30
    1bce:	cf 91       	pop	r28
    1bd0:	bf 91       	pop	r27
    1bd2:	af 91       	pop	r26
    1bd4:	9f 91       	pop	r25
    1bd6:	8f 91       	pop	r24
    1bd8:	7f 91       	pop	r23
    1bda:	6f 91       	pop	r22
    1bdc:	5f 91       	pop	r21
    1bde:	4f 91       	pop	r20
    1be0:	3f 91       	pop	r19
    1be2:	2f 91       	pop	r18
    1be4:	0f 90       	pop	r0
    1be6:	0b be       	out	0x3b, r0	; 59
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	0f 90       	pop	r0
    1bee:	1f 90       	pop	r1
    1bf0:	18 95       	reti

00001bf2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	aa 97       	sbiw	r28, 0x2a	; 42
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	e0 ed       	ldi	r30, 0xD0	; 208
    1c0a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1c0c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1c10:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1c12:	21 e0       	ldi	r18, 0x01	; 1
    1c14:	e8 3d       	cpi	r30, 0xD8	; 216
    1c16:	f2 07       	cpc	r31, r18
    1c18:	c9 f7       	brne	.-14     	; 0x1c0c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1c1a:	0e 94 4c 09 	call	0x1298	; 0x1298 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c1e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1c22:	83 ff       	sbrs	r24, 3
    1c24:	1c c1       	rjmp	.+568    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1c26:	20 91 d0 01 	lds	r18, 0x01D0

		switch (USB_ControlRequest.bRequest)
    1c2a:	30 91 d1 01 	lds	r19, 0x01D1
    1c2e:	83 2f       	mov	r24, r19
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	8a 30       	cpi	r24, 0x0A	; 10
    1c34:	91 05       	cpc	r25, r1
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <USB_Device_ProcessControlRequest+0x48>
    1c38:	12 c1       	rjmp	.+548    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e4 5b       	subi	r30, 0xB4	; 180
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	0c 94 19 29 	jmp	0x5232	; 0x5232 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1c44:	20 38       	cpi	r18, 0x80	; 128
    1c46:	81 f0       	breq	.+32     	; 0x1c68 <USB_Device_ProcessControlRequest+0x76>
    1c48:	22 38       	cpi	r18, 0x82	; 130
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <USB_Device_ProcessControlRequest+0x5c>
    1c4c:	08 c1       	rjmp	.+528    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c4e:	80 91 d4 01 	lds	r24, 0x01D4
    1c52:	8f 70       	andi	r24, 0x0F	; 15
    1c54:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c58:	80 91 eb 00 	lds	r24, 0x00EB
    1c5c:	85 fb       	bst	r24, 5
    1c5e:	88 27       	eor	r24, r24
    1c60:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c62:	10 92 e9 00 	sts	0x00E9, r1
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1c68:	80 91 cc 01 	lds	r24, 0x01CC
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1c6c:	90 91 cd 01 	lds	r25, 0x01CD
    1c70:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1c72:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c74:	90 91 e8 00 	lds	r25, 0x00E8
    1c78:	97 7f       	andi	r25, 0xF7	; 247
    1c7a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1c7e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1c82:	10 92 f1 00 	sts	0x00F1, r1
    1c86:	c5 c0       	rjmp	.+394    	; 0x1e12 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1c88:	82 2f       	mov	r24, r18
    1c8a:	8d 7f       	andi	r24, 0xFD	; 253
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <USB_Device_ProcessControlRequest+0x9e>
    1c8e:	e7 c0       	rjmp	.+462    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1c90:	22 23       	and	r18, r18
    1c92:	19 f0       	breq	.+6      	; 0x1c9a <USB_Device_ProcessControlRequest+0xa8>
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	61 f0       	breq	.+24     	; 0x1cb0 <USB_Device_ProcessControlRequest+0xbe>
    1c98:	e2 c0       	rjmp	.+452    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1c9a:	80 91 d2 01 	lds	r24, 0x01D2
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <USB_Device_ProcessControlRequest+0xb2>
    1ca2:	dd c0       	rjmp	.+442    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1ca4:	33 30       	cpi	r19, 0x03	; 3
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <USB_Device_ProcessControlRequest+0xb8>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	80 93 cd 01 	sts	0x01CD, r24
    1cae:	28 c0       	rjmp	.+80     	; 0x1d00 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1cb0:	80 91 d2 01 	lds	r24, 0x01D2
    1cb4:	81 11       	cpse	r24, r1
    1cb6:	24 c0       	rjmp	.+72     	; 0x1d00 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1cb8:	20 91 d4 01 	lds	r18, 0x01D4
    1cbc:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <USB_Device_ProcessControlRequest+0xd0>
    1cc0:	ce c0       	rjmp	.+412    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cc2:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1cc6:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1cca:	80 ff       	sbrs	r24, 0
    1ccc:	19 c0       	rjmp	.+50     	; 0x1d00 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1cce:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1cd2:	33 30       	cpi	r19, 0x03	; 3
    1cd4:	11 f4       	brne	.+4      	; 0x1cda <USB_Device_ProcessControlRequest+0xe8>
    1cd6:	80 62       	ori	r24, 0x20	; 32
    1cd8:	11 c0       	rjmp	.+34     	; 0x1cfc <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1cda:	80 61       	ori	r24, 0x10	; 16
    1cdc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	01 c0       	rjmp	.+2      	; 0x1cea <USB_Device_ProcessControlRequest+0xf8>
    1ce8:	88 0f       	add	r24, r24
    1cea:	0a 94       	dec	r0
    1cec:	ea f7       	brpl	.-6      	; 0x1ce8 <USB_Device_ProcessControlRequest+0xf6>
    1cee:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1cf2:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1cf6:	80 91 eb 00 	lds	r24, 0x00EB
    1cfa:	88 60       	ori	r24, 0x08	; 8
    1cfc:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d00:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d04:	80 91 e8 00 	lds	r24, 0x00E8
    1d08:	87 7f       	andi	r24, 0xF7	; 247
    1d0a:	86 c0       	rjmp	.+268    	; 0x1e18 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1d0c:	21 11       	cpse	r18, r1
    1d0e:	a7 c0       	rjmp	.+334    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1d10:	10 91 d2 01 	lds	r17, 0x01D2
    1d14:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1d16:	80 91 e3 00 	lds	r24, 0x00E3
    1d1a:	80 78       	andi	r24, 0x80	; 128
    1d1c:	81 2b       	or	r24, r17
    1d1e:	80 93 e3 00 	sts	0x00E3, r24
    1d22:	80 91 e8 00 	lds	r24, 0x00E8
    1d26:	87 7f       	andi	r24, 0xF7	; 247
    1d28:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1d2c:	0e 94 14 0c 	call	0x1828	; 0x1828 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d30:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1d34:	80 ff       	sbrs	r24, 0
    1d36:	fc cf       	rjmp	.-8      	; 0x1d30 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1d38:	80 91 e3 00 	lds	r24, 0x00E3
    1d3c:	80 68       	ori	r24, 0x80	; 128
    1d3e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1d42:	11 23       	and	r17, r17
    1d44:	11 f0       	breq	.+4      	; 0x1d4a <USB_Device_ProcessControlRequest+0x158>
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <USB_Device_ProcessControlRequest+0x15a>
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	80 93 cf 01 	sts	0x01CF, r24
    1d50:	86 c0       	rjmp	.+268    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d52:	20 58       	subi	r18, 0x80	; 128
    1d54:	22 30       	cpi	r18, 0x02	; 2
    1d56:	08 f0       	brcs	.+2      	; 0x1d5a <USB_Device_ProcessControlRequest+0x168>
    1d58:	82 c0       	rjmp	.+260    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1d5a:	80 91 d2 01 	lds	r24, 0x01D2
    1d5e:	90 91 d3 01 	lds	r25, 0x01D3
    1d62:	8c 3d       	cpi	r24, 0xDC	; 220
    1d64:	23 e0       	ldi	r18, 0x03	; 3
    1d66:	92 07       	cpc	r25, r18
    1d68:	79 f5       	brne	.+94     	; 0x1dc8 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1d6e:	8a e2       	ldi	r24, 0x2A	; 42
    1d70:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1d72:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1d74:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1d76:	de 01       	movw	r26, r28
    1d78:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1d7c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1d7e:	51 e2       	ldi	r21, 0x21	; 33
    1d80:	e3 2f       	mov	r30, r19
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	50 93 57 00 	sts	0x0057, r21
    1d88:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1d8a:	20 ff       	sbrs	r18, 0
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    1d8e:	e2 95       	swap	r30
    1d90:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1d92:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1d94:	ef 70       	andi	r30, 0x0F	; 15
    1d96:	8e 2f       	mov	r24, r30
    1d98:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1d9a:	ea 30       	cpi	r30, 0x0A	; 10
    1d9c:	10 f0       	brcs	.+4      	; 0x1da2 <USB_Device_ProcessControlRequest+0x1b0>
    1d9e:	c7 96       	adiw	r24, 0x37	; 55
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <USB_Device_ProcessControlRequest+0x1b2>
    1da2:	c0 96       	adiw	r24, 0x30	; 48
    1da4:	8d 93       	st	X+, r24
    1da6:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1da8:	2f 5f       	subi	r18, 0xFF	; 255
    1daa:	24 31       	cpi	r18, 0x14	; 20
    1dac:	49 f7       	brne	.-46     	; 0x1d80 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1dae:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1db0:	80 91 e8 00 	lds	r24, 0x00E8
    1db4:	87 7f       	andi	r24, 0xF7	; 247
    1db6:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1dba:	6a e2       	ldi	r22, 0x2A	; 42
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	01 96       	adiw	r24, 0x01	; 1
    1dc2:	0e 94 22 0b 	call	0x1644	; 0x1644 <Endpoint_Write_Control_Stream_LE>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1dc8:	ae 01       	movw	r20, r28
    1dca:	4f 5f       	subi	r20, 0xFF	; 255
    1dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dce:	60 91 d4 01 	lds	r22, 0x01D4
    1dd2:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <CALLBACK_USB_GetDescriptor>
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <USB_Device_ProcessControlRequest+0x1ea>
    1dda:	41 c0       	rjmp	.+130    	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
    1ddc:	20 91 e8 00 	lds	r18, 0x00E8
    1de0:	27 7f       	andi	r18, 0xF7	; 247
    1de2:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1de6:	bc 01       	movw	r22, r24
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	9a 81       	ldd	r25, Y+2	; 0x02
    1dec:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1df0:	80 91 e8 00 	lds	r24, 0x00E8
    1df4:	8b 77       	andi	r24, 0x7B	; 123
    1df6:	80 93 e8 00 	sts	0x00E8, r24
    1dfa:	31 c0       	rjmp	.+98     	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1dfc:	20 38       	cpi	r18, 0x80	; 128
    1dfe:	79 f5       	brne	.+94     	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e00:	80 91 e8 00 	lds	r24, 0x00E8
    1e04:	87 7f       	andi	r24, 0xF7	; 247
    1e06:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1e0a:	80 91 cb 01 	lds	r24, 0x01CB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1e0e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e12:	80 91 e8 00 	lds	r24, 0x00E8
    1e16:	8e 77       	andi	r24, 0x7E	; 126
    1e18:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1e1c:	0e 94 14 0c 	call	0x1828	; 0x1828 <Endpoint_ClearStatusStage>
    1e20:	1e c0       	rjmp	.+60     	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e22:	21 11       	cpse	r18, r1
    1e24:	1c c0       	rjmp	.+56     	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1e26:	90 91 d2 01 	lds	r25, 0x01D2
    1e2a:	92 30       	cpi	r25, 0x02	; 2
    1e2c:	c0 f4       	brcc	.+48     	; 0x1e5e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e2e:	80 91 e8 00 	lds	r24, 0x00E8
    1e32:	87 7f       	andi	r24, 0xF7	; 247
    1e34:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1e38:	90 93 cb 01 	sts	0x01CB, r25

	Endpoint_ClearStatusStage();
    1e3c:	0e 94 14 0c 	call	0x1828	; 0x1828 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1e40:	80 91 cb 01 	lds	r24, 0x01CB
    1e44:	81 11       	cpse	r24, r1
    1e46:	04 c0       	rjmp	.+8      	; 0x1e50 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e48:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1e4c:	87 ff       	sbrs	r24, 7
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <USB_Device_ProcessControlRequest+0x262>
    1e50:	84 e0       	ldi	r24, 0x04	; 4
    1e52:	01 c0       	rjmp	.+2      	; 0x1e56 <USB_Device_ProcessControlRequest+0x264>
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	80 93 cf 01 	sts	0x01CF, r24

	EVENT_USB_Device_ConfigurationChanged();
    1e5a:	0e 94 38 09 	call	0x1270	; 0x1270 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e5e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1e62:	83 ff       	sbrs	r24, 3
    1e64:	0a c0       	rjmp	.+20     	; 0x1e7a <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e66:	80 91 e8 00 	lds	r24, 0x00E8
    1e6a:	87 7f       	andi	r24, 0xF7	; 247
    1e6c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e70:	80 91 eb 00 	lds	r24, 0x00EB
    1e74:	80 62       	ori	r24, 0x20	; 32
    1e76:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1e7a:	aa 96       	adiw	r28, 0x2a	; 42
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	08 95       	ret

00001e8e <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1e8e:	90 93 61 01 	sts	0x0161, r25
    1e92:	80 93 60 01 	sts	0x0160, r24
    1e96:	08 95       	ret

00001e98 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1e98:	e0 91 60 01 	lds	r30, 0x0160
    1e9c:	f0 91 61 01 	lds	r31, 0x0161
    1ea0:	30 97       	sbiw	r30, 0x00	; 0
    1ea2:	21 f0       	breq	.+8      	; 0x1eac <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1ea4:	01 90       	ld	r0, Z+
    1ea6:	f0 81       	ld	r31, Z
    1ea8:	e0 2d       	mov	r30, r0
    1eaa:	09 94       	ijmp
}
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	08 95       	ret

00001eb0 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	8c 01       	movw	r16, r24
    if (!driver) return;
    1ebc:	e0 91 60 01 	lds	r30, 0x0160
    1ec0:	f0 91 61 01 	lds	r31, 0x0161
    1ec4:	30 97       	sbiw	r30, 0x00	; 0
    1ec6:	99 f1       	breq	.+102    	; 0x1f2e <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    1ec8:	02 80       	ldd	r0, Z+2	; 0x02
    1eca:	f3 81       	ldd	r31, Z+3	; 0x03
    1ecc:	e0 2d       	mov	r30, r0
    1ece:	09 95       	icall

    if (debug_keyboard) {
    1ed0:	80 91 ba 01 	lds	r24, 0x01BA
    1ed4:	82 ff       	sbrs	r24, 2
    1ed6:	2b c0       	rjmp	.+86     	; 0x1f2e <host_keyboard_send+0x7e>
        dprint("keyboard: ");
    1ed8:	80 ff       	sbrs	r24, 0
    1eda:	04 c0       	rjmp	.+8      	; 0x1ee4 <host_keyboard_send+0x34>
    1edc:	8e e6       	ldi	r24, 0x6E	; 110
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    1ee4:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1ee6:	88 e0       	ldi	r24, 0x08	; 8
    1ee8:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1eea:	08 e6       	ldi	r16, 0x68	; 104
    1eec:	13 e0       	ldi	r17, 0x03	; 3
    1eee:	80 91 ba 01 	lds	r24, 0x01BA
    1ef2:	80 ff       	sbrs	r24, 0
    1ef4:	0b c0       	rjmp	.+22     	; 0x1f0c <host_keyboard_send+0x5c>
    1ef6:	88 81       	ld	r24, Y
    1ef8:	1f 92       	push	r1
    1efa:	8f 93       	push	r24
    1efc:	1f 93       	push	r17
    1efe:	0f 93       	push	r16
    1f00:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	fa 94       	dec	r15
    1f0e:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1f10:	f1 10       	cpse	r15, r1
    1f12:	ed cf       	rjmp	.-38     	; 0x1eee <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1f14:	80 91 ba 01 	lds	r24, 0x01BA
    1f18:	80 ff       	sbrs	r24, 0
    1f1a:	09 c0       	rjmp	.+18     	; 0x1f2e <host_keyboard_send+0x7e>
    1f1c:	86 e6       	ldi	r24, 0x66	; 102
    1f1e:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1f2a:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <xputs>
    }
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	08 95       	ret

00001f3a <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    1f3a:	e0 91 60 01 	lds	r30, 0x0160
    1f3e:	f0 91 61 01 	lds	r31, 0x0161
    1f42:	30 97       	sbiw	r30, 0x00	; 0
    1f44:	21 f0       	breq	.+8      	; 0x1f4e <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    1f46:	04 80       	ldd	r0, Z+4	; 0x04
    1f48:	f5 81       	ldd	r31, Z+5	; 0x05
    1f4a:	e0 2d       	mov	r30, r0
    1f4c:	09 94       	ijmp
    1f4e:	08 95       	ret

00001f50 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    1f56:	80 91 5e 01 	lds	r24, 0x015E
    1f5a:	90 91 5f 01 	lds	r25, 0x015F
    1f5e:	c8 17       	cp	r28, r24
    1f60:	d9 07       	cpc	r29, r25
    1f62:	09 f1       	breq	.+66     	; 0x1fa6 <host_system_send+0x56>
    last_system_report = report;
    1f64:	d0 93 5f 01 	sts	0x015F, r29
    1f68:	c0 93 5e 01 	sts	0x015E, r28

    if (!driver) return;
    1f6c:	e0 91 60 01 	lds	r30, 0x0160
    1f70:	f0 91 61 01 	lds	r31, 0x0161
    1f74:	30 97       	sbiw	r30, 0x00	; 0
    1f76:	b9 f0       	breq	.+46     	; 0x1fa6 <host_system_send+0x56>
    (*driver->send_system)(report);
    1f78:	06 80       	ldd	r0, Z+6	; 0x06
    1f7a:	f7 81       	ldd	r31, Z+7	; 0x07
    1f7c:	e0 2d       	mov	r30, r0
    1f7e:	ce 01       	movw	r24, r28
    1f80:	09 95       	icall

    if (debug_keyboard) {
    1f82:	80 91 ba 01 	lds	r24, 0x01BA
    1f86:	82 ff       	sbrs	r24, 2
    1f88:	0e c0       	rjmp	.+28     	; 0x1fa6 <host_system_send+0x56>
        dprintf("system: %04X\n", report);
    1f8a:	80 ff       	sbrs	r24, 0
    1f8c:	0c c0       	rjmp	.+24     	; 0x1fa6 <host_system_send+0x56>
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	88 e5       	ldi	r24, 0x58	; 88
    1f94:	93 e0       	ldi	r25, 0x03	; 3
    1f96:	9f 93       	push	r25
    1f98:	8f 93       	push	r24
    1f9a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    }
}
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	08 95       	ret

00001fac <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    1fb2:	80 91 5c 01 	lds	r24, 0x015C
    1fb6:	90 91 5d 01 	lds	r25, 0x015D
    1fba:	c8 17       	cp	r28, r24
    1fbc:	d9 07       	cpc	r29, r25
    1fbe:	09 f1       	breq	.+66     	; 0x2002 <host_consumer_send+0x56>
    last_consumer_report = report;
    1fc0:	d0 93 5d 01 	sts	0x015D, r29
    1fc4:	c0 93 5c 01 	sts	0x015C, r28

    if (!driver) return;
    1fc8:	e0 91 60 01 	lds	r30, 0x0160
    1fcc:	f0 91 61 01 	lds	r31, 0x0161
    1fd0:	30 97       	sbiw	r30, 0x00	; 0
    1fd2:	b9 f0       	breq	.+46     	; 0x2002 <host_consumer_send+0x56>
    (*driver->send_consumer)(report);
    1fd4:	00 84       	ldd	r0, Z+8	; 0x08
    1fd6:	f1 85       	ldd	r31, Z+9	; 0x09
    1fd8:	e0 2d       	mov	r30, r0
    1fda:	ce 01       	movw	r24, r28
    1fdc:	09 95       	icall

    if (debug_keyboard) {
    1fde:	80 91 ba 01 	lds	r24, 0x01BA
    1fe2:	82 ff       	sbrs	r24, 2
    1fe4:	0e c0       	rjmp	.+28     	; 0x2002 <host_consumer_send+0x56>
        dprintf("consumer: %04X\n", report);
    1fe6:	80 ff       	sbrs	r24, 0
    1fe8:	0c c0       	rjmp	.+24     	; 0x2002 <host_consumer_send+0x56>
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	88 e4       	ldi	r24, 0x48	; 72
    1ff0:	93 e0       	ldi	r25, 0x03	; 3
    1ff2:	9f 93       	push	r25
    1ff4:	8f 93       	push	r24
    1ff6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    }
}
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	08 95       	ret

00002008 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    2008:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <matrix_setup>

0000200c <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    200c:	0e 94 a0 1c 	call	0x3940	; 0x3940 <timer_init>
    matrix_init();
    2010:	0e 94 89 06 	call	0xd12	; 0xd12 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2014:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <bootmagic>

00002018 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2018:	5f 92       	push	r5
    201a:	6f 92       	push	r6
    201c:	7f 92       	push	r7
    201e:	8f 92       	push	r8
    2020:	9f 92       	push	r9
    2022:	af 92       	push	r10
    2024:	bf 92       	push	r11
    2026:	cf 92       	push	r12
    2028:	df 92       	push	r13
    202a:	ef 92       	push	r14
    202c:	ff 92       	push	r15
    202e:	0f 93       	push	r16
    2030:	1f 93       	push	r17
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	00 d0       	rcall	.+0      	; 0x2038 <keyboard_task+0x20>
    2038:	00 d0       	rcall	.+0      	; 0x203a <keyboard_task+0x22>
    203a:	1f 92       	push	r1
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2040:	0e 94 a3 06 	call	0xd46	; 0xd46 <matrix_scan>
    2044:	93 e6       	ldi	r25, 0x63	; 99
    2046:	c9 2e       	mov	r12, r25
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	d9 2e       	mov	r13, r25
    204c:	00 e0       	ldi	r16, 0x00	; 0
    204e:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2050:	aa 24       	eor	r10, r10
    2052:	a3 94       	inc	r10
    2054:	b1 2c       	mov	r11, r1
    2056:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2058:	80 2f       	mov	r24, r16
    205a:	0e 94 ac 07 	call	0xf58	; 0xf58 <matrix_get_row>
    205e:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2060:	f6 01       	movw	r30, r12
    2062:	e1 90       	ld	r14, Z+
    2064:	f1 90       	ld	r15, Z+
    2066:	6f 01       	movw	r12, r30
    2068:	e8 26       	eor	r14, r24
    206a:	f9 26       	eor	r15, r25
        if (matrix_change) {
    206c:	e1 14       	cp	r14, r1
    206e:	f1 04       	cpc	r15, r1
    2070:	b1 f4       	brne	.+44     	; 0x209e <keyboard_task+0x86>
    2072:	0f 5f       	subi	r16, 0xFF	; 255
    2074:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2076:	06 30       	cpi	r16, 0x06	; 6
    2078:	11 05       	cpc	r17, r1
    207a:	69 f7       	brne	.-38     	; 0x2056 <keyboard_task+0x3e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    207c:	8f ef       	ldi	r24, 0xFF	; 255
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	8a 83       	std	Y+2, r24	; 0x02
    2082:	1b 82       	std	Y+3, r1	; 0x03
    2084:	0e 94 a9 1c 	call	0x3952	; 0x3952 <timer_read>
    2088:	81 60       	ori	r24, 0x01	; 1
    208a:	78 2f       	mov	r23, r24
    208c:	9d 83       	std	Y+5, r25	; 0x05
    208e:	8c 83       	std	Y+4, r24	; 0x04
    2090:	49 81       	ldd	r20, Y+1	; 0x01
    2092:	5a 81       	ldd	r21, Y+2	; 0x02
    2094:	6b 81       	ldd	r22, Y+3	; 0x03
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	0e 94 17 11 	call	0x222e	; 0x222e <action_exec>
    209c:	41 c0       	rjmp	.+130    	; 0x2120 <__stack+0x21>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    209e:	80 91 ba 01 	lds	r24, 0x01BA
    20a2:	81 fd       	sbrc	r24, 1
    20a4:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    20ac:	45 01       	movw	r8, r10
    20ae:	02 2e       	mov	r0, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <keyboard_task+0x9e>
    20b2:	88 0c       	add	r8, r8
    20b4:	99 1c       	adc	r9, r9
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <keyboard_task+0x9a>
    20ba:	c4 01       	movw	r24, r8
    20bc:	8e 21       	and	r24, r14
    20be:	9f 21       	and	r25, r15
    20c0:	89 2b       	or	r24, r25
    20c2:	41 f1       	breq	.+80     	; 0x2114 <__stack+0x15>
                    keyevent_t e = (keyevent_t){
    20c4:	29 83       	std	Y+1, r18	; 0x01
    20c6:	5a 82       	std	Y+2, r5	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    20c8:	68 20       	and	r6, r8
    20ca:	79 20       	and	r7, r9
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	67 28       	or	r6, r7
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <keyboard_task+0xbc>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    20d4:	8b 83       	std	Y+3, r24	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    20d6:	0e 94 a9 1c 	call	0x3952	; 0x3952 <timer_read>
    20da:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    20dc:	78 2f       	mov	r23, r24
    20de:	9d 83       	std	Y+5, r25	; 0x05
    20e0:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    20e2:	49 81       	ldd	r20, Y+1	; 0x01
    20e4:	5a 81       	ldd	r21, Y+2	; 0x02
    20e6:	6b 81       	ldd	r22, Y+3	; 0x03
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	0e 94 17 11 	call	0x222e	; 0x222e <action_exec>
                    hook_matrix_change(e);
    20ee:	49 81       	ldd	r20, Y+1	; 0x01
    20f0:	5a 81       	ldd	r21, Y+2	; 0x02
    20f2:	6b 81       	ldd	r22, Y+3	; 0x03
    20f4:	7c 81       	ldd	r23, Y+4	; 0x04
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	0e 94 24 1c 	call	0x3848	; 0x3848 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    20fc:	f8 01       	movw	r30, r16
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	ed 59       	subi	r30, 0x9D	; 157
    2104:	fe 4f       	sbci	r31, 0xFE	; 254
    2106:	80 81       	ld	r24, Z
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	88 25       	eor	r24, r8
    210c:	99 25       	eor	r25, r9
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	06 c0       	rjmp	.+12     	; 0x2120 <__stack+0x21>
    2114:	2f 5f       	subi	r18, 0xFF	; 255
    2116:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2118:	2e 30       	cpi	r18, 0x0E	; 14
    211a:	31 05       	cpc	r19, r1
    211c:	39 f6       	brne	.-114    	; 0x20ac <keyboard_task+0x94>
    211e:	a9 cf       	rjmp	.-174    	; 0x2072 <keyboard_task+0x5a>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    2120:	0e 94 23 1c 	call	0x3846	; 0x3846 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2124:	0e 94 2f 22 	call	0x445e	; 0x445e <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2128:	10 91 62 01 	lds	r17, 0x0162
    212c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <host_keyboard_leds>
    2130:	18 17       	cp	r17, r24
    2132:	71 f1       	breq	.+92     	; 0x2190 <__stack+0x91>
        led_status = host_keyboard_leds();
    2134:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <host_keyboard_leds>
    2138:	80 93 62 01 	sts	0x0162, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    213c:	90 91 ba 01 	lds	r25, 0x01BA
    2140:	92 ff       	sbrs	r25, 2
    2142:	0e c0       	rjmp	.+28     	; 0x2160 <__stack+0x61>
    2144:	90 ff       	sbrs	r25, 0
    2146:	0c c0       	rjmp	.+24     	; 0x2160 <__stack+0x61>
    2148:	1f 92       	push	r1
    214a:	8f 93       	push	r24
    214c:	89 e7       	ldi	r24, 0x79	; 121
    214e:	93 e0       	ldi	r25, 0x03	; 3
    2150:	9f 93       	push	r25
    2152:	8f 93       	push	r24
    2154:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2160:	80 91 62 01 	lds	r24, 0x0162
    }
}
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	1f 91       	pop	r17
    2174:	0f 91       	pop	r16
    2176:	ff 90       	pop	r15
    2178:	ef 90       	pop	r14
    217a:	df 90       	pop	r13
    217c:	cf 90       	pop	r12
    217e:	bf 90       	pop	r11
    2180:	af 90       	pop	r10
    2182:	9f 90       	pop	r9
    2184:	8f 90       	pop	r8
    2186:	7f 90       	pop	r7
    2188:	6f 90       	pop	r6
    218a:	5f 90       	pop	r5

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    218c:	0c 94 35 1c 	jmp	0x386a	; 0x386a <hook_keyboard_leds_change>
    }
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	bf 90       	pop	r11
    21ac:	af 90       	pop	r10
    21ae:	9f 90       	pop	r9
    21b0:	8f 90       	pop	r8
    21b2:	7f 90       	pop	r7
    21b4:	6f 90       	pop	r6
    21b6:	5f 90       	pop	r5
    21b8:	08 95       	ret

000021ba <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    21ba:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <led_set>

000021be <matrix_clear>:
    return MATRIX_COLS;
}

__attribute__ ((weak))
void matrix_clear(void)
{
    21be:	08 95       	ret

000021c0 <matrix_setup>:
}

__attribute__ ((weak))
void matrix_setup(void) {}
    21c0:	08 95       	ret

000021c2 <matrix_print>:
    return (matrix_get_row(row) & (1<<col));
}

__attribute__ ((weak))
void matrix_print(void)
{
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
#elif (MATRIX_COLS <= 16)
    print("r/c 0123456789ABCDEF\n");
    21ce:	83 e9       	ldi	r24, 0x93	; 147
    21d0:	93 e0       	ldi	r25, 0x03	; 3
    21d2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    21d6:	c0 e0       	ldi	r28, 0x00	; 0
    21d8:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
#elif (MATRIX_COLS <= 16)
        xprintf("%02X: %016b%s\n", row, bitrev16(matrix_get_row(row)),
    21da:	88 e2       	ldi	r24, 0x28	; 40
    21dc:	e8 2e       	mov	r14, r24
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	f8 2e       	mov	r15, r24
    21e2:	04 e8       	ldi	r16, 0x84	; 132
    21e4:	13 e0       	ldi	r17, 0x03	; 3
    21e6:	8c 2f       	mov	r24, r28
    21e8:	0e 94 ac 07 	call	0xf58	; 0xf58 <matrix_get_row>
    21ec:	0e 94 09 1c 	call	0x3812	; 0x3812 <bitrev16>
    21f0:	ff 92       	push	r15
    21f2:	ef 92       	push	r14
    21f4:	9f 93       	push	r25
    21f6:	8f 93       	push	r24
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	1f 93       	push	r17
    21fe:	0f 93       	push	r16
    2200:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    2204:	21 96       	adiw	r28, 0x01	; 1
    print("r/c 0123456789ABCDEF\n");
#elif (MATRIX_COLS <= 32)
    print("r/c 0123456789ABCDEF0123456789ABCDEF\n");
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    2206:	8d b7       	in	r24, 0x3d	; 61
    2208:	9e b7       	in	r25, 0x3e	; 62
    220a:	08 96       	adiw	r24, 0x08	; 8
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	9e bf       	out	0x3e, r25	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	8d bf       	out	0x3d, r24	; 61
    2216:	c6 30       	cpi	r28, 0x06	; 6
    2218:	d1 05       	cpc	r29, r1
    221a:	29 f7       	brne	.-54     	; 0x21e6 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	ff 90       	pop	r15
    2226:	ef 90       	pop	r14
    2228:	08 95       	ret

0000222a <matrix_power_up>:
    }
    return false;
}
#endif

__attribute__ ((weak)) void matrix_power_up(void) {}
    222a:	08 95       	ret

0000222c <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    222c:	08 95       	ret

0000222e <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	2b 97       	sbiw	r28, 0x0b	; 11
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	4f 83       	std	Y+7, r20	; 0x07
    2244:	58 87       	std	Y+8, r21	; 0x08
    2246:	69 87       	std	Y+9, r22	; 0x09
    2248:	7a 87       	std	Y+10, r23	; 0x0a
    224a:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    224c:	8a 85       	ldd	r24, Y+10	; 0x0a
    224e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2250:	89 2b       	or	r24, r25
    2252:	31 f0       	breq	.+12     	; 0x2260 <action_exec+0x32>
    2254:	5f 3f       	cpi	r21, 0xFF	; 255
    2256:	11 f0       	breq	.+4      	; 0x225c <action_exec+0x2e>
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <action_exec+0x34>
    225c:	4f 3f       	cpi	r20, 0xFF	; 255
    225e:	e1 f7       	brne	.-8      	; 0x2258 <action_exec+0x2a>
    2260:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    2262:	81 11       	cpse	r24, r1
    2264:	07 c0       	rjmp	.+14     	; 0x2274 <action_exec+0x46>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2266:	4f 81       	ldd	r20, Y+7	; 0x07
    2268:	58 85       	ldd	r21, Y+8	; 0x08
    226a:	69 85       	ldd	r22, Y+9	; 0x09
    226c:	7a 85       	ldd	r23, Y+10	; 0x0a
    226e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2270:	0e 94 24 1c 	call	0x3848	; 0x3848 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    2274:	de 01       	movw	r26, r28
    2276:	11 96       	adiw	r26, 0x01	; 1
    2278:	86 e0       	ldi	r24, 0x06	; 6
    227a:	fd 01       	movw	r30, r26
    227c:	11 92       	st	Z+, r1
    227e:	8a 95       	dec	r24
    2280:	e9 f7       	brne	.-6      	; 0x227c <action_exec+0x4e>
    2282:	85 e0       	ldi	r24, 0x05	; 5
    2284:	fe 01       	movw	r30, r28
    2286:	37 96       	adiw	r30, 0x07	; 7
    2288:	01 90       	ld	r0, Z+
    228a:	0d 92       	st	X+, r0
    228c:	8a 95       	dec	r24
    228e:	e1 f7       	brne	.-8      	; 0x2288 <action_exec+0x5a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2290:	49 81       	ldd	r20, Y+1	; 0x01
    2292:	5a 81       	ldd	r21, Y+2	; 0x02
    2294:	6b 81       	ldd	r22, Y+3	; 0x03
    2296:	7c 81       	ldd	r23, Y+4	; 0x04
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	9e 81       	ldd	r25, Y+6	; 0x06
    229c:	0e 94 ce 18 	call	0x319c	; 0x319c <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    22a0:	2b 96       	adiw	r28, 0x0b	; 11
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	08 95       	ret

000022b2 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    22b2:	cf 93       	push	r28
    22b4:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    22b6:	88 23       	and	r24, r24
    22b8:	09 f4       	brne	.+2      	; 0x22bc <register_code+0xa>
    22ba:	e7 c0       	rjmp	.+462    	; 0x248a <register_code+0x1d8>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    22bc:	82 38       	cpi	r24, 0x82	; 130
    22be:	a1 f4       	brne	.+40     	; 0x22e8 <register_code+0x36>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    22c0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <host_keyboard_leds>
    22c4:	81 fd       	sbrc	r24, 1
    22c6:	e1 c0       	rjmp	.+450    	; 0x248a <register_code+0x1d8>
#endif
        add_key(KC_CAPSLOCK);
    22c8:	89 e3       	ldi	r24, 0x39	; 57
    22ca:	0e 94 4b 1b 	call	0x3696	; 0x3696 <add_key>
        send_keyboard_report();
    22ce:	0e 94 cc 1b 	call	0x3798	; 0x3798 <send_keyboard_report>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22d2:	2f ef       	ldi	r18, 0xFF	; 255
    22d4:	81 ee       	ldi	r24, 0xE1	; 225
    22d6:	94 e0       	ldi	r25, 0x04	; 4
    22d8:	21 50       	subi	r18, 0x01	; 1
    22da:	80 40       	sbci	r24, 0x00	; 0
    22dc:	90 40       	sbci	r25, 0x00	; 0
    22de:	e1 f7       	brne	.-8      	; 0x22d8 <register_code+0x26>
    22e0:	00 c0       	rjmp	.+0      	; 0x22e2 <register_code+0x30>
    22e2:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    22e4:	89 e3       	ldi	r24, 0x39	; 57
    22e6:	15 c0       	rjmp	.+42     	; 0x2312 <register_code+0x60>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    22e8:	83 38       	cpi	r24, 0x83	; 131
    22ea:	c1 f4       	brne	.+48     	; 0x231c <register_code+0x6a>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    22ec:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <host_keyboard_leds>
    22f0:	80 fd       	sbrc	r24, 0
    22f2:	cb c0       	rjmp	.+406    	; 0x248a <register_code+0x1d8>
#endif
        add_key(KC_NUMLOCK);
    22f4:	83 e5       	ldi	r24, 0x53	; 83
    22f6:	0e 94 4b 1b 	call	0x3696	; 0x3696 <add_key>
        send_keyboard_report();
    22fa:	0e 94 cc 1b 	call	0x3798	; 0x3798 <send_keyboard_report>
    22fe:	2f ef       	ldi	r18, 0xFF	; 255
    2300:	81 ee       	ldi	r24, 0xE1	; 225
    2302:	94 e0       	ldi	r25, 0x04	; 4
    2304:	21 50       	subi	r18, 0x01	; 1
    2306:	80 40       	sbci	r24, 0x00	; 0
    2308:	90 40       	sbci	r25, 0x00	; 0
    230a:	e1 f7       	brne	.-8      	; 0x2304 <register_code+0x52>
    230c:	00 c0       	rjmp	.+0      	; 0x230e <register_code+0x5c>
    230e:	00 00       	nop
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2310:	83 e5       	ldi	r24, 0x53	; 83
    2312:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2316:	cf 91       	pop	r28
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2318:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    231c:	84 38       	cpi	r24, 0x84	; 132
    231e:	a1 f4       	brne	.+40     	; 0x2348 <register_code+0x96>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2320:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <host_keyboard_leds>
    2324:	82 fd       	sbrc	r24, 2
    2326:	b1 c0       	rjmp	.+354    	; 0x248a <register_code+0x1d8>
#endif
        add_key(KC_SCROLLLOCK);
    2328:	87 e4       	ldi	r24, 0x47	; 71
    232a:	0e 94 4b 1b 	call	0x3696	; 0x3696 <add_key>
        send_keyboard_report();
    232e:	0e 94 cc 1b 	call	0x3798	; 0x3798 <send_keyboard_report>
    2332:	2f ef       	ldi	r18, 0xFF	; 255
    2334:	81 ee       	ldi	r24, 0xE1	; 225
    2336:	94 e0       	ldi	r25, 0x04	; 4
    2338:	21 50       	subi	r18, 0x01	; 1
    233a:	80 40       	sbci	r24, 0x00	; 0
    233c:	90 40       	sbci	r25, 0x00	; 0
    233e:	e1 f7       	brne	.-8      	; 0x2338 <register_code+0x86>
    2340:	00 c0       	rjmp	.+0      	; 0x2342 <register_code+0x90>
    2342:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    2344:	87 e4       	ldi	r24, 0x47	; 71
    2346:	e5 cf       	rjmp	.-54     	; 0x2312 <register_code+0x60>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2348:	8c ef       	ldi	r24, 0xFC	; 252
    234a:	8c 0f       	add	r24, r28
    234c:	81 3a       	cpi	r24, 0xA1	; 161
    234e:	48 f4       	brcc	.+18     	; 0x2362 <register_code+0xb0>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2350:	8c 2f       	mov	r24, r28
    2352:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <command_proc>
    2356:	81 11       	cpse	r24, r1
    2358:	98 c0       	rjmp	.+304    	; 0x248a <register_code+0x1d8>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    235a:	8c 2f       	mov	r24, r28
    235c:	0e 94 4b 1b 	call	0x3696	; 0x3696 <add_key>
    2360:	da cf       	rjmp	.-76     	; 0x2316 <register_code+0x64>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2362:	80 e2       	ldi	r24, 0x20	; 32
    2364:	8c 0f       	add	r24, r28
    2366:	88 30       	cpi	r24, 0x08	; 8
    2368:	48 f4       	brcc	.+18     	; 0x237c <register_code+0xca>
        add_mods(MOD_BIT(code));
    236a:	c7 70       	andi	r28, 0x07	; 7
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <register_code+0xc0>
    2370:	88 0f       	add	r24, r24
    2372:	ca 95       	dec	r28
    2374:	ea f7       	brpl	.-6      	; 0x2370 <register_code+0xbe>
    2376:	0e 94 90 1b 	call	0x3720	; 0x3720 <add_mods>
    237a:	cd cf       	rjmp	.-102    	; 0x2316 <register_code+0x64>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    237c:	8b e5       	ldi	r24, 0x5B	; 91
    237e:	8c 0f       	add	r24, r28
    2380:	83 30       	cpi	r24, 0x03	; 3
    2382:	78 f4       	brcc	.+30     	; 0x23a2 <register_code+0xf0>
        host_system_send(KEYCODE2SYSTEM(code));
    2384:	c5 3a       	cpi	r28, 0xA5	; 165
    2386:	29 f0       	breq	.+10     	; 0x2392 <register_code+0xe0>
    2388:	c6 3a       	cpi	r28, 0xA6	; 166
    238a:	31 f4       	brne	.+12     	; 0x2398 <register_code+0xe6>
    238c:	82 e8       	ldi	r24, 0x82	; 130
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	05 c0       	rjmp	.+10     	; 0x239c <register_code+0xea>
    2392:	81 e8       	ldi	r24, 0x81	; 129
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	02 c0       	rjmp	.+4      	; 0x239c <register_code+0xea>
    2398:	83 e8       	ldi	r24, 0x83	; 131
    239a:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    239c:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    239e:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    23a2:	88 e5       	ldi	r24, 0x58	; 88
    23a4:	8c 0f       	add	r24, r28
    23a6:	85 31       	cpi	r24, 0x15	; 21
    23a8:	08 f0       	brcs	.+2      	; 0x23ac <register_code+0xfa>
    23aa:	6f c0       	rjmp	.+222    	; 0x248a <register_code+0x1d8>
        host_consumer_send(KEYCODE2CONSUMER(code));
    23ac:	c8 3a       	cpi	r28, 0xA8	; 168
    23ae:	61 f1       	breq	.+88     	; 0x2408 <register_code+0x156>
    23b0:	c9 3a       	cpi	r28, 0xA9	; 169
    23b2:	69 f1       	breq	.+90     	; 0x240e <register_code+0x15c>
    23b4:	ca 3a       	cpi	r28, 0xAA	; 170
    23b6:	71 f1       	breq	.+92     	; 0x2414 <register_code+0x162>
    23b8:	cb 3a       	cpi	r28, 0xAB	; 171
    23ba:	79 f1       	breq	.+94     	; 0x241a <register_code+0x168>
    23bc:	cc 3a       	cpi	r28, 0xAC	; 172
    23be:	81 f1       	breq	.+96     	; 0x2420 <register_code+0x16e>
    23c0:	cd 3a       	cpi	r28, 0xAD	; 173
    23c2:	89 f1       	breq	.+98     	; 0x2426 <register_code+0x174>
    23c4:	ce 3a       	cpi	r28, 0xAE	; 174
    23c6:	91 f1       	breq	.+100    	; 0x242c <register_code+0x17a>
    23c8:	cf 3a       	cpi	r28, 0xAF	; 175
    23ca:	99 f1       	breq	.+102    	; 0x2432 <register_code+0x180>
    23cc:	c1 3b       	cpi	r28, 0xB1	; 177
    23ce:	a1 f1       	breq	.+104    	; 0x2438 <register_code+0x186>
    23d0:	c0 3b       	cpi	r28, 0xB0	; 176
    23d2:	a9 f1       	breq	.+106    	; 0x243e <register_code+0x18c>
    23d4:	c2 3b       	cpi	r28, 0xB2	; 178
    23d6:	b1 f1       	breq	.+108    	; 0x2444 <register_code+0x192>
    23d8:	c3 3b       	cpi	r28, 0xB3	; 179
    23da:	b9 f1       	breq	.+110    	; 0x244a <register_code+0x198>
    23dc:	c4 3b       	cpi	r28, 0xB4	; 180
    23de:	c1 f1       	breq	.+112    	; 0x2450 <register_code+0x19e>
    23e0:	c5 3b       	cpi	r28, 0xB5	; 181
    23e2:	c9 f1       	breq	.+114    	; 0x2456 <register_code+0x1a4>
    23e4:	c6 3b       	cpi	r28, 0xB6	; 182
    23e6:	d1 f1       	breq	.+116    	; 0x245c <register_code+0x1aa>
    23e8:	c7 3b       	cpi	r28, 0xB7	; 183
    23ea:	d9 f1       	breq	.+118    	; 0x2462 <register_code+0x1b0>
    23ec:	c8 3b       	cpi	r28, 0xB8	; 184
    23ee:	e1 f1       	breq	.+120    	; 0x2468 <register_code+0x1b6>
    23f0:	c9 3b       	cpi	r28, 0xB9	; 185
    23f2:	e9 f1       	breq	.+122    	; 0x246e <register_code+0x1bc>
    23f4:	ca 3b       	cpi	r28, 0xBA	; 186
    23f6:	f1 f1       	breq	.+124    	; 0x2474 <register_code+0x1c2>
    23f8:	cb 3b       	cpi	r28, 0xBB	; 187
    23fa:	f9 f1       	breq	.+126    	; 0x247a <register_code+0x1c8>
    23fc:	cc 3b       	cpi	r28, 0xBC	; 188
    23fe:	09 f0       	breq	.+2      	; 0x2402 <register_code+0x150>
    2400:	3f c0       	rjmp	.+126    	; 0x2480 <register_code+0x1ce>
    2402:	8a e2       	ldi	r24, 0x2A	; 42
    2404:	92 e0       	ldi	r25, 0x02	; 2
    2406:	3e c0       	rjmp	.+124    	; 0x2484 <register_code+0x1d2>
    2408:	82 ee       	ldi	r24, 0xE2	; 226
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	3b c0       	rjmp	.+118    	; 0x2484 <register_code+0x1d2>
    240e:	89 ee       	ldi	r24, 0xE9	; 233
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	38 c0       	rjmp	.+112    	; 0x2484 <register_code+0x1d2>
    2414:	8a ee       	ldi	r24, 0xEA	; 234
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	35 c0       	rjmp	.+106    	; 0x2484 <register_code+0x1d2>
    241a:	85 eb       	ldi	r24, 0xB5	; 181
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	32 c0       	rjmp	.+100    	; 0x2484 <register_code+0x1d2>
    2420:	86 eb       	ldi	r24, 0xB6	; 182
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	2f c0       	rjmp	.+94     	; 0x2484 <register_code+0x1d2>
    2426:	83 eb       	ldi	r24, 0xB3	; 179
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	2c c0       	rjmp	.+88     	; 0x2484 <register_code+0x1d2>
    242c:	84 eb       	ldi	r24, 0xB4	; 180
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	29 c0       	rjmp	.+82     	; 0x2484 <register_code+0x1d2>
    2432:	87 eb       	ldi	r24, 0xB7	; 183
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	26 c0       	rjmp	.+76     	; 0x2484 <register_code+0x1d2>
    2438:	8c ec       	ldi	r24, 0xCC	; 204
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	23 c0       	rjmp	.+70     	; 0x2484 <register_code+0x1d2>
    243e:	8d ec       	ldi	r24, 0xCD	; 205
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	20 c0       	rjmp	.+64     	; 0x2484 <register_code+0x1d2>
    2444:	83 e8       	ldi	r24, 0x83	; 131
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	1d c0       	rjmp	.+58     	; 0x2484 <register_code+0x1d2>
    244a:	8a e8       	ldi	r24, 0x8A	; 138
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	1a c0       	rjmp	.+52     	; 0x2484 <register_code+0x1d2>
    2450:	82 e9       	ldi	r24, 0x92	; 146
    2452:	91 e0       	ldi	r25, 0x01	; 1
    2454:	17 c0       	rjmp	.+46     	; 0x2484 <register_code+0x1d2>
    2456:	84 e9       	ldi	r24, 0x94	; 148
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <register_code+0x1d2>
    245c:	81 e2       	ldi	r24, 0x21	; 33
    245e:	92 e0       	ldi	r25, 0x02	; 2
    2460:	11 c0       	rjmp	.+34     	; 0x2484 <register_code+0x1d2>
    2462:	83 e2       	ldi	r24, 0x23	; 35
    2464:	92 e0       	ldi	r25, 0x02	; 2
    2466:	0e c0       	rjmp	.+28     	; 0x2484 <register_code+0x1d2>
    2468:	84 e2       	ldi	r24, 0x24	; 36
    246a:	92 e0       	ldi	r25, 0x02	; 2
    246c:	0b c0       	rjmp	.+22     	; 0x2484 <register_code+0x1d2>
    246e:	85 e2       	ldi	r24, 0x25	; 37
    2470:	92 e0       	ldi	r25, 0x02	; 2
    2472:	08 c0       	rjmp	.+16     	; 0x2484 <register_code+0x1d2>
    2474:	86 e2       	ldi	r24, 0x26	; 38
    2476:	92 e0       	ldi	r25, 0x02	; 2
    2478:	05 c0       	rjmp	.+10     	; 0x2484 <register_code+0x1d2>
    247a:	87 e2       	ldi	r24, 0x27	; 39
    247c:	92 e0       	ldi	r25, 0x02	; 2
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <register_code+0x1d2>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2484:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2486:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <host_consumer_send>
    }
}
    248a:	cf 91       	pop	r28
    248c:	08 95       	ret

0000248e <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    248e:	88 23       	and	r24, r24
    2490:	09 f4       	brne	.+2      	; 0x2494 <unregister_code+0x6>
    2492:	66 c0       	rjmp	.+204    	; 0x2560 <unregister_code+0xd2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2494:	82 38       	cpi	r24, 0x82	; 130
    2496:	a1 f4       	brne	.+40     	; 0x24c0 <unregister_code+0x32>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2498:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <host_keyboard_leds>
    249c:	81 ff       	sbrs	r24, 1
    249e:	60 c0       	rjmp	.+192    	; 0x2560 <unregister_code+0xd2>
#endif
        add_key(KC_CAPSLOCK);
    24a0:	89 e3       	ldi	r24, 0x39	; 57
    24a2:	0e 94 4b 1b 	call	0x3696	; 0x3696 <add_key>
        send_keyboard_report();
    24a6:	0e 94 cc 1b 	call	0x3798	; 0x3798 <send_keyboard_report>
    24aa:	2f ef       	ldi	r18, 0xFF	; 255
    24ac:	81 ee       	ldi	r24, 0xE1	; 225
    24ae:	94 e0       	ldi	r25, 0x04	; 4
    24b0:	21 50       	subi	r18, 0x01	; 1
    24b2:	80 40       	sbci	r24, 0x00	; 0
    24b4:	90 40       	sbci	r25, 0x00	; 0
    24b6:	e1 f7       	brne	.-8      	; 0x24b0 <unregister_code+0x22>
    24b8:	00 c0       	rjmp	.+0      	; 0x24ba <unregister_code+0x2c>
    24ba:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    24bc:	89 e3       	ldi	r24, 0x39	; 57
    24be:	15 c0       	rjmp	.+42     	; 0x24ea <unregister_code+0x5c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    24c0:	83 38       	cpi	r24, 0x83	; 131
    24c2:	b9 f4       	brne	.+46     	; 0x24f2 <unregister_code+0x64>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    24c4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <host_keyboard_leds>
    24c8:	80 ff       	sbrs	r24, 0
    24ca:	4a c0       	rjmp	.+148    	; 0x2560 <unregister_code+0xd2>
#endif
        add_key(KC_NUMLOCK);
    24cc:	83 e5       	ldi	r24, 0x53	; 83
    24ce:	0e 94 4b 1b 	call	0x3696	; 0x3696 <add_key>
        send_keyboard_report();
    24d2:	0e 94 cc 1b 	call	0x3798	; 0x3798 <send_keyboard_report>
    24d6:	2f ef       	ldi	r18, 0xFF	; 255
    24d8:	81 ee       	ldi	r24, 0xE1	; 225
    24da:	94 e0       	ldi	r25, 0x04	; 4
    24dc:	21 50       	subi	r18, 0x01	; 1
    24de:	80 40       	sbci	r24, 0x00	; 0
    24e0:	90 40       	sbci	r25, 0x00	; 0
    24e2:	e1 f7       	brne	.-8      	; 0x24dc <unregister_code+0x4e>
    24e4:	00 c0       	rjmp	.+0      	; 0x24e6 <unregister_code+0x58>
    24e6:	00 00       	nop
        wait_ms(100);
        del_key(KC_NUMLOCK);
    24e8:	83 e5       	ldi	r24, 0x53	; 83
    24ea:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <del_key>
        send_keyboard_report();
    24ee:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    24f2:	84 38       	cpi	r24, 0x84	; 132
    24f4:	a1 f4       	brne	.+40     	; 0x251e <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    24f6:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <host_keyboard_leds>
    24fa:	82 ff       	sbrs	r24, 2
    24fc:	31 c0       	rjmp	.+98     	; 0x2560 <unregister_code+0xd2>
#endif
        add_key(KC_SCROLLLOCK);
    24fe:	87 e4       	ldi	r24, 0x47	; 71
    2500:	0e 94 4b 1b 	call	0x3696	; 0x3696 <add_key>
        send_keyboard_report();
    2504:	0e 94 cc 1b 	call	0x3798	; 0x3798 <send_keyboard_report>
    2508:	2f ef       	ldi	r18, 0xFF	; 255
    250a:	81 ee       	ldi	r24, 0xE1	; 225
    250c:	94 e0       	ldi	r25, 0x04	; 4
    250e:	21 50       	subi	r18, 0x01	; 1
    2510:	80 40       	sbci	r24, 0x00	; 0
    2512:	90 40       	sbci	r25, 0x00	; 0
    2514:	e1 f7       	brne	.-8      	; 0x250e <unregister_code+0x80>
    2516:	00 c0       	rjmp	.+0      	; 0x2518 <unregister_code+0x8a>
    2518:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    251a:	87 e4       	ldi	r24, 0x47	; 71
    251c:	e6 cf       	rjmp	.-52     	; 0x24ea <unregister_code+0x5c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    251e:	9c ef       	ldi	r25, 0xFC	; 252
    2520:	98 0f       	add	r25, r24
    2522:	91 3a       	cpi	r25, 0xA1	; 161
    2524:	10 f3       	brcs	.-60     	; 0x24ea <unregister_code+0x5c>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2526:	90 e2       	ldi	r25, 0x20	; 32
    2528:	98 0f       	add	r25, r24
    252a:	98 30       	cpi	r25, 0x08	; 8
    252c:	50 f4       	brcc	.+20     	; 0x2542 <unregister_code+0xb4>
        del_mods(MOD_BIT(code));
    252e:	87 70       	andi	r24, 0x07	; 7
    2530:	91 e0       	ldi	r25, 0x01	; 1
    2532:	01 c0       	rjmp	.+2      	; 0x2536 <unregister_code+0xa8>
    2534:	99 0f       	add	r25, r25
    2536:	8a 95       	dec	r24
    2538:	ea f7       	brpl	.-6      	; 0x2534 <unregister_code+0xa6>
    253a:	89 2f       	mov	r24, r25
    253c:	0e 94 96 1b 	call	0x372c	; 0x372c <del_mods>
    2540:	d6 cf       	rjmp	.-84     	; 0x24ee <unregister_code+0x60>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2542:	9b e5       	ldi	r25, 0x5B	; 91
    2544:	98 0f       	add	r25, r24
    2546:	93 30       	cpi	r25, 0x03	; 3
    2548:	20 f4       	brcc	.+8      	; 0x2552 <unregister_code+0xc4>
        host_system_send(0);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2552:	88 5a       	subi	r24, 0xA8	; 168
    2554:	85 31       	cpi	r24, 0x15	; 21
    2556:	20 f4       	brcc	.+8      	; 0x2560 <unregister_code+0xd2>
        host_consumer_send(0);
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <host_consumer_send>
    2560:	08 95       	ret

00002562 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2562:	88 23       	and	r24, r24
    2564:	21 f0       	breq	.+8      	; 0x256e <register_mods+0xc>
        add_mods(mods);
    2566:	0e 94 90 1b 	call	0x3720	; 0x3720 <add_mods>
        send_keyboard_report();
    256a:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <send_keyboard_report>
    256e:	08 95       	ret

00002570 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2570:	88 23       	and	r24, r24
    2572:	21 f0       	breq	.+8      	; 0x257c <unregister_mods+0xc>
        del_mods(mods);
    2574:	0e 94 96 1b 	call	0x372c	; 0x372c <del_mods>
        send_keyboard_report();
    2578:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <send_keyboard_report>
    257c:	08 95       	ret

0000257e <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    257e:	cf 92       	push	r12
    2580:	df 92       	push	r13
    2582:	ef 92       	push	r14
    2584:	ff 92       	push	r15
    2586:	0f 93       	push	r16
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	28 97       	sbiw	r28, 0x08	; 8
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    25a0:	85 e0       	ldi	r24, 0x05	; 5
    25a2:	f8 01       	movw	r30, r16
    25a4:	de 01       	movw	r26, r28
    25a6:	11 96       	adiw	r26, 0x01	; 1
    25a8:	01 90       	ld	r0, Z+
    25aa:	0d 92       	st	X+, r0
    25ac:	8a 95       	dec	r24
    25ae:	e1 f7       	brne	.-8      	; 0x25a8 <process_action+0x2a>
    25b0:	f8 01       	movw	r30, r16
    25b2:	40 81       	ld	r20, Z
    25b4:	31 81       	ldd	r19, Z+1	; 0x01
    25b6:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    25b8:	25 81       	ldd	r18, Z+5	; 0x05
    25ba:	22 95       	swap	r18
    25bc:	2f 70       	andi	r18, 0x0F	; 15
    25be:	83 81       	ldd	r24, Z+3	; 0x03
    25c0:	94 81       	ldd	r25, Z+4	; 0x04
    25c2:	89 2b       	or	r24, r25
    25c4:	31 f0       	breq	.+12     	; 0x25d2 <process_action+0x54>
    25c6:	3f 3f       	cpi	r19, 0xFF	; 255
    25c8:	31 f4       	brne	.+12     	; 0x25d6 <process_action+0x58>
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	4f 3f       	cpi	r20, 0xFF	; 255
    25ce:	19 f4       	brne	.+6      	; 0x25d6 <process_action+0x58>
    25d0:	03 c0       	rjmp	.+6      	; 0x25d8 <process_action+0x5a>
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	01 c0       	rjmp	.+2      	; 0x25d8 <process_action+0x5a>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    25d8:	80 fd       	sbrc	r24, 0
    25da:	e1 c2       	rjmp	.+1474   	; 0x2b9e <process_action+0x620>

    action_t action = layer_switch_get_action(event.key);
    25dc:	49 83       	std	Y+1, r20	; 0x01
    25de:	3a 83       	std	Y+2, r19	; 0x02
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	2f 83       	std	Y+7, r18	; 0x07
    25e6:	0e 94 09 1b 	call	0x3612	; 0x3612 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	88 87       	std	Y+8, r24	; 0x08
    25ee:	0e 94 08 1b 	call	0x3610	; 0x3610 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    25f2:	0e 94 30 1a 	call	0x3460	; 0x3460 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    25f6:	4e 81       	ldd	r20, Y+6	; 0x06
    25f8:	e4 2f       	mov	r30, r20
    25fa:	e2 95       	swap	r30
    25fc:	ef 70       	andi	r30, 0x0F	; 15
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	ea 5a       	subi	r30, 0xAA	; 170
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	2f 81       	ldd	r18, Y+7	; 0x07
    2606:	68 85       	ldd	r22, Y+8	; 0x08
    2608:	0c 94 19 29 	jmp	0x5232	; 0x5232 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    260c:	84 2f       	mov	r24, r20
    260e:	80 7f       	andi	r24, 0xF0	; 240
    2610:	14 2f       	mov	r17, r20
    2612:	1f 70       	andi	r17, 0x0F	; 15
    2614:	88 23       	and	r24, r24
    2616:	11 f0       	breq	.+4      	; 0x261c <process_action+0x9e>
    2618:	12 95       	swap	r17
    261a:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    261c:	ff 20       	and	r15, r15
    261e:	59 f0       	breq	.+22     	; 0x2636 <process_action+0xb8>
                    if (mods) {
    2620:	11 23       	and	r17, r17
    2622:	09 f4       	brne	.+2      	; 0x2626 <process_action+0xa8>
    2624:	71 c2       	rjmp	.+1250   	; 0x2b08 <process_action+0x58a>
                        add_weak_mods(mods);
    2626:	81 2f       	mov	r24, r17
    2628:	68 87       	std	Y+8, r22	; 0x08
    262a:	0e 94 a3 1b 	call	0x3746	; 0x3746 <add_weak_mods>
                        send_keyboard_report();
    262e:	0e 94 cc 1b 	call	0x3798	; 0x3798 <send_keyboard_report>
    2632:	68 85       	ldd	r22, Y+8	; 0x08
    2634:	69 c2       	rjmp	.+1234   	; 0x2b08 <process_action+0x58a>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2636:	86 2f       	mov	r24, r22
    2638:	0e 94 47 12 	call	0x248e	; 0x248e <unregister_code>
                    if (mods) {
    263c:	11 23       	and	r17, r17
    263e:	09 f4       	brne	.+2      	; 0x2642 <process_action+0xc4>
    2640:	ae c2       	rjmp	.+1372   	; 0x2b9e <process_action+0x620>
                        del_weak_mods(mods);
    2642:	81 2f       	mov	r24, r17
    2644:	0e 94 a9 1b 	call	0x3752	; 0x3752 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2648:	28 96       	adiw	r28, 0x08	; 8
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	de bf       	out	0x3e, r29	; 62
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	cd bf       	out	0x3d, r28	; 61
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	ff 90       	pop	r15
    265e:	ef 90       	pop	r14
    2660:	df 90       	pop	r13
    2662:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2664:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2668:	84 2f       	mov	r24, r20
    266a:	80 7f       	andi	r24, 0xF0	; 240
    266c:	94 2f       	mov	r25, r20
    266e:	9f 70       	andi	r25, 0x0F	; 15
    2670:	e9 2e       	mov	r14, r25
    2672:	80 32       	cpi	r24, 0x20	; 32
    2674:	19 f0       	breq	.+6      	; 0x267c <process_action+0xfe>
    2676:	e2 94       	swap	r14
    2678:	80 ef       	ldi	r24, 0xF0	; 240
    267a:	e8 22       	and	r14, r24
                                                                    action.key.mods<<4;
                switch (action.key.code) {
    267c:	66 23       	and	r22, r22
    267e:	19 f0       	breq	.+6      	; 0x2686 <process_action+0x108>
    2680:	61 30       	cpi	r22, 0x01	; 1
    2682:	01 f1       	breq	.+64     	; 0x26c4 <process_action+0x146>
    2684:	29 c0       	rjmp	.+82     	; 0x26d8 <process_action+0x15a>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2686:	ff 20       	and	r15, r15
    2688:	a9 f0       	breq	.+42     	; 0x26b4 <process_action+0x136>
                            if (tap_count == 0) {
                                register_mods(mods);
    268a:	8e 2d       	mov	r24, r14
                switch (action.key.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    268c:	22 23       	and	r18, r18
    268e:	49 f1       	breq	.+82     	; 0x26e2 <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2690:	21 30       	cpi	r18, 0x01	; 1
    2692:	39 f5       	brne	.+78     	; 0x26e2 <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    2694:	28 96       	adiw	r28, 0x08	; 8
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	ff 90       	pop	r15
    26aa:	ef 90       	pop	r14
    26ac:	df 90       	pop	r13
    26ae:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    26b0:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    26b4:	22 23       	and	r18, r18
    26b6:	19 f0       	breq	.+6      	; 0x26be <process_action+0x140>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    26b8:	21 30       	cpi	r18, 0x01	; 1
    26ba:	09 f4       	brne	.+2      	; 0x26be <process_action+0x140>
    26bc:	70 c2       	rjmp	.+1248   	; 0x2b9e <process_action+0x620>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    26be:	0e 94 b6 1b 	call	0x376c	; 0x376c <clear_oneshot_mods>
    26c2:	2c c0       	rjmp	.+88     	; 0x271c <process_action+0x19e>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    26c4:	ff 20       	and	r15, r15
    26c6:	e9 f0       	breq	.+58     	; 0x2702 <process_action+0x184>
                            if (tap_count <= TAPPING_TOGGLE) {
    26c8:	26 30       	cpi	r18, 0x06	; 6
    26ca:	08 f0       	brcs	.+2      	; 0x26ce <process_action+0x150>
    26cc:	68 c2       	rjmp	.+1232   	; 0x2b9e <process_action+0x620>
                                if (mods & get_mods()) {
    26ce:	0e 94 8d 1b 	call	0x371a	; 0x371a <get_mods>
    26d2:	8e 21       	and	r24, r14
    26d4:	29 f0       	breq	.+10     	; 0x26e0 <process_action+0x162>
    26d6:	22 c0       	rjmp	.+68     	; 0x271c <process_action+0x19e>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    26d8:	ff 20       	and	r15, r15
    26da:	f1 f0       	breq	.+60     	; 0x2718 <process_action+0x19a>
                            if (tap_count > 0) {
    26dc:	21 11       	cpse	r18, r1
    26de:	15 c0       	rjmp	.+42     	; 0x270a <process_action+0x18c>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    26e0:	8e 2d       	mov	r24, r14
            break;
#endif
        default:
            break;
    }
}
    26e2:	28 96       	adiw	r28, 0x08	; 8
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    26fe:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2702:	25 30       	cpi	r18, 0x05	; 5
    2704:	08 f0       	brcs	.+2      	; 0x2708 <process_action+0x18a>
    2706:	4b c2       	rjmp	.+1174   	; 0x2b9e <process_action+0x620>
    2708:	09 c0       	rjmp	.+18     	; 0x271c <process_action+0x19e>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    270a:	f8 01       	movw	r30, r16
    270c:	85 81       	ldd	r24, Z+5	; 0x05
    270e:	80 ff       	sbrs	r24, 0
    2710:	fb c1       	rjmp	.+1014   	; 0x2b08 <process_action+0x58a>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2712:	8f 70       	andi	r24, 0x0F	; 15
    2714:	85 83       	std	Z+5, r24	; 0x05
    2716:	e4 cf       	rjmp	.-56     	; 0x26e0 <process_action+0x162>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2718:	21 11       	cpse	r18, r1
    271a:	0a c2       	rjmp	.+1044   	; 0x2b30 <process_action+0x5b2>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    271c:	8e 2d       	mov	r24, r14
    271e:	78 c1       	rjmp	.+752    	; 0x2a10 <process_action+0x492>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2720:	24 2f       	mov	r18, r20
    2722:	26 95       	lsr	r18
    2724:	26 95       	lsr	r18
    2726:	23 70       	andi	r18, 0x03	; 3
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	21 15       	cp	r18, r1
    272c:	31 05       	cpc	r19, r1
    272e:	21 f0       	breq	.+8      	; 0x2738 <process_action+0x1ba>
    2730:	21 30       	cpi	r18, 0x01	; 1
    2732:	31 05       	cpc	r19, r1
    2734:	c9 f0       	breq	.+50     	; 0x2768 <process_action+0x1ea>
    2736:	33 c2       	rjmp	.+1126   	; 0x2b9e <process_action+0x620>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2738:	ff 20       	and	r15, r15
    273a:	21 f0       	breq	.+8      	; 0x2744 <process_action+0x1c6>
                        host_system_send(action.usage.code);
    273c:	86 2f       	mov	r24, r22
    273e:	94 2f       	mov	r25, r20
    2740:	93 70       	andi	r25, 0x03	; 3
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <process_action+0x1ca>
                    } else {
                        host_system_send(0);
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2748:	28 96       	adiw	r28, 0x08	; 8
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	1f 91       	pop	r17
    275a:	0f 91       	pop	r16
    275c:	ff 90       	pop	r15
    275e:	ef 90       	pop	r14
    2760:	df 90       	pop	r13
    2762:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2764:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2768:	ff 20       	and	r15, r15
    276a:	21 f0       	breq	.+8      	; 0x2774 <process_action+0x1f6>
                        host_consumer_send(action.usage.code);
    276c:	86 2f       	mov	r24, r22
    276e:	94 2f       	mov	r25, r20
    2770:	93 70       	andi	r25, 0x03	; 3
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <process_action+0x1fa>
                    } else {
                        host_consumer_send(0);
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2778:	28 96       	adiw	r28, 0x08	; 8
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	1f 91       	pop	r17
    278a:	0f 91       	pop	r16
    278c:	ff 90       	pop	r15
    278e:	ef 90       	pop	r14
    2790:	df 90       	pop	r13
    2792:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2794:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2798:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    279a:	ff 20       	and	r15, r15
    279c:	19 f0       	breq	.+6      	; 0x27a4 <process_action+0x226>
                mousekey_on(action.key.code);
    279e:	0e 94 b5 20 	call	0x416a	; 0x416a <mousekey_on>
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <process_action+0x22a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    27a4:	0e 94 1d 21 	call	0x423a	; 0x423a <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    27a8:	28 96       	adiw	r28, 0x08	; 8
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	df 90       	pop	r13
    27c2:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    27c4:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    27c8:	84 2f       	mov	r24, r20
    27ca:	83 70       	andi	r24, 0x03	; 3
    27cc:	09 f0       	breq	.+2      	; 0x27d0 <process_action+0x252>
    27ce:	76 c0       	rjmp	.+236    	; 0x28bc <process_action+0x33e>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    27d0:	f1 10       	cpse	r15, r1
    27d2:	e5 c1       	rjmp	.+970    	; 0x2b9e <process_action+0x620>
                    uint8_t shift = action.layer_bitop.part*4;
    27d4:	26 2f       	mov	r18, r22
    27d6:	22 95       	swap	r18
    27d8:	26 95       	lsr	r18
    27da:	27 70       	andi	r18, 0x07	; 7
    27dc:	22 0f       	add	r18, r18
    27de:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    27e0:	86 2f       	mov	r24, r22
    27e2:	8f 70       	andi	r24, 0x0F	; 15
    27e4:	c8 2e       	mov	r12, r24
    27e6:	d1 2c       	mov	r13, r1
    27e8:	e1 2c       	mov	r14, r1
    27ea:	f1 2c       	mov	r15, r1
    27ec:	02 2e       	mov	r0, r18
    27ee:	04 c0       	rjmp	.+8      	; 0x27f8 <process_action+0x27a>
    27f0:	cc 0c       	add	r12, r12
    27f2:	dd 1c       	adc	r13, r13
    27f4:	ee 1c       	adc	r14, r14
    27f6:	ff 1c       	adc	r15, r15
    27f8:	0a 94       	dec	r0
    27fa:	d2 f7       	brpl	.-12     	; 0x27f0 <process_action+0x272>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    27fc:	64 ff       	sbrs	r22, 4
    27fe:	10 c0       	rjmp	.+32     	; 0x2820 <process_action+0x2a2>
    2800:	6f e0       	ldi	r22, 0x0F	; 15
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	04 c0       	rjmp	.+8      	; 0x2812 <process_action+0x294>
    280a:	66 0f       	add	r22, r22
    280c:	77 1f       	adc	r23, r23
    280e:	88 1f       	adc	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	2a 95       	dec	r18
    2814:	d2 f7       	brpl	.-12     	; 0x280a <process_action+0x28c>
    2816:	60 95       	com	r22
    2818:	70 95       	com	r23
    281a:	80 95       	com	r24
    281c:	90 95       	com	r25
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <process_action+0x2a8>
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	70 e0       	ldi	r23, 0x00	; 0
    2824:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2826:	24 2f       	mov	r18, r20
    2828:	26 95       	lsr	r18
    282a:	26 95       	lsr	r18
    282c:	23 70       	andi	r18, 0x03	; 3
    282e:	42 2f       	mov	r20, r18
    2830:	50 e0       	ldi	r21, 0x00	; 0
    2832:	42 30       	cpi	r20, 0x02	; 2
    2834:	51 05       	cpc	r21, r1
    2836:	d1 f0       	breq	.+52     	; 0x286c <process_action+0x2ee>
    2838:	43 30       	cpi	r20, 0x03	; 3
    283a:	51 05       	cpc	r21, r1
    283c:	59 f1       	breq	.+86     	; 0x2894 <process_action+0x316>
    283e:	6c 29       	or	r22, r12
    2840:	7d 29       	or	r23, r13
    2842:	8e 29       	or	r24, r14
    2844:	9f 29       	or	r25, r15
    2846:	41 30       	cpi	r20, 0x01	; 1
    2848:	51 05       	cpc	r21, r1
    284a:	41 f1       	breq	.+80     	; 0x289c <process_action+0x31e>
            break;
#endif
        default:
            break;
    }
}
    284c:	28 96       	adiw	r28, 0x08	; 8
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	df 91       	pop	r29
    285a:	cf 91       	pop	r28
    285c:	1f 91       	pop	r17
    285e:	0f 91       	pop	r16
    2860:	ff 90       	pop	r15
    2862:	ef 90       	pop	r14
    2864:	df 90       	pop	r13
    2866:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2868:	0c 94 45 1a 	jmp	0x348a	; 0x348a <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    286c:	6c 29       	or	r22, r12
    286e:	7d 29       	or	r23, r13
    2870:	8e 29       	or	r24, r14
    2872:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2874:	28 96       	adiw	r28, 0x08	; 8
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	ff 90       	pop	r15
    288a:	ef 90       	pop	r14
    288c:	df 90       	pop	r13
    288e:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2890:	0c 94 57 1a 	jmp	0x34ae	; 0x34ae <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2894:	0e 94 45 1a 	call	0x348a	; 0x348a <default_layer_and>
    2898:	c7 01       	movw	r24, r14
    289a:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    289c:	28 96       	adiw	r28, 0x08	; 8
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	df 90       	pop	r13
    28b6:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    28b8:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    28bc:	ff 20       	and	r15, r15
    28be:	19 f0       	breq	.+6      	; 0x28c6 <process_action+0x348>
    28c0:	84 2f       	mov	r24, r20
    28c2:	81 70       	andi	r24, 0x01	; 1
    28c4:	01 c0       	rjmp	.+2      	; 0x28c8 <process_action+0x34a>
    28c6:	86 95       	lsr	r24
    28c8:	88 23       	and	r24, r24
    28ca:	09 f4       	brne	.+2      	; 0x28ce <process_action+0x350>
    28cc:	68 c1       	rjmp	.+720    	; 0x2b9e <process_action+0x620>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    28ce:	26 2f       	mov	r18, r22
    28d0:	22 95       	swap	r18
    28d2:	26 95       	lsr	r18
    28d4:	27 70       	andi	r18, 0x07	; 7
    28d6:	22 0f       	add	r18, r18
    28d8:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    28da:	86 2f       	mov	r24, r22
    28dc:	8f 70       	andi	r24, 0x0F	; 15
    28de:	c8 2e       	mov	r12, r24
    28e0:	d1 2c       	mov	r13, r1
    28e2:	e1 2c       	mov	r14, r1
    28e4:	f1 2c       	mov	r15, r1
    28e6:	02 2e       	mov	r0, r18
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <process_action+0x374>
    28ea:	cc 0c       	add	r12, r12
    28ec:	dd 1c       	adc	r13, r13
    28ee:	ee 1c       	adc	r14, r14
    28f0:	ff 1c       	adc	r15, r15
    28f2:	0a 94       	dec	r0
    28f4:	d2 f7       	brpl	.-12     	; 0x28ea <process_action+0x36c>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    28f6:	64 ff       	sbrs	r22, 4
    28f8:	10 c0       	rjmp	.+32     	; 0x291a <process_action+0x39c>
    28fa:	6f e0       	ldi	r22, 0x0F	; 15
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	04 c0       	rjmp	.+8      	; 0x290c <process_action+0x38e>
    2904:	66 0f       	add	r22, r22
    2906:	77 1f       	adc	r23, r23
    2908:	88 1f       	adc	r24, r24
    290a:	99 1f       	adc	r25, r25
    290c:	2a 95       	dec	r18
    290e:	d2 f7       	brpl	.-12     	; 0x2904 <process_action+0x386>
    2910:	60 95       	com	r22
    2912:	70 95       	com	r23
    2914:	80 95       	com	r24
    2916:	90 95       	com	r25
    2918:	03 c0       	rjmp	.+6      	; 0x2920 <process_action+0x3a2>
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2920:	24 2f       	mov	r18, r20
    2922:	26 95       	lsr	r18
    2924:	26 95       	lsr	r18
    2926:	23 70       	andi	r18, 0x03	; 3
    2928:	42 2f       	mov	r20, r18
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	42 30       	cpi	r20, 0x02	; 2
    292e:	51 05       	cpc	r21, r1
    2930:	d1 f0       	breq	.+52     	; 0x2966 <process_action+0x3e8>
    2932:	43 30       	cpi	r20, 0x03	; 3
    2934:	51 05       	cpc	r21, r1
    2936:	59 f1       	breq	.+86     	; 0x298e <process_action+0x410>
    2938:	6c 29       	or	r22, r12
    293a:	7d 29       	or	r23, r13
    293c:	8e 29       	or	r24, r14
    293e:	9f 29       	or	r25, r15
    2940:	41 30       	cpi	r20, 0x01	; 1
    2942:	51 05       	cpc	r21, r1
    2944:	41 f1       	breq	.+80     	; 0x2996 <process_action+0x418>
            break;
#endif
        default:
            break;
    }
}
    2946:	28 96       	adiw	r28, 0x08	; 8
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	df 90       	pop	r13
    2960:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2962:	0c 94 e4 1a 	jmp	0x35c8	; 0x35c8 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2966:	6c 29       	or	r22, r12
    2968:	7d 29       	or	r23, r13
    296a:	8e 29       	or	r24, r14
    296c:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    296e:	28 96       	adiw	r28, 0x08	; 8
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	ff 90       	pop	r15
    2984:	ef 90       	pop	r14
    2986:	df 90       	pop	r13
    2988:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    298a:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    298e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <layer_and>
    2992:	c7 01       	movw	r24, r14
    2994:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2996:	28 96       	adiw	r28, 0x08	; 8
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	ff 90       	pop	r15
    29ac:	ef 90       	pop	r14
    29ae:	df 90       	pop	r13
    29b0:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    29b2:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    29b6:	60 3f       	cpi	r22, 0xF0	; 240
    29b8:	d9 f1       	breq	.+118    	; 0x2a30 <process_action+0x4b2>
    29ba:	28 f4       	brcc	.+10     	; 0x29c6 <process_action+0x448>
    29bc:	80 e4       	ldi	r24, 0x40	; 64
    29be:	86 0f       	add	r24, r22
    29c0:	80 32       	cpi	r24, 0x20	; 32
    29c2:	50 f0       	brcs	.+20     	; 0x29d8 <process_action+0x45a>
    29c4:	9c c0       	rjmp	.+312    	; 0x2afe <process_action+0x580>
    29c6:	62 3f       	cpi	r22, 0xF2	; 242
    29c8:	09 f4       	brne	.+2      	; 0x29cc <process_action+0x44e>
    29ca:	61 c0       	rjmp	.+194    	; 0x2a8e <process_action+0x510>
    29cc:	08 f4       	brcc	.+2      	; 0x29d0 <process_action+0x452>
    29ce:	4b c0       	rjmp	.+150    	; 0x2a66 <process_action+0x4e8>
    29d0:	63 3f       	cpi	r22, 0xF3	; 243
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <process_action+0x458>
    29d4:	70 c0       	rjmp	.+224    	; 0x2ab6 <process_action+0x538>
    29d6:	93 c0       	rjmp	.+294    	; 0x2afe <process_action+0x580>
    29d8:	16 2f       	mov	r17, r22
    29da:	10 71       	andi	r17, 0x10	; 16
    29dc:	84 2f       	mov	r24, r20
    29de:	8f 71       	andi	r24, 0x1F	; 31
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
    29e0:	68 87       	std	Y+8, r22	; 0x08
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xc0 ... 0xdf:
                    /* layer On/Off with modifiers */
                    if (event.pressed) {
    29e2:	ff 20       	and	r15, r15
    29e4:	59 f0       	breq	.+22     	; 0x29fc <process_action+0x47e>
                        layer_on(action.layer_tap.val);
    29e6:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    29ea:	68 85       	ldd	r22, Y+8	; 0x08
    29ec:	86 2f       	mov	r24, r22
    29ee:	11 23       	and	r17, r17
    29f0:	19 f0       	breq	.+6      	; 0x29f8 <process_action+0x47a>
    29f2:	82 95       	swap	r24
    29f4:	80 7f       	andi	r24, 0xF0	; 240
    29f6:	75 ce       	rjmp	.-790    	; 0x26e2 <process_action+0x164>
    29f8:	8f 70       	andi	r24, 0x0F	; 15
    29fa:	73 ce       	rjmp	.-794    	; 0x26e2 <process_action+0x164>
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
    29fc:	0e 94 98 1a 	call	0x3530	; 0x3530 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2a00:	68 85       	ldd	r22, Y+8	; 0x08
    2a02:	86 2f       	mov	r24, r22
    2a04:	11 23       	and	r17, r17
    2a06:	19 f0       	breq	.+6      	; 0x2a0e <process_action+0x490>
    2a08:	82 95       	swap	r24
    2a0a:	80 7f       	andi	r24, 0xF0	; 240
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <process_action+0x492>
    2a0e:	8f 70       	andi	r24, 0x0F	; 15
            break;
#endif
        default:
            break;
    }
}
    2a10:	28 96       	adiw	r28, 0x08	; 8
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
    2a24:	ff 90       	pop	r15
    2a26:	ef 90       	pop	r14
    2a28:	df 90       	pop	r13
    2a2a:	cf 90       	pop	r12
                        register_mods((action.layer_tap.code & 0x10) ?
                                (action.layer_tap.code & 0x0f) << 4 :
                                (action.layer_tap.code & 0x0f));
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2a2c:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <unregister_mods>
                                (action.layer_tap.code & 0x0f));
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2a30:	ff 20       	and	r15, r15
    2a32:	a9 f0       	breq	.+42     	; 0x2a5e <process_action+0x4e0>
                        if (tap_count < TAPPING_TOGGLE) {
    2a34:	25 30       	cpi	r18, 0x05	; 5
    2a36:	08 f0       	brcs	.+2      	; 0x2a3a <process_action+0x4bc>
    2a38:	b2 c0       	rjmp	.+356    	; 0x2b9e <process_action+0x620>
                            layer_invert(action.layer_tap.val);
    2a3a:	84 2f       	mov	r24, r20
    2a3c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2a3e:	28 96       	adiw	r28, 0x08	; 8
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	df 90       	pop	r13
    2a58:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2a5a:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2a5e:	26 30       	cpi	r18, 0x06	; 6
    2a60:	08 f0       	brcs	.+2      	; 0x2a64 <process_action+0x4e6>
    2a62:	9d c0       	rjmp	.+314    	; 0x2b9e <process_action+0x620>
    2a64:	ea cf       	rjmp	.-44     	; 0x2a3a <process_action+0x4bc>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2a66:	ff 20       	and	r15, r15
    2a68:	a1 f0       	breq	.+40     	; 0x2a92 <process_action+0x514>
    2a6a:	84 2f       	mov	r24, r20
    2a6c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2a6e:	28 96       	adiw	r28, 0x08	; 8
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	1f 91       	pop	r17
    2a80:	0f 91       	pop	r16
    2a82:	ff 90       	pop	r15
    2a84:	ef 90       	pop	r14
    2a86:	df 90       	pop	r13
    2a88:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2a8a:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2a8e:	ff 20       	and	r15, r15
    2a90:	61 f3       	breq	.-40     	; 0x2a6a <process_action+0x4ec>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2a92:	84 2f       	mov	r24, r20
    2a94:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2a96:	28 96       	adiw	r28, 0x08	; 8
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	ff 90       	pop	r15
    2aac:	ef 90       	pop	r14
    2aae:	df 90       	pop	r13
    2ab0:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2ab2:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2ab6:	ff 20       	and	r15, r15
    2ab8:	91 f0       	breq	.+36     	; 0x2ade <process_action+0x560>
    2aba:	84 2f       	mov	r24, r20
    2abc:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2abe:	28 96       	adiw	r28, 0x08	; 8
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	df 90       	pop	r13
    2ad8:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2ada:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2ade:	28 96       	adiw	r28, 0x08	; 8
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	1f 91       	pop	r17
    2af0:	0f 91       	pop	r16
    2af2:	ff 90       	pop	r15
    2af4:	ef 90       	pop	r14
    2af6:	df 90       	pop	r13
    2af8:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2afa:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2afe:	ff 20       	and	r15, r15
    2b00:	a1 f0       	breq	.+40     	; 0x2b2a <process_action+0x5ac>
                        if (tap_count > 0) {
    2b02:	22 23       	and	r18, r18
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <process_action+0x58a>
    2b06:	b1 cf       	rjmp	.-158    	; 0x2a6a <process_action+0x4ec>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2b08:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2b0a:	28 96       	adiw	r28, 0x08	; 8
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	ef 90       	pop	r14
    2b22:	df 90       	pop	r13
    2b24:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2b26:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2b2a:	22 23       	and	r18, r18
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <process_action+0x5b2>
    2b2e:	b1 cf       	rjmp	.-158    	; 0x2a92 <process_action+0x514>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2b30:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2b32:	28 96       	adiw	r28, 0x08	; 8
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	ff 90       	pop	r15
    2b48:	ef 90       	pop	r14
    2b4a:	df 90       	pop	r13
    2b4c:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2b4e:	0c 94 47 12 	jmp	0x248e	; 0x248e <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2b52:	4f 70       	andi	r20, 0x0F	; 15
    2b54:	c8 01       	movw	r24, r16
    2b56:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2b5a:	28 96       	adiw	r28, 0x08	; 8
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	df 90       	pop	r13
    2b74:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2b76:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2b7a:	4f 70       	andi	r20, 0x0F	; 15
    2b7c:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2b7e:	28 96       	adiw	r28, 0x08	; 8
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	df 90       	pop	r13
    2b98:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2b9a:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2b9e:	28 96       	adiw	r28, 0x08	; 8
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	f8 94       	cli
    2ba4:	de bf       	out	0x3e, r29	; 62
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	1f 91       	pop	r17
    2bb0:	0f 91       	pop	r16
    2bb2:	ff 90       	pop	r15
    2bb4:	ef 90       	pop	r14
    2bb6:	df 90       	pop	r13
    2bb8:	cf 90       	pop	r12
    2bba:	08 95       	ret

00002bbc <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2bbc:	0e 94 b0 1b 	call	0x3760	; 0x3760 <clear_weak_mods>
    clear_keys();
    2bc0:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <clear_keys>
    send_keyboard_report();
    2bc4:	0e 94 cc 1b 	call	0x3798	; 0x3798 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2bc8:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <mousekey_clear>
    mousekey_send();
    2bcc:	0e 94 a2 21 	call	0x4344	; 0x4344 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <host_system_send>
    host_consumer_send(0);
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <host_consumer_send>

00002be0 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2be0:	0e 94 a0 1b 	call	0x3740	; 0x3740 <clear_mods>
    clear_keyboard_but_mods();
    2be4:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <clear_keyboard_but_mods>

00002be8 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2be8:	0e 94 09 1b 	call	0x3612	; 0x3612 <layer_switch_get_action>

    switch (action.kind.id) {
    2bec:	29 2f       	mov	r18, r25
    2bee:	22 95       	swap	r18
    2bf0:	2f 70       	andi	r18, 0x0F	; 15
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	2c 30       	cpi	r18, 0x0C	; 12
    2bf6:	31 05       	cpc	r19, r1
    2bf8:	4c f4       	brge	.+18     	; 0x2c0c <is_tap_key+0x24>
    2bfa:	2a 30       	cpi	r18, 0x0A	; 10
    2bfc:	31 05       	cpc	r19, r1
    2bfe:	c4 f4       	brge	.+48     	; 0x2c30 <is_tap_key+0x48>
    2c00:	22 50       	subi	r18, 0x02	; 2
    2c02:	31 09       	sbc	r19, r1
    2c04:	22 30       	cpi	r18, 0x02	; 2
    2c06:	31 05       	cpc	r19, r1
    2c08:	40 f0       	brcs	.+16     	; 0x2c1a <is_tap_key+0x32>
    2c0a:	21 c0       	rjmp	.+66     	; 0x2c4e <is_tap_key+0x66>
    2c0c:	2c 30       	cpi	r18, 0x0C	; 12
    2c0e:	31 05       	cpc	r19, r1
    2c10:	d1 f0       	breq	.+52     	; 0x2c46 <is_tap_key+0x5e>
    2c12:	2f 30       	cpi	r18, 0x0F	; 15
    2c14:	31 05       	cpc	r19, r1
    2c16:	b9 f0       	breq	.+46     	; 0x2c46 <is_tap_key+0x5e>
    2c18:	1a c0       	rjmp	.+52     	; 0x2c4e <is_tap_key+0x66>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            switch (action.key.code) {
    2c1a:	85 3a       	cpi	r24, 0xA5	; 165
    2c1c:	28 f4       	brcc	.+10     	; 0x2c28 <is_tap_key+0x40>
    2c1e:	84 30       	cpi	r24, 0x04	; 4
    2c20:	c0 f4       	brcc	.+48     	; 0x2c52 <is_tap_key+0x6a>
    2c22:	82 30       	cpi	r24, 0x02	; 2
    2c24:	28 f4       	brcc	.+10     	; 0x2c30 <is_tap_key+0x48>
    2c26:	15 c0       	rjmp	.+42     	; 0x2c52 <is_tap_key+0x6a>
    2c28:	90 e2       	ldi	r25, 0x20	; 32
    2c2a:	98 0f       	add	r25, r24
    2c2c:	98 30       	cpi	r25, 0x08	; 8
    2c2e:	88 f0       	brcs	.+34     	; 0x2c52 <is_tap_key+0x6a>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2c30:	88 3e       	cpi	r24, 0xE8	; 232
    2c32:	30 f4       	brcc	.+12     	; 0x2c40 <is_tap_key+0x58>
    2c34:	80 3e       	cpi	r24, 0xE0	; 224
    2c36:	68 f4       	brcc	.+26     	; 0x2c52 <is_tap_key+0x6a>
    2c38:	84 50       	subi	r24, 0x04	; 4
    2c3a:	81 3a       	cpi	r24, 0xA1	; 161
    2c3c:	40 f4       	brcc	.+16     	; 0x2c4e <is_tap_key+0x66>
    2c3e:	09 c0       	rjmp	.+18     	; 0x2c52 <is_tap_key+0x6a>
    2c40:	80 3f       	cpi	r24, 0xF0	; 240
    2c42:	29 f4       	brne	.+10     	; 0x2c4e <is_tap_key+0x66>
    2c44:	06 c0       	rjmp	.+12     	; 0x2c52 <is_tap_key+0x6a>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2c46:	93 fb       	bst	r25, 3
    2c48:	88 27       	eor	r24, r24
    2c4a:	80 f9       	bld	r24, 0
    2c4c:	08 95       	ret
            return false;
    }
    return false;
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	08 95       	ret
                case 0xc0 ... 0xdf:         // with modifiers
                    return false;
                case KC_A ... KC_EXSEL:     // tap key
                case KC_LCTRL ... KC_RGUI:  // tap key
                case OP_TAP_TOGGLE:
                    return true;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2c54:	08 95       	ret

00002c56 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <debug_event+0x6>
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <debug_event+0x8>
    2c5e:	1f 92       	push	r1
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	08 95       	ret

00002c74 <debug_record>:

void debug_record(keyrecord_t record)
{
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <debug_record+0x6>
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <debug_record+0x8>
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <debug_record+0xa>
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2c82:	26 96       	adiw	r28, 0x06	; 6
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	08 95       	ret

00002c94 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c9a:	c0 91 6f 01 	lds	r28, 0x016F
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2c9e:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ca0:	80 91 70 01 	lds	r24, 0x0170
    2ca4:	c8 17       	cp	r28, r24
    2ca6:	99 f0       	breq	.+38     	; 0x2cce <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2ca8:	d0 e0       	ldi	r29, 0x00	; 0
    2caa:	1c 9f       	mul	r17, r28
    2cac:	f0 01       	movw	r30, r0
    2cae:	1d 9f       	mul	r17, r29
    2cb0:	f0 0d       	add	r31, r0
    2cb2:	11 24       	eor	r1, r1
    2cb4:	ef 58       	subi	r30, 0x8F	; 143
    2cb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb8:	40 81       	ld	r20, Z
    2cba:	51 81       	ldd	r21, Z+1	; 0x01
    2cbc:	62 81       	ldd	r22, Z+2	; 0x02
    2cbe:	73 81       	ldd	r23, Z+3	; 0x03
    2cc0:	84 81       	ldd	r24, Z+4	; 0x04
    2cc2:	95 81       	ldd	r25, Z+5	; 0x05
    2cc4:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2cc8:	21 96       	adiw	r28, 0x01	; 1
    2cca:	c7 70       	andi	r28, 0x07	; 7
    2ccc:	e9 cf       	rjmp	.-46     	; 0x2ca0 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	1f 91       	pop	r17
    2cd4:	08 95       	ret

00002cd6 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2cd6:	40 91 a1 01 	lds	r20, 0x01A1
    2cda:	50 91 a2 01 	lds	r21, 0x01A2
    2cde:	60 91 a3 01 	lds	r22, 0x01A3
    2ce2:	70 91 a4 01 	lds	r23, 0x01A4
    2ce6:	80 91 a5 01 	lds	r24, 0x01A5
    2cea:	90 91 a6 01 	lds	r25, 0x01A6
    2cee:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <debug_record>

00002cf2 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2cf2:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2cf4:	80 91 a6 01 	lds	r24, 0x01A6
    2cf8:	82 95       	swap	r24
    2cfa:	8f 70       	andi	r24, 0x0F	; 15
    2cfc:	09 f0       	breq	.+2      	; 0x2d00 <waiting_buffer_scan_tap+0xe>
    2cfe:	5f c0       	rjmp	.+190    	; 0x2dbe <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2d00:	80 91 a3 01 	lds	r24, 0x01A3
    2d04:	88 23       	and	r24, r24
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <waiting_buffer_scan_tap+0x18>
    2d08:	5a c0       	rjmp	.+180    	; 0x2dbe <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d0a:	20 91 6f 01 	lds	r18, 0x016F
    2d0e:	a0 91 70 01 	lds	r26, 0x0170
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2d12:	60 91 a1 01 	lds	r22, 0x01A1
    2d16:	70 91 a2 01 	lds	r23, 0x01A2
    2d1a:	80 91 a4 01 	lds	r24, 0x01A4
    2d1e:	90 91 a5 01 	lds	r25, 0x01A5
    2d22:	31 e0       	ldi	r19, 0x01	; 1
    2d24:	6f 3f       	cpi	r22, 0xFF	; 255
    2d26:	09 f0       	breq	.+2      	; 0x2d2a <waiting_buffer_scan_tap+0x38>
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	b3 2f       	mov	r27, r19
    2d2c:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d2e:	2a 17       	cp	r18, r26
    2d30:	09 f4       	brne	.+2      	; 0x2d34 <waiting_buffer_scan_tap+0x42>
    2d32:	45 c0       	rjmp	.+138    	; 0x2dbe <waiting_buffer_scan_tap+0xcc>
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	21 f0       	breq	.+8      	; 0x2d40 <waiting_buffer_scan_tap+0x4e>
    2d38:	7f 3f       	cpi	r23, 0xFF	; 255
    2d3a:	21 f4       	brne	.+8      	; 0x2d44 <waiting_buffer_scan_tap+0x52>
    2d3c:	4b 2f       	mov	r20, r27
    2d3e:	03 c0       	rjmp	.+6      	; 0x2d46 <waiting_buffer_scan_tap+0x54>
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	01 c0       	rjmp	.+2      	; 0x2d46 <waiting_buffer_scan_tap+0x54>
    2d44:	40 e0       	ldi	r20, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2d48:	40 fd       	sbrc	r20, 0
    2d4a:	35 c0       	rjmp	.+106    	; 0x2db6 <waiting_buffer_scan_tap+0xc4>
    2d4c:	c2 9f       	mul	r28, r18
    2d4e:	f0 01       	movw	r30, r0
    2d50:	c3 9f       	mul	r28, r19
    2d52:	f0 0d       	add	r31, r0
    2d54:	11 24       	eor	r1, r1
    2d56:	ef 58       	subi	r30, 0x8F	; 143
    2d58:	fe 4f       	sbci	r31, 0xFE	; 254
    2d5a:	41 81       	ldd	r20, Z+1	; 0x01
    2d5c:	74 13       	cpse	r23, r20
    2d5e:	2b c0       	rjmp	.+86     	; 0x2db6 <waiting_buffer_scan_tap+0xc4>
    2d60:	40 81       	ld	r20, Z
    2d62:	64 13       	cpse	r22, r20
    2d64:	28 c0       	rjmp	.+80     	; 0x2db6 <waiting_buffer_scan_tap+0xc4>
    2d66:	42 81       	ldd	r20, Z+2	; 0x02
    2d68:	41 11       	cpse	r20, r1
    2d6a:	25 c0       	rjmp	.+74     	; 0x2db6 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2d6c:	43 81       	ldd	r20, Z+3	; 0x03
    2d6e:	54 81       	ldd	r21, Z+4	; 0x04
    2d70:	48 17       	cp	r20, r24
    2d72:	59 07       	cpc	r21, r25
    2d74:	10 f4       	brcc	.+4      	; 0x2d7a <waiting_buffer_scan_tap+0x88>
    2d76:	41 50       	subi	r20, 0x01	; 1
    2d78:	51 09       	sbc	r21, r1
    2d7a:	48 1b       	sub	r20, r24
    2d7c:	59 0b       	sbc	r21, r25
    2d7e:	48 3c       	cpi	r20, 0xC8	; 200
    2d80:	51 05       	cpc	r21, r1
    2d82:	c8 f4       	brcc	.+50     	; 0x2db6 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2d84:	80 91 a6 01 	lds	r24, 0x01A6
    2d88:	8f 70       	andi	r24, 0x0F	; 15
    2d8a:	80 61       	ori	r24, 0x10	; 16
    2d8c:	80 93 a6 01 	sts	0x01A6, r24
            waiting_buffer[i].tap.count = 1;
    2d90:	86 e0       	ldi	r24, 0x06	; 6
    2d92:	82 9f       	mul	r24, r18
    2d94:	f0 01       	movw	r30, r0
    2d96:	83 9f       	mul	r24, r19
    2d98:	f0 0d       	add	r31, r0
    2d9a:	11 24       	eor	r1, r1
    2d9c:	ea 58       	subi	r30, 0x8A	; 138
    2d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2da0:	80 81       	ld	r24, Z
    2da2:	8f 70       	andi	r24, 0x0F	; 15
    2da4:	80 61       	ori	r24, 0x10	; 16
    2da6:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2da8:	81 ea       	ldi	r24, 0xA1	; 161
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	0e 94 bf 12 	call	0x257e	; 0x257e <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2db0:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2db2:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2db6:	2f 5f       	subi	r18, 0xFF	; 255
    2db8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dba:	27 70       	andi	r18, 0x07	; 7
    2dbc:	b8 cf       	rjmp	.-144    	; 0x2d2e <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2dbe:	cf 91       	pop	r28
    2dc0:	08 95       	ret

00002dc2 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2dc2:	cf 92       	push	r12
    2dc4:	df 92       	push	r13
    2dc6:	ef 92       	push	r14
    2dc8:	ff 92       	push	r15
    2dca:	0f 93       	push	r16
    2dcc:	1f 93       	push	r17
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	62 97       	sbiw	r28, 0x12	; 18
    2dd8:	0f b6       	in	r0, 0x3f	; 63
    2dda:	f8 94       	cli
    2ddc:	de bf       	out	0x3e, r29	; 62
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	cd bf       	out	0x3d, r28	; 61
    2de2:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2de4:	85 e0       	ldi	r24, 0x05	; 5
    2de6:	f8 01       	movw	r30, r16
    2de8:	de 01       	movw	r26, r28
    2dea:	1d 96       	adiw	r26, 0x0d	; 13
    2dec:	01 90       	ld	r0, Z+
    2dee:	0d 92       	st	X+, r0
    2df0:	8a 95       	dec	r24
    2df2:	e1 f7       	brne	.-8      	; 0x2dec <process_tapping+0x2a>
    2df4:	d8 01       	movw	r26, r16
    2df6:	4c 91       	ld	r20, X
    2df8:	11 96       	adiw	r26, 0x01	; 1
    2dfa:	5c 91       	ld	r21, X
    2dfc:	11 97       	sbiw	r26, 0x01	; 1
    2dfe:	12 96       	adiw	r26, 0x02	; 2
    2e00:	6c 91       	ld	r22, X
    2e02:	12 97       	sbiw	r26, 0x02	; 2
    2e04:	13 96       	adiw	r26, 0x03	; 3
    2e06:	ed 90       	ld	r14, X+
    2e08:	fc 90       	ld	r15, X
    2e0a:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2e0c:	70 91 a1 01 	lds	r23, 0x01A1
    2e10:	e0 91 a2 01 	lds	r30, 0x01A2
    2e14:	20 91 a4 01 	lds	r18, 0x01A4
    2e18:	30 91 a5 01 	lds	r19, 0x01A5
    2e1c:	21 15       	cp	r18, r1
    2e1e:	31 05       	cpc	r19, r1
    2e20:	31 f0       	breq	.+12     	; 0x2e2e <process_tapping+0x6c>
    2e22:	ef 3f       	cpi	r30, 0xFF	; 255
    2e24:	31 f4       	brne	.+12     	; 0x2e32 <process_tapping+0x70>
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	7f 3f       	cpi	r23, 0xFF	; 255
    2e2a:	19 f4       	brne	.+6      	; 0x2e32 <process_tapping+0x70>
    2e2c:	03 c0       	rjmp	.+6      	; 0x2e34 <process_tapping+0x72>
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	01 c0       	rjmp	.+2      	; 0x2e34 <process_tapping+0x72>
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	b8 2f       	mov	r27, r24
    2e36:	b1 70       	andi	r27, 0x01	; 1
    2e38:	cb 2e       	mov	r12, r27
    2e3a:	80 fd       	sbrc	r24, 0
    2e3c:	6c c1       	rjmp	.+728    	; 0x3116 <process_tapping+0x354>
    2e3e:	d0 90 a3 01 	lds	r13, 0x01A3
    2e42:	dd 20       	and	r13, r13
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <process_tapping+0x86>
    2e46:	f5 c0       	rjmp	.+490    	; 0x3032 <process_tapping+0x270>
    2e48:	f0 91 a6 01 	lds	r31, 0x01A6
        if (WITHIN_TAPPING_TERM(event)) {
    2e4c:	e2 16       	cp	r14, r18
    2e4e:	f3 06       	cpc	r15, r19
    2e50:	38 f0       	brcs	.+14     	; 0x2e60 <process_tapping+0x9e>
    2e52:	c7 01       	movw	r24, r14
    2e54:	82 1b       	sub	r24, r18
    2e56:	93 0b       	sbc	r25, r19
    2e58:	88 3c       	cpi	r24, 0xC8	; 200
    2e5a:	91 05       	cpc	r25, r1
    2e5c:	48 f0       	brcs	.+18     	; 0x2e70 <process_tapping+0xae>
    2e5e:	9b c0       	rjmp	.+310    	; 0x2f96 <process_tapping+0x1d4>
    2e60:	20 95       	com	r18
    2e62:	30 95       	com	r19
    2e64:	2e 0d       	add	r18, r14
    2e66:	3f 1d       	adc	r19, r15
    2e68:	28 3c       	cpi	r18, 0xC8	; 200
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	08 f0       	brcs	.+2      	; 0x2e70 <process_tapping+0xae>
    2e6e:	93 c0       	rjmp	.+294    	; 0x2f96 <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    2e70:	8f 2f       	mov	r24, r31
    2e72:	80 7f       	andi	r24, 0xF0	; 240
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <process_tapping+0xb6>
    2e76:	52 c0       	rjmp	.+164    	; 0x2f1c <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2e78:	e5 13       	cpse	r30, r21
    2e7a:	14 c0       	rjmp	.+40     	; 0x2ea4 <process_tapping+0xe2>
    2e7c:	74 13       	cpse	r23, r20
    2e7e:	12 c0       	rjmp	.+36     	; 0x2ea4 <process_tapping+0xe2>
    2e80:	d6 2e       	mov	r13, r22
    2e82:	61 11       	cpse	r22, r1
    2e84:	0f c0       	rjmp	.+30     	; 0x2ea4 <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2e86:	ff 70       	andi	r31, 0x0F	; 15
    2e88:	f0 61       	ori	r31, 0x10	; 16
    2e8a:	f0 93 a6 01 	sts	0x01A6, r31
                    debug_tapping_key();
    2e8e:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <debug_tapping_key>
                    process_action(&tapping_key);
    2e92:	81 ea       	ldi	r24, 0xA1	; 161
    2e94:	91 e0       	ldi	r25, 0x01	; 1
    2e96:	0e 94 bf 12 	call	0x257e	; 0x257e <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2e9a:	80 91 a6 01 	lds	r24, 0x01A6
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    2ea2:	6c c1       	rjmp	.+728    	; 0x317c <process_tapping+0x3ba>
    2ea4:	ef 28       	or	r14, r15
    2ea6:	31 f0       	breq	.+12     	; 0x2eb4 <process_tapping+0xf2>
    2ea8:	5f 3f       	cpi	r21, 0xFF	; 255
    2eaa:	31 f4       	brne	.+12     	; 0x2eb8 <process_tapping+0xf6>
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	4f 3f       	cpi	r20, 0xFF	; 255
    2eb0:	19 f4       	brne	.+6      	; 0x2eb8 <process_tapping+0xf6>
    2eb2:	03 c0       	rjmp	.+6      	; 0x2eba <process_tapping+0xf8>
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <process_tapping+0xf8>
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2eba:	80 fd       	sbrc	r24, 0
    2ebc:	03 c0       	rjmp	.+6      	; 0x2ec4 <process_tapping+0x102>
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	86 27       	eor	r24, r22
    2ec2:	01 c0       	rjmp	.+2      	; 0x2ec6 <process_tapping+0x104>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2ec6:	f8 2f       	mov	r31, r24
    2ec8:	f1 70       	andi	r31, 0x01	; 1
    2eca:	ff 2e       	mov	r15, r31
    2ecc:	80 ff       	sbrs	r24, 0
    2ece:	1c c0       	rjmp	.+56     	; 0x2f08 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ed0:	80 91 6f 01 	lds	r24, 0x016F
    2ed4:	20 91 70 01 	lds	r18, 0x0170
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2ed8:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2eda:	82 17       	cp	r24, r18
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <process_tapping+0x11e>
    2ede:	28 c1       	rjmp	.+592    	; 0x3130 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	38 9f       	mul	r19, r24
    2ee4:	f0 01       	movw	r30, r0
    2ee6:	39 9f       	mul	r19, r25
    2ee8:	f0 0d       	add	r31, r0
    2eea:	11 24       	eor	r1, r1
    2eec:	ef 58       	subi	r30, 0x8F	; 143
    2eee:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef0:	71 81       	ldd	r23, Z+1	; 0x01
    2ef2:	57 13       	cpse	r21, r23
    2ef4:	06 c0       	rjmp	.+12     	; 0x2f02 <process_tapping+0x140>
    2ef6:	70 81       	ld	r23, Z
    2ef8:	47 13       	cpse	r20, r23
    2efa:	03 c0       	rjmp	.+6      	; 0x2f02 <process_tapping+0x140>
    2efc:	72 81       	ldd	r23, Z+2	; 0x02
    2efe:	67 13       	cpse	r22, r23
    2f00:	03 c0       	rjmp	.+6      	; 0x2f08 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f02:	01 96       	adiw	r24, 0x01	; 1
    2f04:	87 70       	andi	r24, 0x07	; 7
    2f06:	e9 cf       	rjmp	.-46     	; 0x2eda <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2f08:	d6 2e       	mov	r13, r22
    2f0a:	66 23       	and	r22, r22
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <process_tapping+0x14e>
    2f0e:	36 c1       	rjmp	.+620    	; 0x317c <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    2f10:	80 91 a6 01 	lds	r24, 0x01A6
    2f14:	81 60       	ori	r24, 0x01	; 1
    2f16:	80 93 a6 01 	sts	0x01A6, r24
    2f1a:	53 c0       	rjmp	.+166    	; 0x2fc2 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f1c:	e5 13       	cpse	r30, r21
    2f1e:	08 c0       	rjmp	.+16     	; 0x2f30 <process_tapping+0x16e>
    2f20:	74 13       	cpse	r23, r20
    2f22:	06 c0       	rjmp	.+12     	; 0x2f30 <process_tapping+0x16e>
    2f24:	61 11       	cpse	r22, r1
    2f26:	04 c0       	rjmp	.+8      	; 0x2f30 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2f28:	d8 01       	movw	r26, r16
    2f2a:	15 96       	adiw	r26, 0x05	; 5
    2f2c:	fc 93       	st	X, r31
    2f2e:	ae c0       	rjmp	.+348    	; 0x308c <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2f30:	4d 87       	std	Y+13, r20	; 0x0d
    2f32:	5e 87       	std	Y+14, r21	; 0x0e
    2f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f38:	6a 8b       	std	Y+18, r22	; 0x12
    2f3a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <is_tap_key>
    2f3e:	6a 89       	ldd	r22, Y+18	; 0x12
    2f40:	88 23       	and	r24, r24
    2f42:	29 f1       	breq	.+74     	; 0x2f8e <process_tapping+0x1cc>
    2f44:	d6 2e       	mov	r13, r22
    2f46:	66 23       	and	r22, r22
    2f48:	11 f1       	breq	.+68     	; 0x2f8e <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    2f4a:	20 91 a6 01 	lds	r18, 0x01A6
    2f4e:	82 2f       	mov	r24, r18
    2f50:	82 95       	swap	r24
    2f52:	8f 70       	andi	r24, 0x0F	; 15
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	02 97       	sbiw	r24, 0x02	; 2
    2f58:	0c f4       	brge	.+2      	; 0x2f5c <process_tapping+0x19a>
    2f5a:	60 c0       	rjmp	.+192    	; 0x301c <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2f5c:	80 91 a1 01 	lds	r24, 0x01A1
    2f60:	90 91 a2 01 	lds	r25, 0x01A2
    2f64:	98 87       	std	Y+8, r25	; 0x08
    2f66:	8f 83       	std	Y+7, r24	; 0x07
    2f68:	19 86       	std	Y+9, r1	; 0x09
    2f6a:	fb 86       	std	Y+11, r15	; 0x0b
    2f6c:	ea 86       	std	Y+10, r14	; 0x0a
    2f6e:	2c 87       	std	Y+12, r18	; 0x0c
    2f70:	ce 01       	movw	r24, r28
    2f72:	07 96       	adiw	r24, 0x07	; 7
    2f74:	51 c0       	rjmp	.+162    	; 0x3018 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f76:	e5 17       	cp	r30, r21
    2f78:	31 f1       	breq	.+76     	; 0x2fc6 <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2f7a:	4d 87       	std	Y+13, r20	; 0x0d
    2f7c:	5e 87       	std	Y+14, r21	; 0x0e
    2f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f82:	6a 8b       	std	Y+18, r22	; 0x12
    2f84:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <is_tap_key>
    2f88:	6a 89       	ldd	r22, Y+18	; 0x12
    2f8a:	81 11       	cpse	r24, r1
    2f8c:	2e c0       	rjmp	.+92     	; 0x2fea <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2f8e:	c8 01       	movw	r24, r16
    2f90:	0e 94 bf 12 	call	0x257e	; 0x257e <process_action>
    2f94:	a4 c0       	rjmp	.+328    	; 0x30de <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2f96:	8f 2f       	mov	r24, r31
    2f98:	80 7f       	andi	r24, 0xF0	; 240
    2f9a:	69 f7       	brne	.-38     	; 0x2f76 <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2f9c:	7e 2d       	mov	r23, r14
    2f9e:	f9 8a       	std	Y+17, r15	; 0x11
    2fa0:	e8 8a       	std	Y+16, r14	; 0x10
    2fa2:	89 89       	ldd	r24, Y+17	; 0x11
    2fa4:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <debug_event>
                process_action(&tapping_key);
    2fa8:	81 ea       	ldi	r24, 0xA1	; 161
    2faa:	91 e0       	ldi	r25, 0x01	; 1
    2fac:	0e 94 bf 12 	call	0x257e	; 0x257e <process_action>
                tapping_key = (keyrecord_t){};
    2fb0:	e1 ea       	ldi	r30, 0xA1	; 161
    2fb2:	f1 e0       	ldi	r31, 0x01	; 1
    2fb4:	86 e0       	ldi	r24, 0x06	; 6
    2fb6:	df 01       	movw	r26, r30
    2fb8:	1d 92       	st	X+, r1
    2fba:	8a 95       	dec	r24
    2fbc:	e9 f7       	brne	.-6      	; 0x2fb8 <process_tapping+0x1f6>
                debug_tapping_key();
    2fbe:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <debug_tapping_key>
                return false;
    2fc2:	d1 2c       	mov	r13, r1
    2fc4:	db c0       	rjmp	.+438    	; 0x317c <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2fc6:	74 13       	cpse	r23, r20
    2fc8:	d8 cf       	rjmp	.-80     	; 0x2f7a <process_tapping+0x1b8>
    2fca:	61 11       	cpse	r22, r1
    2fcc:	d6 cf       	rjmp	.-84     	; 0x2f7a <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2fce:	d8 01       	movw	r26, r16
    2fd0:	15 96       	adiw	r26, 0x05	; 5
    2fd2:	fc 93       	st	X, r31
                    process_action(keyp);
    2fd4:	c8 01       	movw	r24, r16
    2fd6:	0e 94 bf 12 	call	0x257e	; 0x257e <process_action>
                    tapping_key = (keyrecord_t){};
    2fda:	e1 ea       	ldi	r30, 0xA1	; 161
    2fdc:	f1 e0       	ldi	r31, 0x01	; 1
    2fde:	86 e0       	ldi	r24, 0x06	; 6
    2fe0:	df 01       	movw	r26, r30
    2fe2:	1d 92       	st	X+, r1
    2fe4:	8a 95       	dec	r24
    2fe6:	e9 f7       	brne	.-6      	; 0x2fe2 <process_tapping+0x220>
                    return true;
    2fe8:	c9 c0       	rjmp	.+402    	; 0x317c <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2fea:	d6 2e       	mov	r13, r22
    2fec:	66 23       	and	r22, r22
    2fee:	79 f2       	breq	.-98     	; 0x2f8e <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    2ff0:	20 91 a6 01 	lds	r18, 0x01A6
    2ff4:	82 2f       	mov	r24, r18
    2ff6:	82 95       	swap	r24
    2ff8:	8f 70       	andi	r24, 0x0F	; 15
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	02 97       	sbiw	r24, 0x02	; 2
    2ffe:	74 f0       	brlt	.+28     	; 0x301c <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3000:	80 91 a1 01 	lds	r24, 0x01A1
    3004:	90 91 a2 01 	lds	r25, 0x01A2
    3008:	9a 83       	std	Y+2, r25	; 0x02
    300a:	89 83       	std	Y+1, r24	; 0x01
    300c:	1b 82       	std	Y+3, r1	; 0x03
    300e:	fd 82       	std	Y+5, r15	; 0x05
    3010:	ec 82       	std	Y+4, r14	; 0x04
    3012:	2e 83       	std	Y+6, r18	; 0x06
    3014:	ce 01       	movw	r24, r28
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	0e 94 bf 12 	call	0x257e	; 0x257e <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    301c:	86 e0       	ldi	r24, 0x06	; 6
    301e:	f8 01       	movw	r30, r16
    3020:	a1 ea       	ldi	r26, 0xA1	; 161
    3022:	b1 e0       	ldi	r27, 0x01	; 1
    3024:	01 90       	ld	r0, Z+
    3026:	0d 92       	st	X+, r0
    3028:	8a 95       	dec	r24
    302a:	e1 f7       	brne	.-8      	; 0x3024 <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    302c:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <waiting_buffer_scan_tap>
    3030:	6f c0       	rjmp	.+222    	; 0x3110 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3032:	e2 16       	cp	r14, r18
    3034:	f3 06       	cpc	r15, r19
    3036:	28 f0       	brcs	.+10     	; 0x3042 <process_tapping+0x280>
    3038:	c7 01       	movw	r24, r14
    303a:	82 1b       	sub	r24, r18
    303c:	93 0b       	sbc	r25, r19
    303e:	9c 01       	movw	r18, r24
    3040:	04 c0       	rjmp	.+8      	; 0x304a <process_tapping+0x288>
    3042:	20 95       	com	r18
    3044:	30 95       	com	r19
    3046:	2e 0d       	add	r18, r14
    3048:	3f 1d       	adc	r19, r15
    304a:	28 3c       	cpi	r18, 0xC8	; 200
    304c:	31 05       	cpc	r19, r1
    304e:	08 f0       	brcs	.+2      	; 0x3052 <process_tapping+0x290>
    3050:	52 c0       	rjmp	.+164    	; 0x30f6 <process_tapping+0x334>
            if (event.pressed) {
    3052:	d6 2e       	mov	r13, r22
    3054:	66 23       	and	r22, r22
    3056:	09 f4       	brne	.+2      	; 0x305a <process_tapping+0x298>
    3058:	9a cf       	rjmp	.-204    	; 0x2f8e <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    305a:	e5 13       	cpse	r30, r21
    305c:	2c c0       	rjmp	.+88     	; 0x30b6 <process_tapping+0x2f4>
    305e:	74 13       	cpse	r23, r20
    3060:	2a c0       	rjmp	.+84     	; 0x30b6 <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3062:	80 91 a6 01 	lds	r24, 0x01A6
    3066:	80 fd       	sbrc	r24, 0
    3068:	1d c0       	rjmp	.+58     	; 0x30a4 <process_tapping+0x2e2>
    306a:	98 2f       	mov	r25, r24
    306c:	92 95       	swap	r25
    306e:	9f 70       	andi	r25, 0x0F	; 15
    3070:	c9 f0       	breq	.+50     	; 0x30a4 <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3072:	d8 01       	movw	r26, r16
    3074:	15 96       	adiw	r26, 0x05	; 5
    3076:	8c 93       	st	X, r24
    3078:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    307a:	9f 30       	cpi	r25, 0x0F	; 15
    307c:	39 f0       	breq	.+14     	; 0x308c <process_tapping+0x2ca>
    307e:	9f 5f       	subi	r25, 0xFF	; 255
    3080:	92 95       	swap	r25
    3082:	90 7f       	andi	r25, 0xF0	; 240
    3084:	8f 70       	andi	r24, 0x0F	; 15
    3086:	89 2b       	or	r24, r25
    3088:	15 96       	adiw	r26, 0x05	; 5
    308a:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    308c:	c8 01       	movw	r24, r16
    308e:	0e 94 bf 12 	call	0x257e	; 0x257e <process_action>
                        tapping_key = *keyp;
    3092:	86 e0       	ldi	r24, 0x06	; 6
    3094:	f8 01       	movw	r30, r16
    3096:	a1 ea       	ldi	r26, 0xA1	; 161
    3098:	b1 e0       	ldi	r27, 0x01	; 1
    309a:	01 90       	ld	r0, Z+
    309c:	0d 92       	st	X+, r0
    309e:	8a 95       	dec	r24
    30a0:	e1 f7       	brne	.-8      	; 0x309a <process_tapping+0x2d8>
    30a2:	36 c0       	rjmp	.+108    	; 0x3110 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    30a4:	86 e0       	ldi	r24, 0x06	; 6
    30a6:	f8 01       	movw	r30, r16
    30a8:	a1 ea       	ldi	r26, 0xA1	; 161
    30aa:	b1 e0       	ldi	r27, 0x01	; 1
    30ac:	01 90       	ld	r0, Z+
    30ae:	0d 92       	st	X+, r0
    30b0:	8a 95       	dec	r24
    30b2:	e1 f7       	brne	.-8      	; 0x30ac <process_tapping+0x2ea>
                        return true;
    30b4:	63 c0       	rjmp	.+198    	; 0x317c <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    30b6:	4d 87       	std	Y+13, r20	; 0x0d
    30b8:	5e 87       	std	Y+14, r21	; 0x0e
    30ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    30bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30be:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <is_tap_key>
    30c2:	88 23       	and	r24, r24
    30c4:	79 f0       	breq	.+30     	; 0x30e4 <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    30c6:	86 e0       	ldi	r24, 0x06	; 6
    30c8:	f8 01       	movw	r30, r16
    30ca:	a1 ea       	ldi	r26, 0xA1	; 161
    30cc:	b1 e0       	ldi	r27, 0x01	; 1
    30ce:	01 90       	ld	r0, Z+
    30d0:	0d 92       	st	X+, r0
    30d2:	8a 95       	dec	r24
    30d4:	e1 f7       	brne	.-8      	; 0x30ce <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    30d6:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    30da:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <debug_tapping_key>
                    return true;
    30de:	dd 24       	eor	r13, r13
    30e0:	d3 94       	inc	r13
    30e2:	4c c0       	rjmp	.+152    	; 0x317c <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    30e4:	80 91 a6 01 	lds	r24, 0x01A6
    30e8:	81 60       	ori	r24, 0x01	; 1
    30ea:	80 93 a6 01 	sts	0x01A6, r24
                    process_action(keyp);
    30ee:	c8 01       	movw	r24, r16
    30f0:	0e 94 bf 12 	call	0x257e	; 0x257e <process_action>
                    return true;
    30f4:	43 c0       	rjmp	.+134    	; 0x317c <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    30f6:	7e 2d       	mov	r23, r14
    30f8:	f9 8a       	std	Y+17, r15	; 0x11
    30fa:	e8 8a       	std	Y+16, r14	; 0x10
    30fc:	89 89       	ldd	r24, Y+17	; 0x11
    30fe:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <debug_event>
            tapping_key = (keyrecord_t){};
    3102:	e1 ea       	ldi	r30, 0xA1	; 161
    3104:	f1 e0       	ldi	r31, 0x01	; 1
    3106:	86 e0       	ldi	r24, 0x06	; 6
    3108:	df 01       	movw	r26, r30
    310a:	1d 92       	st	X+, r1
    310c:	8a 95       	dec	r24
    310e:	e9 f7       	brne	.-6      	; 0x310a <process_tapping+0x348>
            debug_tapping_key();
    3110:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <debug_tapping_key>
            return false;
    3114:	33 c0       	rjmp	.+102    	; 0x317c <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3116:	66 23       	and	r22, r22
    3118:	09 f4       	brne	.+2      	; 0x311c <process_tapping+0x35a>
    311a:	39 cf       	rjmp	.-398    	; 0x2f8e <process_tapping+0x1cc>
    311c:	4d 87       	std	Y+13, r20	; 0x0d
    311e:	5e 87       	std	Y+14, r21	; 0x0e
    3120:	8d 85       	ldd	r24, Y+13	; 0x0d
    3122:	9e 85       	ldd	r25, Y+14	; 0x0e
    3124:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <is_tap_key>
    3128:	88 23       	and	r24, r24
    312a:	09 f4       	brne	.+2      	; 0x312e <process_tapping+0x36c>
    312c:	30 cf       	rjmp	.-416    	; 0x2f8e <process_tapping+0x1cc>
    312e:	cb cf       	rjmp	.-106    	; 0x30c6 <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3130:	4d 87       	std	Y+13, r20	; 0x0d
    3132:	5e 87       	std	Y+14, r21	; 0x0e
    3134:	8d 85       	ldd	r24, Y+13	; 0x0d
    3136:	9e 85       	ldd	r25, Y+14	; 0x0e
    3138:	0e 94 09 1b 	call	0x3612	; 0x3612 <layer_switch_get_action>
                    switch (action.kind.id) {
    313c:	29 2f       	mov	r18, r25
    313e:	22 95       	swap	r18
    3140:	2f 70       	andi	r18, 0x0F	; 15
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	22 30       	cpi	r18, 0x02	; 2
    3146:	31 05       	cpc	r19, r1
    3148:	2c f4       	brge	.+10     	; 0x3154 <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    314a:	9f 70       	andi	r25, 0x0F	; 15
    314c:	41 f0       	breq	.+16     	; 0x315e <process_tapping+0x39c>
    314e:	81 11       	cpse	r24, r1
    3150:	06 c0       	rjmp	.+12     	; 0x315e <process_tapping+0x39c>
    3152:	0c c0       	rjmp	.+24     	; 0x316c <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3154:	24 30       	cpi	r18, 0x04	; 4
    3156:	31 05       	cpc	r19, r1
    3158:	2c f4       	brge	.+10     	; 0x3164 <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    315a:	9f 70       	andi	r25, 0x0F	; 15
    315c:	49 f4       	brne	.+18     	; 0x3170 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    315e:	80 5e       	subi	r24, 0xE0	; 224
    3160:	88 30       	cpi	r24, 0x08	; 8
    3162:	20 f0       	brcs	.+8      	; 0x316c <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    3164:	c8 01       	movw	r24, r16
    3166:	0e 94 bf 12 	call	0x257e	; 0x257e <process_action>
                    return true;
    316a:	cf 2c       	mov	r12, r15
    316c:	dc 2c       	mov	r13, r12
    316e:	06 c0       	rjmp	.+12     	; 0x317c <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3170:	d8 01       	movw	r26, r16
    3172:	15 96       	adiw	r26, 0x05	; 5
    3174:	9c 91       	ld	r25, X
    3176:	90 7f       	andi	r25, 0xF0	; 240
    3178:	91 f7       	brne	.-28     	; 0x315e <process_tapping+0x39c>
    317a:	f8 cf       	rjmp	.-16     	; 0x316c <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    317c:	8d 2d       	mov	r24, r13
    317e:	62 96       	adiw	r28, 0x12	; 18
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	f8 94       	cli
    3184:	de bf       	out	0x3e, r29	; 62
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	cd bf       	out	0x3d, r28	; 61
    318a:	df 91       	pop	r29
    318c:	cf 91       	pop	r28
    318e:	1f 91       	pop	r17
    3190:	0f 91       	pop	r16
    3192:	ff 90       	pop	r15
    3194:	ef 90       	pop	r14
    3196:	df 90       	pop	r13
    3198:	cf 90       	pop	r12
    319a:	08 95       	ret

0000319c <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    319c:	1f 93       	push	r17
    319e:	cf 93       	push	r28
    31a0:	df 93       	push	r29
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	2c 97       	sbiw	r28, 0x0c	; 12
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	4f 83       	std	Y+7, r20	; 0x07
    31b4:	58 87       	std	Y+8, r21	; 0x08
    31b6:	69 87       	std	Y+9, r22	; 0x09
    31b8:	7a 87       	std	Y+10, r23	; 0x0a
    31ba:	8b 87       	std	Y+11, r24	; 0x0b
    31bc:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    31be:	ce 01       	movw	r24, r28
    31c0:	07 96       	adiw	r24, 0x07	; 7
    31c2:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <process_tapping>
    31c6:	88 23       	and	r24, r24
    31c8:	c1 f0       	breq	.+48     	; 0x31fa <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    31ca:	2f 81       	ldd	r18, Y+7	; 0x07
    31cc:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    31ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    31d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    31d2:	89 2b       	or	r24, r25
    31d4:	31 f0       	breq	.+12     	; 0x31e2 <action_tapping_process+0x46>
    31d6:	3f 3f       	cpi	r19, 0xFF	; 255
    31d8:	11 f0       	breq	.+4      	; 0x31de <action_tapping_process+0x42>
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	03 c0       	rjmp	.+6      	; 0x31e4 <action_tapping_process+0x48>
    31de:	2f 3f       	cpi	r18, 0xFF	; 255
    31e0:	e1 f7       	brne	.-8      	; 0x31da <action_tapping_process+0x3e>
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	81 11       	cpse	r24, r1
    31e6:	47 c0       	rjmp	.+142    	; 0x3276 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    31e8:	4f 81       	ldd	r20, Y+7	; 0x07
    31ea:	58 85       	ldd	r21, Y+8	; 0x08
    31ec:	69 85       	ldd	r22, Y+9	; 0x09
    31ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    31f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    31f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    31f4:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <debug_record>
    31f8:	3e c0       	rjmp	.+124    	; 0x3276 <action_tapping_process+0xda>
    31fa:	86 e0       	ldi	r24, 0x06	; 6
    31fc:	fe 01       	movw	r30, r28
    31fe:	37 96       	adiw	r30, 0x07	; 7
    3200:	de 01       	movw	r26, r28
    3202:	11 96       	adiw	r26, 0x01	; 1
    3204:	01 90       	ld	r0, Z+
    3206:	0d 92       	st	X+, r0
    3208:	8a 95       	dec	r24
    320a:	e1 f7       	brne	.-8      	; 0x3204 <action_tapping_process+0x68>
    320c:	ff 81       	ldd	r31, Y+7	; 0x07
    320e:	e8 85       	ldd	r30, Y+8	; 0x08
    3210:	4a 85       	ldd	r20, Y+10	; 0x0a
    3212:	5b 85       	ldd	r21, Y+11	; 0x0b
    3214:	41 15       	cp	r20, r1
    3216:	51 05       	cpc	r21, r1
    3218:	31 f0       	breq	.+12     	; 0x3226 <action_tapping_process+0x8a>
    321a:	ef 3f       	cpi	r30, 0xFF	; 255
    321c:	31 f4       	brne	.+12     	; 0x322a <action_tapping_process+0x8e>
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	ff 3f       	cpi	r31, 0xFF	; 255
    3222:	19 f4       	brne	.+6      	; 0x322a <action_tapping_process+0x8e>
    3224:	03 c0       	rjmp	.+6      	; 0x322c <action_tapping_process+0x90>
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	01 c0       	rjmp	.+2      	; 0x322c <action_tapping_process+0x90>
    322a:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    322c:	80 fd       	sbrc	r24, 0
    322e:	23 c0       	rjmp	.+70     	; 0x3276 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3230:	20 91 70 01 	lds	r18, 0x0170
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	c9 01       	movw	r24, r18
    3238:	01 96       	adiw	r24, 0x01	; 1
    323a:	87 70       	andi	r24, 0x07	; 7
    323c:	99 27       	eor	r25, r25
    323e:	60 91 6f 01 	lds	r22, 0x016F
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	86 17       	cp	r24, r22
    3246:	97 07       	cpc	r25, r23
    3248:	f1 f1       	breq	.+124    	; 0x32c6 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    324a:	f9 83       	std	Y+1, r31	; 0x01
    324c:	ea 83       	std	Y+2, r30	; 0x02
    324e:	5d 83       	std	Y+5, r21	; 0x05
    3250:	4c 83       	std	Y+4, r20	; 0x04
    3252:	96 e0       	ldi	r25, 0x06	; 6
    3254:	92 9f       	mul	r25, r18
    3256:	d0 01       	movw	r26, r0
    3258:	93 9f       	mul	r25, r19
    325a:	b0 0d       	add	r27, r0
    325c:	11 24       	eor	r1, r1
    325e:	af 58       	subi	r26, 0x8F	; 143
    3260:	be 4f       	sbci	r27, 0xFE	; 254
    3262:	fe 01       	movw	r30, r28
    3264:	31 96       	adiw	r30, 0x01	; 1
    3266:	01 90       	ld	r0, Z+
    3268:	0d 92       	st	X+, r0
    326a:	9a 95       	dec	r25
    326c:	e1 f7       	brne	.-8      	; 0x3266 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    326e:	80 93 70 01 	sts	0x0170, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3272:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3276:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3278:	80 91 6f 01 	lds	r24, 0x016F
    327c:	90 91 70 01 	lds	r25, 0x0170
    3280:	89 17       	cp	r24, r25
    3282:	79 f1       	breq	.+94     	; 0x32e2 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3284:	18 9f       	mul	r17, r24
    3286:	c0 01       	movw	r24, r0
    3288:	11 24       	eor	r1, r1
    328a:	8f 58       	subi	r24, 0x8F	; 143
    328c:	9e 4f       	sbci	r25, 0xFE	; 254
    328e:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <process_tapping>
    3292:	88 23       	and	r24, r24
    3294:	31 f1       	breq	.+76     	; 0x32e2 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3296:	e0 91 6f 01 	lds	r30, 0x016F
    329a:	1e 9f       	mul	r17, r30
    329c:	f0 01       	movw	r30, r0
    329e:	11 24       	eor	r1, r1
    32a0:	ef 58       	subi	r30, 0x8F	; 143
    32a2:	fe 4f       	sbci	r31, 0xFE	; 254
    32a4:	40 81       	ld	r20, Z
    32a6:	51 81       	ldd	r21, Z+1	; 0x01
    32a8:	62 81       	ldd	r22, Z+2	; 0x02
    32aa:	73 81       	ldd	r23, Z+3	; 0x03
    32ac:	84 81       	ldd	r24, Z+4	; 0x04
    32ae:	95 81       	ldd	r25, Z+5	; 0x05
    32b0:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    32b4:	80 91 6f 01 	lds	r24, 0x016F
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	01 96       	adiw	r24, 0x01	; 1
    32bc:	87 70       	andi	r24, 0x07	; 7
    32be:	99 27       	eor	r25, r25
    32c0:	80 93 6f 01 	sts	0x016F, r24
    32c4:	d9 cf       	rjmp	.-78     	; 0x3278 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    32c6:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    32ca:	10 92 70 01 	sts	0x0170, r1
    waiting_buffer_tail = 0;
    32ce:	10 92 6f 01 	sts	0x016F, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    32d2:	e1 ea       	ldi	r30, 0xA1	; 161
    32d4:	f1 e0       	ldi	r31, 0x01	; 1
    32d6:	86 e0       	ldi	r24, 0x06	; 6
    32d8:	df 01       	movw	r26, r30
    32da:	1d 92       	st	X+, r1
    32dc:	8a 95       	dec	r24
    32de:	e9 f7       	brne	.-6      	; 0x32da <action_tapping_process+0x13e>
    32e0:	ca cf       	rjmp	.-108    	; 0x3276 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    32e2:	2c 96       	adiw	r28, 0x0c	; 12
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	de bf       	out	0x3e, r29	; 62
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	cd bf       	out	0x3d, r28	; 61
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	1f 91       	pop	r17
    32f4:	08 95       	ret

000032f6 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    32f6:	df 92       	push	r13
    32f8:	ef 92       	push	r14
    32fa:	ff 92       	push	r15
    32fc:	0f 93       	push	r16
    32fe:	1f 93       	push	r17
    3300:	cf 93       	push	r28
    3302:	df 93       	push	r29
    3304:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	09 f4       	brne	.+2      	; 0x330c <action_macro_play+0x16>
    330a:	8a c0       	rjmp	.+276    	; 0x3420 <action_macro_play+0x12a>
    330c:	e1 2c       	mov	r14, r1
    330e:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3310:	dd 24       	eor	r13, r13
    3312:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3314:	e9 01       	movw	r28, r18
    3316:	21 96       	adiw	r28, 0x01	; 1
    3318:	f9 01       	movw	r30, r18
    331a:	84 91       	lpm	r24, Z
    331c:	85 37       	cpi	r24, 0x75	; 117
    331e:	09 f4       	brne	.+2      	; 0x3322 <action_macro_play+0x2c>
    3320:	62 c0       	rjmp	.+196    	; 0x33e6 <action_macro_play+0xf0>
    3322:	58 f4       	brcc	.+22     	; 0x333a <action_macro_play+0x44>
    3324:	84 37       	cpi	r24, 0x74	; 116
    3326:	08 f0       	brcs	.+2      	; 0x332a <action_macro_play+0x34>
    3328:	4e c0       	rjmp	.+156    	; 0x33c6 <action_macro_play+0xd0>
    332a:	84 30       	cpi	r24, 0x04	; 4
    332c:	08 f0       	brcs	.+2      	; 0x3330 <action_macro_play+0x3a>
    332e:	69 c0       	rjmp	.+210    	; 0x3402 <action_macro_play+0x10c>
    3330:	81 30       	cpi	r24, 0x01	; 1
    3332:	d1 f0       	breq	.+52     	; 0x3368 <action_macro_play+0x72>
    3334:	82 30       	cpi	r24, 0x02	; 2
    3336:	71 f1       	breq	.+92     	; 0x3394 <action_macro_play+0x9e>
    3338:	73 c0       	rjmp	.+230    	; 0x3420 <action_macro_play+0x12a>
    333a:	88 37       	cpi	r24, 0x78	; 120
    333c:	09 f4       	brne	.+2      	; 0x3340 <action_macro_play+0x4a>
    333e:	5c c0       	rjmp	.+184    	; 0x33f8 <action_macro_play+0x102>
    3340:	50 f4       	brcc	.+20     	; 0x3356 <action_macro_play+0x60>
    3342:	86 37       	cpi	r24, 0x76	; 118
    3344:	09 f4       	brne	.+2      	; 0x3348 <action_macro_play+0x52>
    3346:	54 c0       	rjmp	.+168    	; 0x33f0 <action_macro_play+0xfa>
    3348:	87 37       	cpi	r24, 0x77	; 119
    334a:	09 f0       	breq	.+2      	; 0x334e <action_macro_play+0x58>
    334c:	69 c0       	rjmp	.+210    	; 0x3420 <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    334e:	8e 2d       	mov	r24, r14
    3350:	0e 94 9d 1b 	call	0x373a	; 0x373a <set_mods>
    3354:	53 c0       	rjmp	.+166    	; 0x33fc <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3356:	9c e7       	ldi	r25, 0x7C	; 124
    3358:	98 0f       	add	r25, r24
    335a:	90 37       	cpi	r25, 0x70	; 112
    335c:	08 f0       	brcs	.+2      	; 0x3360 <action_macro_play+0x6a>
    335e:	60 c0       	rjmp	.+192    	; 0x3420 <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3360:	8f 77       	andi	r24, 0x7F	; 127
    3362:	0e 94 47 12 	call	0x248e	; 0x248e <unregister_code>
                break;
    3366:	4f c0       	rjmp	.+158    	; 0x3406 <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3368:	89 01       	movw	r16, r18
    336a:	0e 5f       	subi	r16, 0xFE	; 254
    336c:	1f 4f       	sbci	r17, 0xFF	; 255
    336e:	fe 01       	movw	r30, r28
    3370:	c4 91       	lpm	r28, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3372:	80 e2       	ldi	r24, 0x20	; 32
    3374:	8c 0f       	add	r24, r28
    3376:	88 30       	cpi	r24, 0x08	; 8
    3378:	48 f4       	brcc	.+18     	; 0x338c <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    337a:	c7 70       	andi	r28, 0x07	; 7
    337c:	8d 2d       	mov	r24, r13
    337e:	01 c0       	rjmp	.+2      	; 0x3382 <action_macro_play+0x8c>
    3380:	88 0f       	add	r24, r24
    3382:	ca 95       	dec	r28
    3384:	ea f7       	brpl	.-6      	; 0x3380 <action_macro_play+0x8a>
    3386:	0e 94 a3 1b 	call	0x3746	; 0x3746 <add_weak_mods>
    338a:	15 c0       	rjmp	.+42     	; 0x33b6 <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    338c:	8c 2f       	mov	r24, r28
    338e:	0e 94 59 11 	call	0x22b2	; 0x22b2 <register_code>
    3392:	13 c0       	rjmp	.+38     	; 0x33ba <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3394:	89 01       	movw	r16, r18
    3396:	0e 5f       	subi	r16, 0xFE	; 254
    3398:	1f 4f       	sbci	r17, 0xFF	; 255
    339a:	fe 01       	movw	r30, r28
    339c:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    339e:	80 e2       	ldi	r24, 0x20	; 32
    33a0:	8c 0f       	add	r24, r28
    33a2:	88 30       	cpi	r24, 0x08	; 8
    33a4:	60 f4       	brcc	.+24     	; 0x33be <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    33a6:	c7 70       	andi	r28, 0x07	; 7
    33a8:	8d 2d       	mov	r24, r13
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <action_macro_play+0xb8>
    33ac:	88 0f       	add	r24, r24
    33ae:	ca 95       	dec	r28
    33b0:	ea f7       	brpl	.-6      	; 0x33ac <action_macro_play+0xb6>
    33b2:	0e 94 a9 1b 	call	0x3752	; 0x3752 <del_weak_mods>
                    send_keyboard_report();
    33b6:	0e 94 cc 1b 	call	0x3798	; 0x3798 <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    33ba:	e8 01       	movw	r28, r16
    33bc:	24 c0       	rjmp	.+72     	; 0x3406 <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    33be:	8c 2f       	mov	r24, r28
    33c0:	0e 94 47 12 	call	0x248e	; 0x248e <unregister_code>
    33c4:	fa cf       	rjmp	.-12     	; 0x33ba <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    33c6:	2e 5f       	subi	r18, 0xFE	; 254
    33c8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ca:	fe 01       	movw	r30, r28
    33cc:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    33ce:	cc 23       	and	r28, r28
    33d0:	41 f0       	breq	.+16     	; 0x33e2 <action_macro_play+0xec>
    33d2:	8f e9       	ldi	r24, 0x9F	; 159
    33d4:	9f e0       	ldi	r25, 0x0F	; 15
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <action_macro_play+0xe0>
    33da:	00 c0       	rjmp	.+0      	; 0x33dc <action_macro_play+0xe6>
    33dc:	00 00       	nop
    33de:	c1 50       	subi	r28, 0x01	; 1
    33e0:	f6 cf       	rjmp	.-20     	; 0x33ce <action_macro_play+0xd8>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    33e2:	e9 01       	movw	r28, r18
    33e4:	10 c0       	rjmp	.+32     	; 0x3406 <action_macro_play+0x110>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    33e6:	fe 01       	movw	r30, r28
    33e8:	f4 90       	lpm	r15, Z
    33ea:	e9 01       	movw	r28, r18
    33ec:	22 96       	adiw	r28, 0x02	; 2
                dprintf("INTERVAL(%u)\n", interval);
                break;
    33ee:	0b c0       	rjmp	.+22     	; 0x3406 <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    33f0:	0e 94 8d 1b 	call	0x371a	; 0x371a <get_mods>
    33f4:	e8 2e       	mov	r14, r24
                break;
    33f6:	07 c0       	rjmp	.+14     	; 0x3406 <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    33f8:	0e 94 a0 1b 	call	0x3740	; 0x3740 <clear_mods>
                send_keyboard_report();
    33fc:	0e 94 cc 1b 	call	0x3798	; 0x3798 <send_keyboard_report>
                break;
    3400:	02 c0       	rjmp	.+4      	; 0x3406 <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3402:	0e 94 59 11 	call	0x22b2	; 0x22b2 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3406:	9f 2d       	mov	r25, r15
    3408:	99 23       	and	r25, r25
    340a:	41 f0       	breq	.+16     	; 0x341c <action_macro_play+0x126>
    340c:	ef e9       	ldi	r30, 0x9F	; 159
    340e:	ff e0       	ldi	r31, 0x0F	; 15
    3410:	31 97       	sbiw	r30, 0x01	; 1
    3412:	f1 f7       	brne	.-4      	; 0x3410 <action_macro_play+0x11a>
    3414:	00 c0       	rjmp	.+0      	; 0x3416 <action_macro_play+0x120>
    3416:	00 00       	nop
    3418:	91 50       	subi	r25, 0x01	; 1
    341a:	f6 cf       	rjmp	.-20     	; 0x3408 <action_macro_play+0x112>
    341c:	9e 01       	movw	r18, r28
    341e:	7a cf       	rjmp	.-268    	; 0x3314 <action_macro_play+0x1e>
    }
}
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	ff 90       	pop	r15
    342a:	ef 90       	pop	r14
    342c:	df 90       	pop	r13
    342e:	08 95       	ret

00003430 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3430:	60 93 ab 01 	sts	0x01AB, r22
    3434:	70 93 ac 01 	sts	0x01AC, r23
    3438:	80 93 ad 01 	sts	0x01AD, r24
    343c:	90 93 ae 01 	sts	0x01AE, r25
    hook_default_layer_change(default_layer_state);
    3440:	0e 94 33 1c 	call	0x3866	; 0x3866 <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3444:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <clear_keyboard_but_mods>

00003448 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3448:	60 93 a7 01 	sts	0x01A7, r22
    344c:	70 93 a8 01 	sts	0x01A8, r23
    3450:	80 93 a9 01 	sts	0x01A9, r24
    3454:	90 93 aa 01 	sts	0x01AA, r25
    hook_layer_change(layer_state);
    3458:	0e 94 34 1c 	call	0x3868	; 0x3868 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    345c:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <clear_keyboard_but_mods>

00003460 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3460:	08 95       	ret

00003462 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    3462:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <default_layer_state_set>

00003466 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3466:	0f 93       	push	r16
    3468:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    346a:	00 91 ab 01 	lds	r16, 0x01AB
    346e:	10 91 ac 01 	lds	r17, 0x01AC
    3472:	20 91 ad 01 	lds	r18, 0x01AD
    3476:	30 91 ae 01 	lds	r19, 0x01AE
    347a:	60 2b       	or	r22, r16
    347c:	71 2b       	or	r23, r17
    347e:	82 2b       	or	r24, r18
    3480:	93 2b       	or	r25, r19
}
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    3486:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <default_layer_state_set>

0000348a <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    348a:	0f 93       	push	r16
    348c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    348e:	00 91 ab 01 	lds	r16, 0x01AB
    3492:	10 91 ac 01 	lds	r17, 0x01AC
    3496:	20 91 ad 01 	lds	r18, 0x01AD
    349a:	30 91 ae 01 	lds	r19, 0x01AE
    349e:	60 23       	and	r22, r16
    34a0:	71 23       	and	r23, r17
    34a2:	82 23       	and	r24, r18
    34a4:	93 23       	and	r25, r19
}
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    34aa:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <default_layer_state_set>

000034ae <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    34b2:	00 91 ab 01 	lds	r16, 0x01AB
    34b6:	10 91 ac 01 	lds	r17, 0x01AC
    34ba:	20 91 ad 01 	lds	r18, 0x01AD
    34be:	30 91 ae 01 	lds	r19, 0x01AE
    34c2:	60 27       	eor	r22, r16
    34c4:	71 27       	eor	r23, r17
    34c6:	82 27       	eor	r24, r18
    34c8:	93 27       	eor	r25, r19
}
    34ca:	1f 91       	pop	r17
    34cc:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    34ce:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <default_layer_state_set>

000034d2 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	70 e0       	ldi	r23, 0x00	; 0
    34d6:	cb 01       	movw	r24, r22
    34d8:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <layer_state_set>

000034dc <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    34dc:	41 e0       	ldi	r20, 0x01	; 1
    34de:	50 e0       	ldi	r21, 0x00	; 0
    34e0:	60 e0       	ldi	r22, 0x00	; 0
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	04 c0       	rjmp	.+8      	; 0x34ee <layer_move+0x12>
    34e6:	44 0f       	add	r20, r20
    34e8:	55 1f       	adc	r21, r21
    34ea:	66 1f       	adc	r22, r22
    34ec:	77 1f       	adc	r23, r23
    34ee:	8a 95       	dec	r24
    34f0:	d2 f7       	brpl	.-12     	; 0x34e6 <layer_move+0xa>
    34f2:	cb 01       	movw	r24, r22
    34f4:	ba 01       	movw	r22, r20
    34f6:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <layer_state_set>

000034fa <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    34fa:	41 e0       	ldi	r20, 0x01	; 1
    34fc:	50 e0       	ldi	r21, 0x00	; 0
    34fe:	60 e0       	ldi	r22, 0x00	; 0
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	04 c0       	rjmp	.+8      	; 0x350c <layer_on+0x12>
    3504:	44 0f       	add	r20, r20
    3506:	55 1f       	adc	r21, r21
    3508:	66 1f       	adc	r22, r22
    350a:	77 1f       	adc	r23, r23
    350c:	8a 95       	dec	r24
    350e:	d2 f7       	brpl	.-12     	; 0x3504 <layer_on+0xa>
    3510:	80 91 a7 01 	lds	r24, 0x01A7
    3514:	90 91 a8 01 	lds	r25, 0x01A8
    3518:	a0 91 a9 01 	lds	r26, 0x01A9
    351c:	b0 91 aa 01 	lds	r27, 0x01AA
    3520:	48 2b       	or	r20, r24
    3522:	59 2b       	or	r21, r25
    3524:	6a 2b       	or	r22, r26
    3526:	7b 2b       	or	r23, r27
    3528:	cb 01       	movw	r24, r22
    352a:	ba 01       	movw	r22, r20
    352c:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <layer_state_set>

00003530 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3530:	41 e0       	ldi	r20, 0x01	; 1
    3532:	50 e0       	ldi	r21, 0x00	; 0
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	70 e0       	ldi	r23, 0x00	; 0
    3538:	04 c0       	rjmp	.+8      	; 0x3542 <layer_off+0x12>
    353a:	44 0f       	add	r20, r20
    353c:	55 1f       	adc	r21, r21
    353e:	66 1f       	adc	r22, r22
    3540:	77 1f       	adc	r23, r23
    3542:	8a 95       	dec	r24
    3544:	d2 f7       	brpl	.-12     	; 0x353a <layer_off+0xa>
    3546:	40 95       	com	r20
    3548:	50 95       	com	r21
    354a:	60 95       	com	r22
    354c:	70 95       	com	r23
    354e:	80 91 a7 01 	lds	r24, 0x01A7
    3552:	90 91 a8 01 	lds	r25, 0x01A8
    3556:	a0 91 a9 01 	lds	r26, 0x01A9
    355a:	b0 91 aa 01 	lds	r27, 0x01AA
    355e:	48 23       	and	r20, r24
    3560:	59 23       	and	r21, r25
    3562:	6a 23       	and	r22, r26
    3564:	7b 23       	and	r23, r27
    3566:	cb 01       	movw	r24, r22
    3568:	ba 01       	movw	r22, r20
    356a:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <layer_state_set>

0000356e <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    356e:	41 e0       	ldi	r20, 0x01	; 1
    3570:	50 e0       	ldi	r21, 0x00	; 0
    3572:	60 e0       	ldi	r22, 0x00	; 0
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	04 c0       	rjmp	.+8      	; 0x3580 <layer_invert+0x12>
    3578:	44 0f       	add	r20, r20
    357a:	55 1f       	adc	r21, r21
    357c:	66 1f       	adc	r22, r22
    357e:	77 1f       	adc	r23, r23
    3580:	8a 95       	dec	r24
    3582:	d2 f7       	brpl	.-12     	; 0x3578 <layer_invert+0xa>
    3584:	80 91 a7 01 	lds	r24, 0x01A7
    3588:	90 91 a8 01 	lds	r25, 0x01A8
    358c:	a0 91 a9 01 	lds	r26, 0x01A9
    3590:	b0 91 aa 01 	lds	r27, 0x01AA
    3594:	48 27       	eor	r20, r24
    3596:	59 27       	eor	r21, r25
    3598:	6a 27       	eor	r22, r26
    359a:	7b 27       	eor	r23, r27
    359c:	cb 01       	movw	r24, r22
    359e:	ba 01       	movw	r22, r20
    35a0:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <layer_state_set>

000035a4 <layer_or>:
}

void layer_or(uint32_t state)
{
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    35a8:	00 91 a7 01 	lds	r16, 0x01A7
    35ac:	10 91 a8 01 	lds	r17, 0x01A8
    35b0:	20 91 a9 01 	lds	r18, 0x01A9
    35b4:	30 91 aa 01 	lds	r19, 0x01AA
    35b8:	60 2b       	or	r22, r16
    35ba:	71 2b       	or	r23, r17
    35bc:	82 2b       	or	r24, r18
    35be:	93 2b       	or	r25, r19
}
    35c0:	1f 91       	pop	r17
    35c2:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    35c4:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <layer_state_set>

000035c8 <layer_and>:
}
void layer_and(uint32_t state)
{
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    35cc:	00 91 a7 01 	lds	r16, 0x01A7
    35d0:	10 91 a8 01 	lds	r17, 0x01A8
    35d4:	20 91 a9 01 	lds	r18, 0x01A9
    35d8:	30 91 aa 01 	lds	r19, 0x01AA
    35dc:	60 23       	and	r22, r16
    35de:	71 23       	and	r23, r17
    35e0:	82 23       	and	r24, r18
    35e2:	93 23       	and	r25, r19
}
    35e4:	1f 91       	pop	r17
    35e6:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    35e8:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <layer_state_set>

000035ec <layer_xor>:
}
void layer_xor(uint32_t state)
{
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    35f0:	00 91 a7 01 	lds	r16, 0x01A7
    35f4:	10 91 a8 01 	lds	r17, 0x01A8
    35f8:	20 91 a9 01 	lds	r18, 0x01A9
    35fc:	30 91 aa 01 	lds	r19, 0x01AA
    3600:	60 27       	eor	r22, r16
    3602:	71 27       	eor	r23, r17
    3604:	82 27       	eor	r24, r18
    3606:	93 27       	eor	r25, r19
}
    3608:	1f 91       	pop	r17
    360a:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    360c:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <layer_state_set>

00003610 <layer_debug>:
}

void layer_debug(void)
{
    3610:	08 95       	ret

00003612 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3612:	cf 92       	push	r12
    3614:	df 92       	push	r13
    3616:	ef 92       	push	r14
    3618:	ff 92       	push	r15
    361a:	0f 93       	push	r16
    361c:	1f 93       	push	r17
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	ec 01       	movw	r28, r24
    action_t action = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3624:	c0 90 ab 01 	lds	r12, 0x01AB
    3628:	d0 90 ac 01 	lds	r13, 0x01AC
    362c:	e0 90 ad 01 	lds	r14, 0x01AD
    3630:	f0 90 ae 01 	lds	r15, 0x01AE
    3634:	80 91 a7 01 	lds	r24, 0x01A7
    3638:	90 91 a8 01 	lds	r25, 0x01A8
    363c:	a0 91 a9 01 	lds	r26, 0x01A9
    3640:	b0 91 aa 01 	lds	r27, 0x01AA
    3644:	c8 2a       	or	r12, r24
    3646:	d9 2a       	or	r13, r25
    3648:	ea 2a       	or	r14, r26
    364a:	fb 2a       	or	r15, r27
    364c:	0f e1       	ldi	r16, 0x1F	; 31
    364e:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3650:	b7 01       	movw	r22, r14
    3652:	a6 01       	movw	r20, r12
    3654:	00 2e       	mov	r0, r16
    3656:	04 c0       	rjmp	.+8      	; 0x3660 <layer_switch_get_action+0x4e>
    3658:	76 95       	lsr	r23
    365a:	67 95       	ror	r22
    365c:	57 95       	ror	r21
    365e:	47 95       	ror	r20
    3660:	0a 94       	dec	r0
    3662:	d2 f7       	brpl	.-12     	; 0x3658 <layer_switch_get_action+0x46>
    3664:	40 ff       	sbrs	r20, 0
    3666:	07 c0       	rjmp	.+14     	; 0x3676 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3668:	be 01       	movw	r22, r28
    366a:	80 2f       	mov	r24, r16
    366c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    3670:	81 30       	cpi	r24, 0x01	; 1
    3672:	91 05       	cpc	r25, r1
    3674:	39 f4       	brne	.+14     	; 0x3684 <layer_switch_get_action+0x72>
    3676:	01 50       	subi	r16, 0x01	; 1
    3678:	11 09       	sbc	r17, r1
    367a:	50 f7       	brcc	.-44     	; 0x3650 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    367c:	be 01       	movw	r22, r28
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3684:	df 91       	pop	r29
    3686:	cf 91       	pop	r28
    3688:	1f 91       	pop	r17
    368a:	0f 91       	pop	r16
    368c:	ff 90       	pop	r15
    368e:	ef 90       	pop	r14
    3690:	df 90       	pop	r13
    3692:	cf 90       	pop	r12
    3694:	08 95       	ret

00003696 <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3696:	40 91 0c 01 	lds	r20, 0x010C
    369a:	50 91 0d 01 	lds	r21, 0x010D
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    36a2:	9f ef       	ldi	r25, 0xFF	; 255
    36a4:	fa 01       	movw	r30, r20
    36a6:	e2 0f       	add	r30, r18
    36a8:	f3 1f       	adc	r31, r19
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    36aa:	62 81       	ldd	r22, Z+2	; 0x02
    36ac:	68 17       	cp	r22, r24
    36ae:	99 f0       	breq	.+38     	; 0x36d6 <add_key+0x40>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    36b0:	9f 3f       	cpi	r25, 0xFF	; 255
    36b2:	19 f4       	brne	.+6      	; 0x36ba <add_key+0x24>
    36b4:	61 11       	cpse	r22, r1
    36b6:	01 c0       	rjmp	.+2      	; 0x36ba <add_key+0x24>
    36b8:	92 2f       	mov	r25, r18
    36ba:	2f 5f       	subi	r18, 0xFF	; 255
    36bc:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    36be:	26 30       	cpi	r18, 0x06	; 6
    36c0:	31 05       	cpc	r19, r1
    36c2:	81 f7       	brne	.-32     	; 0x36a4 <add_key+0xe>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    36c4:	9f 3f       	cpi	r25, 0xFF	; 255
    36c6:	39 f0       	breq	.+14     	; 0x36d6 <add_key+0x40>
            keyboard_report->keys[empty] = code;
    36c8:	fa 01       	movw	r30, r20
    36ca:	e9 0f       	add	r30, r25
    36cc:	f1 1d       	adc	r31, r1
    36ce:	97 fd       	sbrc	r25, 7
    36d0:	fa 95       	dec	r31
    36d2:	82 83       	std	Z+2, r24	; 0x02
    36d4:	08 95       	ret
    36d6:	08 95       	ret

000036d8 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    36d8:	40 91 0c 01 	lds	r20, 0x010C
    36dc:	50 91 0d 01 	lds	r21, 0x010D
    36e0:	20 e0       	ldi	r18, 0x00	; 0
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	fa 01       	movw	r30, r20
    36e6:	e2 0f       	add	r30, r18
    36e8:	f3 1f       	adc	r31, r19
    36ea:	92 81       	ldd	r25, Z+2	; 0x02
    36ec:	98 13       	cpse	r25, r24
    36ee:	01 c0       	rjmp	.+2      	; 0x36f2 <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    36f0:	12 82       	std	Z+2, r1	; 0x02
    36f2:	2f 5f       	subi	r18, 0xFF	; 255
    36f4:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    36f6:	26 30       	cpi	r18, 0x06	; 6
    36f8:	31 05       	cpc	r19, r1
    36fa:	a1 f7       	brne	.-24     	; 0x36e4 <del_key+0xc>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    36fc:	08 95       	ret

000036fe <clear_keys>:

void clear_keys(void)
{
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3702:	e0 91 0c 01 	lds	r30, 0x010C
    3706:	f0 91 0d 01 	lds	r31, 0x010D
    370a:	e8 0f       	add	r30, r24
    370c:	f9 1f       	adc	r31, r25
    370e:	10 82       	st	Z, r1
    3710:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3712:	88 30       	cpi	r24, 0x08	; 8
    3714:	91 05       	cpc	r25, r1
    3716:	a9 f7       	brne	.-22     	; 0x3702 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3718:	08 95       	ret

0000371a <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    371a:	80 91 b9 01 	lds	r24, 0x01B9
    371e:	08 95       	ret

00003720 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3720:	90 91 b9 01 	lds	r25, 0x01B9
    3724:	98 2b       	or	r25, r24
    3726:	90 93 b9 01 	sts	0x01B9, r25
    372a:	08 95       	ret

0000372c <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    372c:	80 95       	com	r24
    372e:	90 91 b9 01 	lds	r25, 0x01B9
    3732:	98 23       	and	r25, r24
    3734:	90 93 b9 01 	sts	0x01B9, r25
    3738:	08 95       	ret

0000373a <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    373a:	80 93 b9 01 	sts	0x01B9, r24
    373e:	08 95       	ret

00003740 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3740:	10 92 b9 01 	sts	0x01B9, r1
    3744:	08 95       	ret

00003746 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3746:	90 91 b8 01 	lds	r25, 0x01B8
    374a:	98 2b       	or	r25, r24
    374c:	90 93 b8 01 	sts	0x01B8, r25
    3750:	08 95       	ret

00003752 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3752:	80 95       	com	r24
    3754:	90 91 b8 01 	lds	r25, 0x01B8
    3758:	98 23       	and	r25, r24
    375a:	90 93 b8 01 	sts	0x01B8, r25
    375e:	08 95       	ret

00003760 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3760:	10 92 b8 01 	sts	0x01B8, r1
    3764:	08 95       	ret

00003766 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3766:	80 93 af 01 	sts	0x01AF, r24
    376a:	08 95       	ret

0000376c <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    376c:	10 92 af 01 	sts	0x01AF, r1
    3770:	08 95       	ret

00003772 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3772:	40 91 0c 01 	lds	r20, 0x010C
    3776:	50 91 0d 01 	lds	r21, 0x010D
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	fa 01       	movw	r30, r20
    3782:	e2 0f       	add	r30, r18
    3784:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3786:	91 81       	ldd	r25, Z+1	; 0x01
    3788:	91 11       	cpse	r25, r1
            cnt++;
    378a:	8f 5f       	subi	r24, 0xFF	; 255
    378c:	2f 5f       	subi	r18, 0xFF	; 255
    378e:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3790:	27 30       	cpi	r18, 0x07	; 7
    3792:	31 05       	cpc	r19, r1
    3794:	a9 f7       	brne	.-22     	; 0x3780 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3796:	08 95       	ret

00003798 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3798:	e0 91 0c 01 	lds	r30, 0x010C
    379c:	f0 91 0d 01 	lds	r31, 0x010D
    37a0:	80 91 b9 01 	lds	r24, 0x01B9
    37a4:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    37a6:	e0 91 0c 01 	lds	r30, 0x010C
    37aa:	f0 91 0d 01 	lds	r31, 0x010D
    37ae:	80 81       	ld	r24, Z
    37b0:	90 91 b8 01 	lds	r25, 0x01B8
    37b4:	89 2b       	or	r24, r25
    37b6:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    37b8:	90 91 af 01 	lds	r25, 0x01AF
    37bc:	99 23       	and	r25, r25
    37be:	61 f0       	breq	.+24     	; 0x37d8 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    37c0:	e0 91 0c 01 	lds	r30, 0x010C
    37c4:	f0 91 0d 01 	lds	r31, 0x010D
    37c8:	80 81       	ld	r24, Z
    37ca:	89 2b       	or	r24, r25
    37cc:	80 83       	st	Z, r24
        if (has_anykey()) {
    37ce:	0e 94 b9 1b 	call	0x3772	; 0x3772 <has_anykey>
    37d2:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    37d4:	10 92 af 01 	sts	0x01AF, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    37d8:	80 91 0c 01 	lds	r24, 0x010C
    37dc:	90 91 0d 01 	lds	r25, 0x010D
    37e0:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <host_keyboard_send>

000037e4 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    37e4:	90 93 35 01 	sts	0x0135, r25
    37e8:	80 93 34 01 	sts	0x0134, r24
    37ec:	08 95       	ret

000037ee <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    37ee:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    37f0:	98 2f       	mov	r25, r24
    37f2:	9c 7c       	andi	r25, 0xCC	; 204
    37f4:	96 95       	lsr	r25
    37f6:	96 95       	lsr	r25
    37f8:	83 73       	andi	r24, 0x33	; 51
    37fa:	44 e0       	ldi	r20, 0x04	; 4
    37fc:	84 9f       	mul	r24, r20
    37fe:	90 01       	movw	r18, r0
    3800:	11 24       	eor	r1, r1
    3802:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3804:	89 2f       	mov	r24, r25
    3806:	8a 7a       	andi	r24, 0xAA	; 170
    3808:	86 95       	lsr	r24
    380a:	95 75       	andi	r25, 0x55	; 85
    380c:	99 0f       	add	r25, r25
    return bits;
}
    380e:	89 2b       	or	r24, r25
    3810:	08 95       	ret

00003812 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3812:	1f 93       	push	r17
    3814:	cf 93       	push	r28
    3816:	df 93       	push	r29
    3818:	1f 92       	push	r1
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    381e:	99 83       	std	Y+1, r25	; 0x01
    3820:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <bitrev>
    3824:	18 2f       	mov	r17, r24
    3826:	99 81       	ldd	r25, Y+1	; 0x01
    3828:	89 2f       	mov	r24, r25
    382a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <bitrev>
    382e:	21 2f       	mov	r18, r17
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	32 2f       	mov	r19, r18
    3834:	22 27       	eor	r18, r18
    return bits;
}
    3836:	a9 01       	movw	r20, r18
    3838:	48 2b       	or	r20, r24
    383a:	ca 01       	movw	r24, r20
    383c:	0f 90       	pop	r0
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	1f 91       	pop	r17
    3844:	08 95       	ret

00003846 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3846:	08 95       	ret

00003848 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	00 d0       	rcall	.+0      	; 0x384e <hook_matrix_change+0x6>
    384e:	00 d0       	rcall	.+0      	; 0x3850 <hook_matrix_change+0x8>
    3850:	1f 92       	push	r1
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	df 91       	pop	r29
    3862:	cf 91       	pop	r28
    3864:	08 95       	ret

00003866 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    3866:	08 95       	ret

00003868 <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    3868:	08 95       	ret

0000386a <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    386a:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <keyboard_set_leds>

0000386e <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    386e:	08 95       	ret

00003870 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3870:	80 91 cf 01 	lds	r24, 0x01CF
    3874:	84 30       	cpi	r24, 0x04	; 4
    3876:	09 f1       	breq	.+66     	; 0x38ba <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3878:	10 92 bb 01 	sts	0x01BB, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    387c:	20 e4       	ldi	r18, 0x40	; 64
    387e:	88 e1       	ldi	r24, 0x18	; 24
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	a8 95       	wdr
    3888:	80 93 60 00 	sts	0x0060, r24
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3892:	83 b7       	in	r24, 0x33	; 51
    3894:	81 7f       	andi	r24, 0xF1	; 241
    3896:	84 60       	ori	r24, 0x04	; 4
    3898:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    389a:	83 b7       	in	r24, 0x33	; 51
    389c:	81 60       	ori	r24, 0x01	; 1
    389e:	83 bf       	out	0x33, r24	; 51
    sei();
    38a0:	78 94       	sei
    sleep_cpu();
    38a2:	88 95       	sleep
    sleep_disable();
    38a4:	83 b7       	in	r24, 0x33	; 51
    38a6:	8e 7f       	andi	r24, 0xFE	; 254
    38a8:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    38aa:	88 e1       	ldi	r24, 0x18	; 24
    38ac:	0f b6       	in	r0, 0x3f	; 63
    38ae:	f8 94       	cli
    38b0:	80 93 60 00 	sts	0x0060, r24
    38b4:	10 92 60 00 	sts	0x0060, r1
    38b8:	0f be       	out	0x3f, r0	; 63
    38ba:	08 95       	ret

000038bc <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    38bc:	cf 93       	push	r28
    matrix_power_up();
    38be:	0e 94 15 11 	call	0x222a	; 0x222a <matrix_power_up>
    matrix_scan();
    38c2:	0e 94 a3 06 	call	0xd46	; 0xd46 <matrix_scan>
    matrix_power_down();
    38c6:	0e 94 16 11 	call	0x222c	; 0x222c <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    38ca:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    38cc:	8c 2f       	mov	r24, r28
    38ce:	0e 94 ac 07 	call	0xf58	; 0xf58 <matrix_get_row>
    38d2:	89 2b       	or	r24, r25
    38d4:	29 f4       	brne	.+10     	; 0x38e0 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    38d6:	cf 5f       	subi	r28, 0xFF	; 255
    38d8:	c6 30       	cpi	r28, 0x06	; 6
    38da:	c1 f7       	brne	.-16     	; 0x38cc <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	01 c0       	rjmp	.+2      	; 0x38e2 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    38e2:	cf 91       	pop	r28
    38e4:	08 95       	ret

000038e6 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    38e6:	0e 94 df 10 	call	0x21be	; 0x21be <matrix_clear>
    clear_keyboard();
    38ea:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <clear_keyboard>

000038ee <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    38ee:	1f 92       	push	r1
    38f0:	0f 92       	push	r0
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	0f 92       	push	r0
    38f6:	11 24       	eor	r1, r1
    38f8:	8f 93       	push	r24
    38fa:	9f 93       	push	r25
    38fc:	af 93       	push	r26
    38fe:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3900:	80 91 bb 01 	lds	r24, 0x01BB
    3904:	81 11       	cpse	r24, r1
    3906:	13 c0       	rjmp	.+38     	; 0x392e <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3908:	80 91 bc 01 	lds	r24, 0x01BC
    390c:	90 91 bd 01 	lds	r25, 0x01BD
    3910:	a0 91 be 01 	lds	r26, 0x01BE
    3914:	b0 91 bf 01 	lds	r27, 0x01BF
    3918:	41 96       	adiw	r24, 0x11	; 17
    391a:	a1 1d       	adc	r26, r1
    391c:	b1 1d       	adc	r27, r1
    391e:	80 93 bc 01 	sts	0x01BC, r24
    3922:	90 93 bd 01 	sts	0x01BD, r25
    3926:	a0 93 be 01 	sts	0x01BE, r26
    392a:	b0 93 bf 01 	sts	0x01BF, r27
            break;
        default:
            ;
    }
}
    392e:	bf 91       	pop	r27
    3930:	af 91       	pop	r26
    3932:	9f 91       	pop	r25
    3934:	8f 91       	pop	r24
    3936:	0f 90       	pop	r0
    3938:	0f be       	out	0x3f, r0	; 63
    393a:	0f 90       	pop	r0
    393c:	1f 90       	pop	r1
    393e:	18 95       	reti

00003940 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3940:	82 e0       	ldi	r24, 0x02	; 2
    3942:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3944:	93 e0       	ldi	r25, 0x03	; 3
    3946:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3948:	9a ef       	ldi	r25, 0xFA	; 250
    394a:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    394c:	80 93 6e 00 	sts	0x006E, r24
    3950:	08 95       	ret

00003952 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3952:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3954:	f8 94       	cli
    t = timer_count;
    3956:	80 91 bc 01 	lds	r24, 0x01BC
    395a:	90 91 bd 01 	lds	r25, 0x01BD
    395e:	a0 91 be 01 	lds	r26, 0x01BE
    3962:	b0 91 bf 01 	lds	r27, 0x01BF
    SREG = sreg;
    3966:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3968:	08 95       	ret

0000396a <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    396a:	2f b7       	in	r18, 0x3f	; 63
    cli();
    396c:	f8 94       	cli
    t = timer_count;
    396e:	60 91 bc 01 	lds	r22, 0x01BC
    3972:	70 91 bd 01 	lds	r23, 0x01BD
    3976:	80 91 be 01 	lds	r24, 0x01BE
    397a:	90 91 bf 01 	lds	r25, 0x01BF
    SREG = sreg;
    397e:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3980:	08 95       	ret

00003982 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3982:	cf 92       	push	r12
    3984:	df 92       	push	r13
    3986:	ef 92       	push	r14
    3988:	ff 92       	push	r15
    398a:	0f 93       	push	r16
    398c:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    398e:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3990:	f8 94       	cli
    t = timer_count;
    3992:	40 91 bc 01 	lds	r20, 0x01BC
    3996:	50 91 bd 01 	lds	r21, 0x01BD
    399a:	60 91 be 01 	lds	r22, 0x01BE
    399e:	70 91 bf 01 	lds	r23, 0x01BF
    SREG = sreg;
    39a2:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    39a4:	6a 01       	movw	r12, r20
    39a6:	7b 01       	movw	r14, r22
    39a8:	ee 24       	eor	r14, r14
    39aa:	ff 24       	eor	r15, r15
    39ac:	8c 01       	movw	r16, r24
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	c0 16       	cp	r12, r16
    39b4:	d1 06       	cpc	r13, r17
    39b6:	e2 06       	cpc	r14, r18
    39b8:	f3 06       	cpc	r15, r19
    39ba:	10 f4       	brcc	.+4      	; 0x39c0 <timer_elapsed+0x3e>
    39bc:	41 50       	subi	r20, 0x01	; 1
    39be:	51 09       	sbc	r21, r1
    39c0:	48 1b       	sub	r20, r24
    39c2:	59 0b       	sbc	r21, r25
}
    39c4:	ca 01       	movw	r24, r20
    39c6:	1f 91       	pop	r17
    39c8:	0f 91       	pop	r16
    39ca:	ff 90       	pop	r15
    39cc:	ef 90       	pop	r14
    39ce:	df 90       	pop	r13
    39d0:	cf 90       	pop	r12
    39d2:	08 95       	ret

000039d4 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    39d4:	1f 92       	push	r1
    39d6:	0f 92       	push	r0
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	0f 92       	push	r0
    39dc:	11 24       	eor	r1, r1
    39de:	8f 93       	push	r24
    39e0:	9f 93       	push	r25
    39e2:	af 93       	push	r26
    39e4:	bf 93       	push	r27
    timer_count++;
    39e6:	80 91 bc 01 	lds	r24, 0x01BC
    39ea:	90 91 bd 01 	lds	r25, 0x01BD
    39ee:	a0 91 be 01 	lds	r26, 0x01BE
    39f2:	b0 91 bf 01 	lds	r27, 0x01BF
    39f6:	01 96       	adiw	r24, 0x01	; 1
    39f8:	a1 1d       	adc	r26, r1
    39fa:	b1 1d       	adc	r27, r1
    39fc:	80 93 bc 01 	sts	0x01BC, r24
    3a00:	90 93 bd 01 	sts	0x01BD, r25
    3a04:	a0 93 be 01 	sts	0x01BE, r26
    3a08:	b0 93 bf 01 	sts	0x01BF, r27
}
    3a0c:	bf 91       	pop	r27
    3a0e:	af 91       	pop	r26
    3a10:	9f 91       	pop	r25
    3a12:	8f 91       	pop	r24
    3a14:	0f 90       	pop	r0
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	0f 90       	pop	r0
    3a1a:	1f 90       	pop	r1
    3a1c:	18 95       	reti

00003a1e <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3a1e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <USB_Disable>
    cli();
    3a22:	f8 94       	cli
    3a24:	2f ef       	ldi	r18, 0xFF	; 255
    3a26:	87 ea       	ldi	r24, 0xA7	; 167
    3a28:	91 e6       	ldi	r25, 0x61	; 97
    3a2a:	21 50       	subi	r18, 0x01	; 1
    3a2c:	80 40       	sbci	r24, 0x00	; 0
    3a2e:	90 40       	sbci	r25, 0x00	; 0
    3a30:	e1 f7       	brne	.-8      	; 0x3a2a <bootloader_jump+0xc>
    3a32:	00 c0       	rjmp	.+0      	; 0x3a34 <bootloader_jump+0x16>
    3a34:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3a36:	87 e0       	ldi	r24, 0x07	; 7
    3a38:	90 eb       	ldi	r25, 0xB0	; 176
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	80 93 d9 01 	sts	0x01D9, r24
    3a40:	90 93 da 01 	sts	0x01DA, r25
    3a44:	a0 93 db 01 	sts	0x01DB, r26
    3a48:	b0 93 dc 01 	sts	0x01DC, r27
    wdt_enable(WDTO_250MS);
    3a4c:	2c e0       	ldi	r18, 0x0C	; 12
    3a4e:	88 e1       	ldi	r24, 0x18	; 24
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	0f b6       	in	r0, 0x3f	; 63
    3a54:	f8 94       	cli
    3a56:	a8 95       	wdr
    3a58:	80 93 60 00 	sts	0x0060, r24
    3a5c:	0f be       	out	0x3f, r0	; 63
    3a5e:	20 93 60 00 	sts	0x0060, r18
    3a62:	ff cf       	rjmp	.-2      	; 0x3a62 <bootloader_jump+0x44>

00003a64 <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3a64:	8d 3b       	cpi	r24, 0xBD	; 189
    3a66:	60 f4       	brcc	.+24     	; 0x3a80 <keycode_to_action+0x1c>
    3a68:	88 3a       	cpi	r24, 0xA8	; 168
    3a6a:	90 f5       	brcc	.+100    	; 0x3ad0 <keycode_to_action+0x6c>
    3a6c:	85 3a       	cpi	r24, 0xA5	; 165
    3a6e:	28 f5       	brcc	.+74     	; 0x3aba <keycode_to_action+0x56>
    3a70:	84 30       	cpi	r24, 0x04	; 4
    3a72:	08 f5       	brcc	.+66     	; 0x3ab6 <keycode_to_action+0x52>
    3a74:	81 30       	cpi	r24, 0x01	; 1
    3a76:	09 f0       	breq	.+2      	; 0x3a7a <keycode_to_action+0x16>
    3a78:	86 c0       	rjmp	.+268    	; 0x3b86 <keycode_to_action+0x122>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3a80:	88 3e       	cpi	r24, 0xE8	; 232
    3a82:	98 f4       	brcc	.+38     	; 0x3aaa <keycode_to_action+0x46>
    3a84:	80 3e       	cpi	r24, 0xE0	; 224
    3a86:	b8 f4       	brcc	.+46     	; 0x3ab6 <keycode_to_action+0x52>
    3a88:	8f 3b       	cpi	r24, 0xBF	; 191
    3a8a:	09 f0       	breq	.+2      	; 0x3a8e <keycode_to_action+0x2a>
    3a8c:	7c c0       	rjmp	.+248    	; 0x3b86 <keycode_to_action+0x122>
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3a8e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <clear_keyboard>
    3a92:	2f ef       	ldi	r18, 0xFF	; 255
    3a94:	80 e7       	ldi	r24, 0x70	; 112
    3a96:	92 e0       	ldi	r25, 0x02	; 2
    3a98:	21 50       	subi	r18, 0x01	; 1
    3a9a:	80 40       	sbci	r24, 0x00	; 0
    3a9c:	90 40       	sbci	r25, 0x00	; 0
    3a9e:	e1 f7       	brne	.-8      	; 0x3a98 <keycode_to_action+0x34>
    3aa0:	00 c0       	rjmp	.+0      	; 0x3aa2 <keycode_to_action+0x3e>
    3aa2:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3aa4:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <bootloader_jump>
    3aa8:	6e c0       	rjmp	.+220    	; 0x3b86 <keycode_to_action+0x122>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3aaa:	80 3f       	cpi	r24, 0xF0	; 240
    3aac:	08 f4       	brcc	.+2      	; 0x3ab0 <keycode_to_action+0x4c>
    3aae:	6b c0       	rjmp	.+214    	; 0x3b86 <keycode_to_action+0x122>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	90 65       	ori	r25, 0x50	; 80
    3ab4:	08 95       	ret
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            return (action_t)ACTION_KEY(keycode);
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	08 95       	ret
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3aba:	85 3a       	cpi	r24, 0xA5	; 165
    3abc:	21 f0       	breq	.+8      	; 0x3ac6 <keycode_to_action+0x62>
    3abe:	86 3a       	cpi	r24, 0xA6	; 166
    3ac0:	21 f4       	brne	.+8      	; 0x3aca <keycode_to_action+0x66>
    3ac2:	32 e8       	ldi	r19, 0x82	; 130
    3ac4:	03 c0       	rjmp	.+6      	; 0x3acc <keycode_to_action+0x68>
    3ac6:	31 e8       	ldi	r19, 0x81	; 129
    3ac8:	01 c0       	rjmp	.+2      	; 0x3acc <keycode_to_action+0x68>
    3aca:	33 e8       	ldi	r19, 0x83	; 131
    3acc:	20 e4       	ldi	r18, 0x40	; 64
    3ace:	58 c0       	rjmp	.+176    	; 0x3b80 <keycode_to_action+0x11c>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3ad0:	88 3a       	cpi	r24, 0xA8	; 168
    3ad2:	51 f1       	breq	.+84     	; 0x3b28 <keycode_to_action+0xc4>
    3ad4:	89 3a       	cpi	r24, 0xA9	; 169
    3ad6:	51 f1       	breq	.+84     	; 0x3b2c <keycode_to_action+0xc8>
    3ad8:	8a 3a       	cpi	r24, 0xAA	; 170
    3ada:	51 f1       	breq	.+84     	; 0x3b30 <keycode_to_action+0xcc>
    3adc:	8b 3a       	cpi	r24, 0xAB	; 171
    3ade:	51 f1       	breq	.+84     	; 0x3b34 <keycode_to_action+0xd0>
    3ae0:	8c 3a       	cpi	r24, 0xAC	; 172
    3ae2:	51 f1       	breq	.+84     	; 0x3b38 <keycode_to_action+0xd4>
    3ae4:	8d 3a       	cpi	r24, 0xAD	; 173
    3ae6:	51 f1       	breq	.+84     	; 0x3b3c <keycode_to_action+0xd8>
    3ae8:	8e 3a       	cpi	r24, 0xAE	; 174
    3aea:	51 f1       	breq	.+84     	; 0x3b40 <keycode_to_action+0xdc>
    3aec:	8f 3a       	cpi	r24, 0xAF	; 175
    3aee:	51 f1       	breq	.+84     	; 0x3b44 <keycode_to_action+0xe0>
    3af0:	81 3b       	cpi	r24, 0xB1	; 177
    3af2:	51 f1       	breq	.+84     	; 0x3b48 <keycode_to_action+0xe4>
    3af4:	80 3b       	cpi	r24, 0xB0	; 176
    3af6:	51 f1       	breq	.+84     	; 0x3b4c <keycode_to_action+0xe8>
    3af8:	82 3b       	cpi	r24, 0xB2	; 178
    3afa:	51 f1       	breq	.+84     	; 0x3b50 <keycode_to_action+0xec>
    3afc:	83 3b       	cpi	r24, 0xB3	; 179
    3afe:	51 f1       	breq	.+84     	; 0x3b54 <keycode_to_action+0xf0>
    3b00:	84 3b       	cpi	r24, 0xB4	; 180
    3b02:	51 f1       	breq	.+84     	; 0x3b58 <keycode_to_action+0xf4>
    3b04:	85 3b       	cpi	r24, 0xB5	; 181
    3b06:	51 f1       	breq	.+84     	; 0x3b5c <keycode_to_action+0xf8>
    3b08:	86 3b       	cpi	r24, 0xB6	; 182
    3b0a:	59 f1       	breq	.+86     	; 0x3b62 <keycode_to_action+0xfe>
    3b0c:	87 3b       	cpi	r24, 0xB7	; 183
    3b0e:	59 f1       	breq	.+86     	; 0x3b66 <keycode_to_action+0x102>
    3b10:	88 3b       	cpi	r24, 0xB8	; 184
    3b12:	59 f1       	breq	.+86     	; 0x3b6a <keycode_to_action+0x106>
    3b14:	89 3b       	cpi	r24, 0xB9	; 185
    3b16:	59 f1       	breq	.+86     	; 0x3b6e <keycode_to_action+0x10a>
    3b18:	8a 3b       	cpi	r24, 0xBA	; 186
    3b1a:	59 f1       	breq	.+86     	; 0x3b72 <keycode_to_action+0x10e>
    3b1c:	8b 3b       	cpi	r24, 0xBB	; 187
    3b1e:	61 f1       	breq	.+88     	; 0x3b78 <keycode_to_action+0x114>
    3b20:	8c 3b       	cpi	r24, 0xBC	; 188
    3b22:	61 f5       	brne	.+88     	; 0x3b7c <keycode_to_action+0x118>
    3b24:	3a e2       	ldi	r19, 0x2A	; 42
    3b26:	26 c0       	rjmp	.+76     	; 0x3b74 <keycode_to_action+0x110>
    3b28:	32 ee       	ldi	r19, 0xE2	; 226
    3b2a:	29 c0       	rjmp	.+82     	; 0x3b7e <keycode_to_action+0x11a>
    3b2c:	39 ee       	ldi	r19, 0xE9	; 233
    3b2e:	27 c0       	rjmp	.+78     	; 0x3b7e <keycode_to_action+0x11a>
    3b30:	3a ee       	ldi	r19, 0xEA	; 234
    3b32:	25 c0       	rjmp	.+74     	; 0x3b7e <keycode_to_action+0x11a>
    3b34:	35 eb       	ldi	r19, 0xB5	; 181
    3b36:	23 c0       	rjmp	.+70     	; 0x3b7e <keycode_to_action+0x11a>
    3b38:	36 eb       	ldi	r19, 0xB6	; 182
    3b3a:	21 c0       	rjmp	.+66     	; 0x3b7e <keycode_to_action+0x11a>
    3b3c:	33 eb       	ldi	r19, 0xB3	; 179
    3b3e:	1f c0       	rjmp	.+62     	; 0x3b7e <keycode_to_action+0x11a>
    3b40:	34 eb       	ldi	r19, 0xB4	; 180
    3b42:	1d c0       	rjmp	.+58     	; 0x3b7e <keycode_to_action+0x11a>
    3b44:	37 eb       	ldi	r19, 0xB7	; 183
    3b46:	1b c0       	rjmp	.+54     	; 0x3b7e <keycode_to_action+0x11a>
    3b48:	3c ec       	ldi	r19, 0xCC	; 204
    3b4a:	19 c0       	rjmp	.+50     	; 0x3b7e <keycode_to_action+0x11a>
    3b4c:	3d ec       	ldi	r19, 0xCD	; 205
    3b4e:	17 c0       	rjmp	.+46     	; 0x3b7e <keycode_to_action+0x11a>
    3b50:	33 e8       	ldi	r19, 0x83	; 131
    3b52:	05 c0       	rjmp	.+10     	; 0x3b5e <keycode_to_action+0xfa>
    3b54:	3a e8       	ldi	r19, 0x8A	; 138
    3b56:	03 c0       	rjmp	.+6      	; 0x3b5e <keycode_to_action+0xfa>
    3b58:	32 e9       	ldi	r19, 0x92	; 146
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <keycode_to_action+0xfa>
    3b5c:	34 e9       	ldi	r19, 0x94	; 148
    3b5e:	25 e4       	ldi	r18, 0x45	; 69
    3b60:	0f c0       	rjmp	.+30     	; 0x3b80 <keycode_to_action+0x11c>
    3b62:	31 e2       	ldi	r19, 0x21	; 33
    3b64:	07 c0       	rjmp	.+14     	; 0x3b74 <keycode_to_action+0x110>
    3b66:	33 e2       	ldi	r19, 0x23	; 35
    3b68:	05 c0       	rjmp	.+10     	; 0x3b74 <keycode_to_action+0x110>
    3b6a:	34 e2       	ldi	r19, 0x24	; 36
    3b6c:	03 c0       	rjmp	.+6      	; 0x3b74 <keycode_to_action+0x110>
    3b6e:	35 e2       	ldi	r19, 0x25	; 37
    3b70:	01 c0       	rjmp	.+2      	; 0x3b74 <keycode_to_action+0x110>
    3b72:	36 e2       	ldi	r19, 0x26	; 38
    3b74:	26 e4       	ldi	r18, 0x46	; 70
    3b76:	04 c0       	rjmp	.+8      	; 0x3b80 <keycode_to_action+0x11c>
    3b78:	37 e2       	ldi	r19, 0x27	; 39
    3b7a:	fc cf       	rjmp	.-8      	; 0x3b74 <keycode_to_action+0x110>
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	24 e4       	ldi	r18, 0x44	; 68
    3b80:	83 2f       	mov	r24, r19
    3b82:	92 2f       	mov	r25, r18
    3b84:	08 95       	ret
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	90 e0       	ldi	r25, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    3b8a:	08 95       	ret

00003b8c <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	08 95       	ret

00003b92 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3b92:	08 95       	ret

00003b94 <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3b94:	9e e0       	ldi	r25, 0x0E	; 14
    3b96:	79 9f       	mul	r23, r25
    3b98:	f0 01       	movw	r30, r0
    3b9a:	11 24       	eor	r1, r1
    3b9c:	94 e5       	ldi	r25, 0x54	; 84
    3b9e:	89 9f       	mul	r24, r25
    3ba0:	e0 0d       	add	r30, r0
    3ba2:	f1 1d       	adc	r31, r1
    3ba4:	11 24       	eor	r1, r1
    3ba6:	e6 0f       	add	r30, r22
    3ba8:	f1 1d       	adc	r31, r1
    3baa:	e2 53       	subi	r30, 0x32	; 50
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    3bb0:	08 95       	ret

00003bb2 <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    3bb2:	e8 2f       	mov	r30, r24
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	ee 0f       	add	r30, r30
    3bb8:	ff 1f       	adc	r31, r31
    3bba:	e4 5b       	subi	r30, 0xB4	; 180
    3bbc:	f0 40       	sbci	r31, 0x00	; 0
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    3bbe:	85 91       	lpm	r24, Z+
    3bc0:	94 91       	lpm	r25, Z
    3bc2:	08 95       	ret

00003bc4 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3bc4:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <keymap_key_to_keycode>
    switch (keycode) {
    3bc8:	80 3e       	cpi	r24, 0xE0	; 224
    3bca:	a8 f4       	brcc	.+42     	; 0x3bf6 <action_for_key+0x32>
    3bcc:	80 3c       	cpi	r24, 0xC0	; 192
    3bce:	00 f5       	brcc	.+64     	; 0x3c10 <action_for_key+0x4c>
    3bd0:	81 33       	cpi	r24, 0x31	; 49
    3bd2:	09 f4       	brne	.+2      	; 0x3bd6 <action_for_key+0x12>
    3bd4:	5c c0       	rjmp	.+184    	; 0x3c8e <action_for_key+0xca>
    3bd6:	38 f4       	brcc	.+14     	; 0x3be6 <action_for_key+0x22>
    3bd8:	89 32       	cpi	r24, 0x29	; 41
    3bda:	09 f4       	brne	.+2      	; 0x3bde <action_for_key+0x1a>
    3bdc:	52 c0       	rjmp	.+164    	; 0x3c82 <action_for_key+0xbe>
    3bde:	8a 32       	cpi	r24, 0x2A	; 42
    3be0:	09 f4       	brne	.+2      	; 0x3be4 <action_for_key+0x20>
    3be2:	5b c0       	rjmp	.+182    	; 0x3c9a <action_for_key+0xd6>
    3be4:	5f c0       	rjmp	.+190    	; 0x3ca4 <action_for_key+0xe0>
    3be6:	89 33       	cpi	r24, 0x39	; 57
    3be8:	b1 f0       	breq	.+44     	; 0x3c16 <action_for_key+0x52>
    3bea:	82 38       	cpi	r24, 0x82	; 130
    3bec:	a1 f0       	breq	.+40     	; 0x3c16 <action_for_key+0x52>
    3bee:	85 33       	cpi	r24, 0x35	; 53
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <action_for_key+0x30>
    3bf2:	41 c0       	rjmp	.+130    	; 0x3c76 <action_for_key+0xb2>
    3bf4:	57 c0       	rjmp	.+174    	; 0x3ca4 <action_for_key+0xe0>
    3bf6:	83 3e       	cpi	r24, 0xE3	; 227
    3bf8:	41 f1       	breq	.+80     	; 0x3c4a <action_for_key+0x86>
    3bfa:	28 f4       	brcc	.+10     	; 0x3c06 <action_for_key+0x42>
    3bfc:	80 3e       	cpi	r24, 0xE0	; 224
    3bfe:	99 f0       	breq	.+38     	; 0x3c26 <action_for_key+0x62>
    3c00:	82 3e       	cpi	r24, 0xE2	; 226
    3c02:	b9 f0       	breq	.+46     	; 0x3c32 <action_for_key+0x6e>
    3c04:	4f c0       	rjmp	.+158    	; 0x3ca4 <action_for_key+0xe0>
    3c06:	86 3e       	cpi	r24, 0xE6	; 230
    3c08:	31 f1       	breq	.+76     	; 0x3c56 <action_for_key+0x92>
    3c0a:	87 3e       	cpi	r24, 0xE7	; 231
    3c0c:	71 f1       	breq	.+92     	; 0x3c6a <action_for_key+0xa6>
    3c0e:	4a c0       	rjmp	.+148    	; 0x3ca4 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3c10:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <keymap_fn_to_action>
    3c14:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3c16:	90 91 d8 01 	lds	r25, 0x01D8
    3c1a:	90 fd       	sbrc	r25, 0
    3c1c:	02 c0       	rjmp	.+4      	; 0x3c22 <action_for_key+0x5e>
    3c1e:	91 ff       	sbrs	r25, 1
    3c20:	41 c0       	rjmp	.+130    	; 0x3ca4 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3c22:	80 ee       	ldi	r24, 0xE0	; 224
    3c24:	3f c0       	rjmp	.+126    	; 0x3ca4 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3c26:	80 91 d8 01 	lds	r24, 0x01D8
    3c2a:	80 ff       	sbrs	r24, 0
    3c2c:	fa cf       	rjmp	.-12     	; 0x3c22 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3c2e:	89 e3       	ldi	r24, 0x39	; 57
    3c30:	39 c0       	rjmp	.+114    	; 0x3ca4 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3c32:	80 91 d8 01 	lds	r24, 0x01D8
    3c36:	82 ff       	sbrs	r24, 2
    3c38:	0c c0       	rjmp	.+24     	; 0x3c52 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3c3a:	80 91 d8 01 	lds	r24, 0x01D8
    3c3e:	84 ff       	sbrs	r24, 4
    3c40:	02 c0       	rjmp	.+4      	; 0x3c46 <action_for_key+0x82>
                    return keycode_to_action(KC_NO);
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	2f c0       	rjmp	.+94     	; 0x3ca4 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3c46:	83 ee       	ldi	r24, 0xE3	; 227
    3c48:	2d c0       	rjmp	.+90     	; 0x3ca4 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3c4a:	80 91 d8 01 	lds	r24, 0x01D8
    3c4e:	82 ff       	sbrs	r24, 2
    3c50:	f4 cf       	rjmp	.-24     	; 0x3c3a <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3c52:	82 ee       	ldi	r24, 0xE2	; 226
    3c54:	27 c0       	rjmp	.+78     	; 0x3ca4 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3c56:	80 91 d8 01 	lds	r24, 0x01D8
    3c5a:	83 ff       	sbrs	r24, 3
    3c5c:	0a c0       	rjmp	.+20     	; 0x3c72 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3c5e:	80 91 d8 01 	lds	r24, 0x01D8
    3c62:	84 fd       	sbrc	r24, 4
    3c64:	ee cf       	rjmp	.-36     	; 0x3c42 <action_for_key+0x7e>
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
    3c66:	87 ee       	ldi	r24, 0xE7	; 231
    3c68:	1d c0       	rjmp	.+58     	; 0x3ca4 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3c6a:	80 91 d8 01 	lds	r24, 0x01D8
    3c6e:	83 ff       	sbrs	r24, 3
    3c70:	f6 cf       	rjmp	.-20     	; 0x3c5e <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(KC_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3c72:	86 ee       	ldi	r24, 0xE6	; 230
    3c74:	17 c0       	rjmp	.+46     	; 0x3ca4 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(KC_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3c76:	80 91 d8 01 	lds	r24, 0x01D8
    3c7a:	85 ff       	sbrs	r24, 5
    3c7c:	06 c0       	rjmp	.+12     	; 0x3c8a <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3c7e:	89 e2       	ldi	r24, 0x29	; 41
    3c80:	11 c0       	rjmp	.+34     	; 0x3ca4 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3c82:	80 91 d8 01 	lds	r24, 0x01D8
    3c86:	85 ff       	sbrs	r24, 5
    3c88:	fa cf       	rjmp	.-12     	; 0x3c7e <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3c8a:	85 e3       	ldi	r24, 0x35	; 53
    3c8c:	0b c0       	rjmp	.+22     	; 0x3ca4 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3c8e:	80 91 d8 01 	lds	r24, 0x01D8
    3c92:	86 ff       	sbrs	r24, 6
    3c94:	06 c0       	rjmp	.+12     	; 0x3ca2 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3c96:	8a e2       	ldi	r24, 0x2A	; 42
    3c98:	05 c0       	rjmp	.+10     	; 0x3ca4 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3c9a:	80 91 d8 01 	lds	r24, 0x01D8
    3c9e:	86 ff       	sbrs	r24, 6
    3ca0:	fa cf       	rjmp	.-12     	; 0x3c96 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3ca2:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3ca4:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <keycode_to_action>
    }
}
    3ca8:	08 95       	ret

00003caa <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3caa:	bf 92       	push	r11
    3cac:	cf 92       	push	r12
    3cae:	df 92       	push	r13
    3cb0:	ef 92       	push	r14
    3cb2:	ff 92       	push	r15
    3cb4:	0f 93       	push	r16
    3cb6:	1f 93       	push	r17
    3cb8:	cf 93       	push	r28
    3cba:	df 93       	push	r29
    3cbc:	8c 01       	movw	r16, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3cbe:	b1 2c       	mov	r11, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3cc0:	ee 24       	eor	r14, r14
    3cc2:	e3 94       	inc	r14
    3cc4:	f1 2c       	mov	r15, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3cc6:	8b 2d       	mov	r24, r11
    3cc8:	0e 94 ac 07 	call	0xf58	; 0xf58 <matrix_get_row>
    3ccc:	6c 01       	movw	r12, r24
    3cce:	c0 e0       	ldi	r28, 0x00	; 0
    3cd0:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3cd2:	97 01       	movw	r18, r14
    3cd4:	0c 2e       	mov	r0, r28
    3cd6:	02 c0       	rjmp	.+4      	; 0x3cdc <scan_key+0x32>
    3cd8:	22 0f       	add	r18, r18
    3cda:	33 1f       	adc	r19, r19
    3cdc:	0a 94       	dec	r0
    3cde:	e2 f7       	brpl	.-8      	; 0x3cd8 <scan_key+0x2e>
    3ce0:	2c 21       	and	r18, r12
    3ce2:	3d 21       	and	r19, r13
    3ce4:	23 2b       	or	r18, r19
    3ce6:	b1 f0       	breq	.+44     	; 0x3d14 <scan_key+0x6a>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3ce8:	6c 2f       	mov	r22, r28
    3cea:	7b 2d       	mov	r23, r11
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <action_for_key>
    3cf2:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3cf4:	80 17       	cp	r24, r16
    3cf6:	91 07       	cpc	r25, r17
    3cf8:	59 f0       	breq	.+22     	; 0x3d10 <scan_key+0x66>
    3cfa:	83 2f       	mov	r24, r19
    3cfc:	80 7e       	andi	r24, 0xE0	; 224
    3cfe:	93 2f       	mov	r25, r19
    3d00:	90 7c       	andi	r25, 0xC0	; 192
    3d02:	11 f0       	breq	.+4      	; 0x3d08 <scan_key+0x5e>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3d04:	80 3a       	cpi	r24, 0xA0	; 160
    3d06:	31 f4       	brne	.+12     	; 0x3d14 <scan_key+0x6a>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    3d08:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3d0a:	20 17       	cp	r18, r16
    3d0c:	31 07       	cpc	r19, r17
    3d0e:	11 f4       	brne	.+4      	; 0x3d14 <scan_key+0x6a>
                     action.key.code == code)) {
                    return true;
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	09 c0       	rjmp	.+18     	; 0x3d26 <scan_key+0x7c>
    3d14:	21 96       	adiw	r28, 0x01	; 1

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3d16:	ce 30       	cpi	r28, 0x0E	; 14
    3d18:	d1 05       	cpc	r29, r1
    3d1a:	d9 f6       	brne	.-74     	; 0x3cd2 <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3d1c:	b3 94       	inc	r11
    3d1e:	86 e0       	ldi	r24, 0x06	; 6
    3d20:	b8 12       	cpse	r11, r24
    3d22:	d1 cf       	rjmp	.-94     	; 0x3cc6 <scan_key+0x1c>
                    return true;
                }
            }
        }
    }
    return false;
    3d24:	80 e0       	ldi	r24, 0x00	; 0
}
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	ff 90       	pop	r15
    3d30:	ef 90       	pop	r14
    3d32:	df 90       	pop	r13
    3d34:	cf 90       	pop	r12
    3d36:	bf 90       	pop	r11
    3d38:	08 95       	ret

00003d3a <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3d3a:	cf 93       	push	r28
    3d3c:	df 93       	push	r29
    3d3e:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3d40:	8c e2       	ldi	r24, 0x2C	; 44
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	0e 94 55 1e 	call	0x3caa	; 0x3caa <scan_key>
    3d48:	88 23       	and	r24, r24
    3d4a:	29 f0       	breq	.+10     	; 0x3d56 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3d4c:	ce 01       	movw	r24, r28
}
    3d4e:	df 91       	pop	r29
    3d50:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3d52:	0c 94 55 1e 	jmp	0x3caa	; 0x3caa <scan_key>
}
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	df 91       	pop	r29
    3d5a:	cf 91       	pop	r28
    3d5c:	08 95       	ret

00003d5e <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3d5e:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3d60:	0e 94 0e 20 	call	0x401c	; 0x401c <eeconfig_is_enabled>
    3d64:	81 11       	cpse	r24, r1
    3d66:	02 c0       	rjmp	.+4      	; 0x3d6c <bootmagic+0xe>
        eeconfig_init();
    3d68:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3d6c:	80 eb       	ldi	r24, 0xB0	; 176
    3d6e:	93 e0       	ldi	r25, 0x03	; 3
    3d70:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3d74:	c5 e6       	ldi	r28, 0x65	; 101
    3d76:	c1 50       	subi	r28, 0x01	; 1
    3d78:	49 f0       	breq	.+18     	; 0x3d8c <bootmagic+0x2e>
    3d7a:	0e 94 a3 06 	call	0xd46	; 0xd46 <matrix_scan>
    3d7e:	8f e3       	ldi	r24, 0x3F	; 63
    3d80:	9c e9       	ldi	r25, 0x9C	; 156
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	f1 f7       	brne	.-4      	; 0x3d82 <bootmagic+0x24>
    3d86:	00 c0       	rjmp	.+0      	; 0x3d88 <bootmagic+0x2a>
    3d88:	00 00       	nop
    3d8a:	f5 cf       	rjmp	.-22     	; 0x3d76 <bootmagic+0x18>
    print("done.\n");
    3d8c:	89 ea       	ldi	r24, 0xA9	; 169
    3d8e:	93 e0       	ldi	r25, 0x03	; 3
    3d90:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3d94:	89 e2       	ldi	r24, 0x29	; 41
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3d9c:	81 11       	cpse	r24, r1
    3d9e:	22 c1       	rjmp	.+580    	; 0x3fe4 <bootmagic+0x286>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3da0:	8a e2       	ldi	r24, 0x2A	; 42
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3da8:	81 11       	cpse	r24, r1
        eeconfig_init();
    3daa:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3dae:	85 e0       	ldi	r24, 0x05	; 5
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3db6:	81 11       	cpse	r24, r1
        bootloader_jump();
    3db8:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    3dbc:	0e 94 37 1c 	call	0x386e	; 0x386e <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3dc0:	0e 94 19 20 	call	0x4032	; 0x4032 <eeconfig_read_debug>
    3dc4:	80 93 ba 01 	sts	0x01BA, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3dc8:	87 e0       	ldi	r24, 0x07	; 7
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3dd0:	88 23       	and	r24, r24
    3dd2:	b1 f1       	breq	.+108    	; 0x3e40 <bootmagic+0xe2>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3dd4:	8b e1       	ldi	r24, 0x1B	; 27
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3ddc:	88 23       	and	r24, r24
    3dde:	51 f0       	breq	.+20     	; 0x3df4 <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    3de0:	90 91 ba 01 	lds	r25, 0x01BA
    3de4:	91 fb       	bst	r25, 1
    3de6:	88 27       	eor	r24, r24
    3de8:	80 f9       	bld	r24, 0
    3dea:	21 e0       	ldi	r18, 0x01	; 1
    3dec:	82 27       	eor	r24, r18
    3dee:	80 fb       	bst	r24, 0
    3df0:	91 f9       	bld	r25, 1
    3df2:	24 c0       	rjmp	.+72     	; 0x3e3c <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3df4:	8e e0       	ldi	r24, 0x0E	; 14
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3dfc:	88 23       	and	r24, r24
    3dfe:	51 f0       	breq	.+20     	; 0x3e14 <bootmagic+0xb6>
            debug_config.keyboard = !debug_config.keyboard;
    3e00:	90 91 ba 01 	lds	r25, 0x01BA
    3e04:	92 fb       	bst	r25, 2
    3e06:	88 27       	eor	r24, r24
    3e08:	80 f9       	bld	r24, 0
    3e0a:	21 e0       	ldi	r18, 0x01	; 1
    3e0c:	82 27       	eor	r24, r18
    3e0e:	80 fb       	bst	r24, 0
    3e10:	92 f9       	bld	r25, 2
    3e12:	14 c0       	rjmp	.+40     	; 0x3e3c <bootmagic+0xde>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3e14:	80 e1       	ldi	r24, 0x10	; 16
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3e1c:	90 91 ba 01 	lds	r25, 0x01BA
    3e20:	88 23       	and	r24, r24
    3e22:	41 f0       	breq	.+16     	; 0x3e34 <bootmagic+0xd6>
            debug_config.mouse = !debug_config.mouse;
    3e24:	93 fb       	bst	r25, 3
    3e26:	88 27       	eor	r24, r24
    3e28:	80 f9       	bld	r24, 0
    3e2a:	21 e0       	ldi	r18, 0x01	; 1
    3e2c:	82 27       	eor	r24, r18
    3e2e:	80 fb       	bst	r24, 0
    3e30:	93 f9       	bld	r25, 3
    3e32:	04 c0       	rjmp	.+8      	; 0x3e3c <bootmagic+0xde>
        } else {
            debug_config.enable = !debug_config.enable;
    3e34:	89 2f       	mov	r24, r25
    3e36:	80 95       	com	r24
    3e38:	80 fb       	bst	r24, 0
    3e3a:	90 f9       	bld	r25, 0
    3e3c:	90 93 ba 01 	sts	0x01BA, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3e40:	80 91 ba 01 	lds	r24, 0x01BA
    3e44:	0e 94 1d 20 	call	0x403a	; 0x403a <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3e48:	0e 94 2b 20 	call	0x4056	; 0x4056 <eeconfig_read_keymap>
    3e4c:	80 93 d8 01 	sts	0x01D8, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3e50:	80 ee       	ldi	r24, 0xE0	; 224
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3e58:	88 23       	and	r24, r24
    3e5a:	41 f0       	breq	.+16     	; 0x3e6c <bootmagic+0x10e>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3e5c:	80 91 d8 01 	lds	r24, 0x01D8
    3e60:	98 2f       	mov	r25, r24
    3e62:	90 95       	com	r25
    3e64:	90 fb       	bst	r25, 0
    3e66:	80 f9       	bld	r24, 0
    3e68:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3e6c:	89 e3       	ldi	r24, 0x39	; 57
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3e74:	88 23       	and	r24, r24
    3e76:	59 f0       	breq	.+22     	; 0x3e8e <bootmagic+0x130>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3e78:	90 91 d8 01 	lds	r25, 0x01D8
    3e7c:	91 fb       	bst	r25, 1
    3e7e:	88 27       	eor	r24, r24
    3e80:	80 f9       	bld	r24, 0
    3e82:	21 e0       	ldi	r18, 0x01	; 1
    3e84:	82 27       	eor	r24, r18
    3e86:	80 fb       	bst	r24, 0
    3e88:	91 f9       	bld	r25, 1
    3e8a:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3e8e:	82 ee       	ldi	r24, 0xE2	; 226
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3e96:	88 23       	and	r24, r24
    3e98:	59 f0       	breq	.+22     	; 0x3eb0 <bootmagic+0x152>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3e9a:	90 91 d8 01 	lds	r25, 0x01D8
    3e9e:	92 fb       	bst	r25, 2
    3ea0:	88 27       	eor	r24, r24
    3ea2:	80 f9       	bld	r24, 0
    3ea4:	21 e0       	ldi	r18, 0x01	; 1
    3ea6:	82 27       	eor	r24, r18
    3ea8:	80 fb       	bst	r24, 0
    3eaa:	92 f9       	bld	r25, 2
    3eac:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3eb0:	86 ee       	ldi	r24, 0xE6	; 230
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3eb8:	88 23       	and	r24, r24
    3eba:	59 f0       	breq	.+22     	; 0x3ed2 <bootmagic+0x174>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3ebc:	90 91 d8 01 	lds	r25, 0x01D8
    3ec0:	93 fb       	bst	r25, 3
    3ec2:	88 27       	eor	r24, r24
    3ec4:	80 f9       	bld	r24, 0
    3ec6:	21 e0       	ldi	r18, 0x01	; 1
    3ec8:	82 27       	eor	r24, r18
    3eca:	80 fb       	bst	r24, 0
    3ecc:	93 f9       	bld	r25, 3
    3ece:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    3ed2:	83 ee       	ldi	r24, 0xE3	; 227
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3eda:	88 23       	and	r24, r24
    3edc:	59 f0       	breq	.+22     	; 0x3ef4 <bootmagic+0x196>
        keymap_config.no_gui = !keymap_config.no_gui;
    3ede:	90 91 d8 01 	lds	r25, 0x01D8
    3ee2:	94 fb       	bst	r25, 4
    3ee4:	88 27       	eor	r24, r24
    3ee6:	80 f9       	bld	r24, 0
    3ee8:	21 e0       	ldi	r18, 0x01	; 1
    3eea:	82 27       	eor	r24, r18
    3eec:	80 fb       	bst	r24, 0
    3eee:	94 f9       	bld	r25, 4
    3ef0:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    3ef4:	85 e3       	ldi	r24, 0x35	; 53
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3efc:	88 23       	and	r24, r24
    3efe:	59 f0       	breq	.+22     	; 0x3f16 <bootmagic+0x1b8>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    3f00:	90 91 d8 01 	lds	r25, 0x01D8
    3f04:	95 fb       	bst	r25, 5
    3f06:	88 27       	eor	r24, r24
    3f08:	80 f9       	bld	r24, 0
    3f0a:	21 e0       	ldi	r18, 0x01	; 1
    3f0c:	82 27       	eor	r24, r18
    3f0e:	80 fb       	bst	r24, 0
    3f10:	95 f9       	bld	r25, 5
    3f12:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    3f16:	81 e3       	ldi	r24, 0x31	; 49
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3f1e:	88 23       	and	r24, r24
    3f20:	59 f0       	breq	.+22     	; 0x3f38 <bootmagic+0x1da>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    3f22:	90 91 d8 01 	lds	r25, 0x01D8
    3f26:	96 fb       	bst	r25, 6
    3f28:	88 27       	eor	r24, r24
    3f2a:	80 f9       	bld	r24, 0
    3f2c:	21 e0       	ldi	r18, 0x01	; 1
    3f2e:	82 27       	eor	r24, r18
    3f30:	80 fb       	bst	r24, 0
    3f32:	96 f9       	bld	r25, 6
    3f34:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    3f38:	81 e1       	ldi	r24, 0x11	; 17
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3f40:	88 23       	and	r24, r24
    3f42:	59 f0       	breq	.+22     	; 0x3f5a <bootmagic+0x1fc>
        keymap_config.nkro = !keymap_config.nkro;
    3f44:	90 91 d8 01 	lds	r25, 0x01D8
    3f48:	97 fb       	bst	r25, 7
    3f4a:	88 27       	eor	r24, r24
    3f4c:	80 f9       	bld	r24, 0
    3f4e:	21 e0       	ldi	r18, 0x01	; 1
    3f50:	82 27       	eor	r24, r18
    3f52:	80 fb       	bst	r24, 0
    3f54:	97 f9       	bld	r25, 7
    3f56:	90 93 d8 01 	sts	0x01D8, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    3f5a:	80 91 d8 01 	lds	r24, 0x01D8
    3f5e:	0e 94 2f 20 	call	0x405e	; 0x405e <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    3f62:	87 e2       	ldi	r24, 0x27	; 39
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3f6a:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    3f6c:	8e e1       	ldi	r24, 0x1E	; 30
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3f74:	81 11       	cpse	r24, r1
    3f76:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    3f78:	8f e1       	ldi	r24, 0x1F	; 31
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3f80:	81 11       	cpse	r24, r1
    3f82:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    3f84:	80 e2       	ldi	r24, 0x20	; 32
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3f8c:	81 11       	cpse	r24, r1
    3f8e:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    3f90:	81 e2       	ldi	r24, 0x21	; 33
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3f98:	81 11       	cpse	r24, r1
    3f9a:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    3f9c:	82 e2       	ldi	r24, 0x22	; 34
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3fa4:	81 11       	cpse	r24, r1
    3fa6:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    3fa8:	83 e2       	ldi	r24, 0x23	; 35
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3fb0:	81 11       	cpse	r24, r1
    3fb2:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    3fb4:	84 e2       	ldi	r24, 0x24	; 36
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <bootmagic_scan_key>
    3fbc:	88 23       	and	r24, r24
    3fbe:	11 f0       	breq	.+4      	; 0x3fc4 <bootmagic+0x266>
    3fc0:	c0 68       	ori	r28, 0x80	; 128
    3fc2:	02 c0       	rjmp	.+4      	; 0x3fc8 <bootmagic+0x26a>
    if (default_layer) {
    3fc4:	cc 23       	and	r28, r28
    3fc6:	29 f0       	breq	.+10     	; 0x3fd2 <bootmagic+0x274>
        eeconfig_write_default_layer(default_layer);
    3fc8:	8c 2f       	mov	r24, r28
    3fca:	0e 94 26 20 	call	0x404c	; 0x404c <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    3fce:	6c 2f       	mov	r22, r28
    3fd0:	03 c0       	rjmp	.+6      	; 0x3fd8 <bootmagic+0x27a>
    } else {
        default_layer = eeconfig_read_default_layer();
    3fd2:	0e 94 22 20 	call	0x4044	; 0x4044 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    3fd6:	68 2f       	mov	r22, r24
    3fd8:	70 e0       	ldi	r23, 0x00	; 0
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3fde:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    3fe0:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <default_layer_set>
    }
}
    3fe4:	cf 91       	pop	r28
    3fe6:	08 95       	ret

00003fe8 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    3fe8:	6d ee       	ldi	r22, 0xED	; 237
    3fea:	7e ef       	ldi	r23, 0xFE	; 254
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	0e 94 4f 29 	call	0x529e	; 0x529e <__eewr_word_usb1286>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    3ff4:	60 e0       	ldi	r22, 0x00	; 0
    3ff6:	82 e0       	ldi	r24, 0x02	; 2
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	0e 94 41 29 	call	0x5282	; 0x5282 <__eewr_byte_usb1286>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    3ffe:	60 e0       	ldi	r22, 0x00	; 0
    4000:	83 e0       	ldi	r24, 0x03	; 3
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	0e 94 41 29 	call	0x5282	; 0x5282 <__eewr_byte_usb1286>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4008:	60 e0       	ldi	r22, 0x00	; 0
    400a:	84 e0       	ldi	r24, 0x04	; 4
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 41 29 	call	0x5282	; 0x5282 <__eewr_byte_usb1286>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4012:	60 e0       	ldi	r22, 0x00	; 0
    4014:	85 e0       	ldi	r24, 0x05	; 5
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	0c 94 41 29 	jmp	0x5282	; 0x5282 <__eewr_byte_usb1286>

0000401c <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	0e 94 3b 29 	call	0x5276	; 0x5276 <__eerd_word_usb1286>
    4024:	21 e0       	ldi	r18, 0x01	; 1
    4026:	8d 3e       	cpi	r24, 0xED	; 237
    4028:	9e 4f       	sbci	r25, 0xFE	; 254
    402a:	09 f0       	breq	.+2      	; 0x402e <eeconfig_is_enabled+0x12>
    402c:	20 e0       	ldi	r18, 0x00	; 0
}
    402e:	82 2f       	mov	r24, r18
    4030:	08 95       	ret

00004032 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4032:	82 e0       	ldi	r24, 0x02	; 2
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0c 94 33 29 	jmp	0x5266	; 0x5266 <__eerd_byte_usb1286>

0000403a <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    403a:	68 2f       	mov	r22, r24
    403c:	82 e0       	ldi	r24, 0x02	; 2
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	0c 94 41 29 	jmp	0x5282	; 0x5282 <__eewr_byte_usb1286>

00004044 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4044:	83 e0       	ldi	r24, 0x03	; 3
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	0c 94 33 29 	jmp	0x5266	; 0x5266 <__eerd_byte_usb1286>

0000404c <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    404c:	68 2f       	mov	r22, r24
    404e:	83 e0       	ldi	r24, 0x03	; 3
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	0c 94 41 29 	jmp	0x5282	; 0x5282 <__eewr_byte_usb1286>

00004056 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4056:	84 e0       	ldi	r24, 0x04	; 4
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	0c 94 33 29 	jmp	0x5266	; 0x5266 <__eerd_byte_usb1286>

0000405e <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    405e:	68 2f       	mov	r22, r24
    4060:	84 e0       	ldi	r24, 0x04	; 4
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	0c 94 41 29 	jmp	0x5282	; 0x5282 <__eewr_byte_usb1286>

00004068 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4068:	80 91 c2 01 	lds	r24, 0x01C2
    406c:	80 ff       	sbrs	r24, 0
    406e:	0b c0       	rjmp	.+22     	; 0x4086 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4070:	60 91 11 01 	lds	r22, 0x0111
    4074:	85 e0       	ldi	r24, 0x05	; 5
    4076:	68 9f       	mul	r22, r24
    4078:	b0 01       	movw	r22, r0
    407a:	11 24       	eor	r1, r1
    407c:	75 95       	asr	r23
    407e:	67 95       	ror	r22
    4080:	75 95       	asr	r23
    4082:	67 95       	ror	r22
    4084:	2a c0       	rjmp	.+84     	; 0x40da <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4086:	81 ff       	sbrs	r24, 1
    4088:	09 c0       	rjmp	.+18     	; 0x409c <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    408a:	60 91 11 01 	lds	r22, 0x0111
    408e:	85 e0       	ldi	r24, 0x05	; 5
    4090:	68 9f       	mul	r22, r24
    4092:	b0 01       	movw	r22, r0
    4094:	11 24       	eor	r1, r1
    4096:	75 95       	asr	r23
    4098:	67 95       	ror	r22
    409a:	1f c0       	rjmp	.+62     	; 0x40da <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    409c:	82 ff       	sbrs	r24, 2
    409e:	07 c0       	rjmp	.+14     	; 0x40ae <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    40a0:	60 91 11 01 	lds	r22, 0x0111
    40a4:	85 e0       	ldi	r24, 0x05	; 5
    40a6:	68 9f       	mul	r22, r24
    40a8:	b0 01       	movw	r22, r0
    40aa:	11 24       	eor	r1, r1
    40ac:	16 c0       	rjmp	.+44     	; 0x40da <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    40ae:	40 91 c3 01 	lds	r20, 0x01C3
    40b2:	44 23       	and	r20, r20
    40b4:	c9 f0       	breq	.+50     	; 0x40e8 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    40b6:	60 91 10 01 	lds	r22, 0x0110
    40ba:	46 17       	cp	r20, r22
    40bc:	88 f7       	brcc	.-30     	; 0x40a0 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    40be:	20 91 11 01 	lds	r18, 0x0111
    40c2:	85 e0       	ldi	r24, 0x05	; 5
    40c4:	28 9f       	mul	r18, r24
    40c6:	90 01       	movw	r18, r0
    40c8:	11 24       	eor	r1, r1
    40ca:	42 9f       	mul	r20, r18
    40cc:	c0 01       	movw	r24, r0
    40ce:	43 9f       	mul	r20, r19
    40d0:	90 0d       	add	r25, r0
    40d2:	11 24       	eor	r1, r1
    40d4:	70 e0       	ldi	r23, 0x00	; 0
    40d6:	0e 94 05 29 	call	0x520a	; 0x520a <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    40da:	60 38       	cpi	r22, 0x80	; 128
    40dc:	71 05       	cpc	r23, r1
    40de:	40 f4       	brcc	.+16     	; 0x40f0 <move_unit+0x88>
    40e0:	61 15       	cp	r22, r1
    40e2:	71 05       	cpc	r23, r1
    40e4:	39 f0       	breq	.+14     	; 0x40f4 <move_unit+0x8c>
    40e6:	02 c0       	rjmp	.+4      	; 0x40ec <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    40e8:	65 e0       	ldi	r22, 0x05	; 5
    40ea:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    40ec:	86 2f       	mov	r24, r22
    40ee:	08 95       	ret
    40f0:	8f e7       	ldi	r24, 0x7F	; 127
    40f2:	08 95       	ret
    40f4:	81 e0       	ldi	r24, 0x01	; 1
}
    40f6:	08 95       	ret

000040f8 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    40f8:	80 91 c2 01 	lds	r24, 0x01C2
    40fc:	80 ff       	sbrs	r24, 0
    40fe:	08 c0       	rjmp	.+16     	; 0x4110 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4100:	60 91 0f 01 	lds	r22, 0x010F
    4104:	70 e0       	ldi	r23, 0x00	; 0
    4106:	75 95       	asr	r23
    4108:	67 95       	ror	r22
    410a:	75 95       	asr	r23
    410c:	67 95       	ror	r22
    410e:	21 c0       	rjmp	.+66     	; 0x4152 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4110:	81 ff       	sbrs	r24, 1
    4112:	06 c0       	rjmp	.+12     	; 0x4120 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4114:	60 91 0f 01 	lds	r22, 0x010F
    4118:	70 e0       	ldi	r23, 0x00	; 0
    411a:	75 95       	asr	r23
    411c:	67 95       	ror	r22
    411e:	19 c0       	rjmp	.+50     	; 0x4152 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4120:	82 ff       	sbrs	r24, 2
    4122:	04 c0       	rjmp	.+8      	; 0x412c <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4124:	60 91 0f 01 	lds	r22, 0x010F
    4128:	70 e0       	ldi	r23, 0x00	; 0
    412a:	10 c0       	rjmp	.+32     	; 0x414c <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    412c:	80 91 c3 01 	lds	r24, 0x01C3
    4130:	88 23       	and	r24, r24
    4132:	c1 f0       	breq	.+48     	; 0x4164 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4134:	60 91 0e 01 	lds	r22, 0x010E
    4138:	86 17       	cp	r24, r22
    413a:	a0 f7       	brcc	.-24     	; 0x4124 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    413c:	90 91 0f 01 	lds	r25, 0x010F
    4140:	98 9f       	mul	r25, r24
    4142:	c0 01       	movw	r24, r0
    4144:	11 24       	eor	r1, r1
    4146:	70 e0       	ldi	r23, 0x00	; 0
    4148:	0e 94 05 29 	call	0x520a	; 0x520a <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    414c:	60 38       	cpi	r22, 0x80	; 128
    414e:	71 05       	cpc	r23, r1
    4150:	28 f4       	brcc	.+10     	; 0x415c <wheel_unit+0x64>
    4152:	61 15       	cp	r22, r1
    4154:	71 05       	cpc	r23, r1
    4156:	21 f0       	breq	.+8      	; 0x4160 <wheel_unit+0x68>
    4158:	86 2f       	mov	r24, r22
    415a:	08 95       	ret
    415c:	8f e7       	ldi	r24, 0x7F	; 127
    415e:	08 95       	ret
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4164:	61 e0       	ldi	r22, 0x01	; 1
    4166:	70 e0       	ldi	r23, 0x00	; 0
    4168:	f4 cf       	rjmp	.-24     	; 0x4152 <wheel_unit+0x5a>

0000416a <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    416a:	80 3f       	cpi	r24, 0xF0	; 240
    416c:	21 f4       	brne	.+8      	; 0x4176 <mousekey_on+0xc>
    416e:	0e 94 34 20 	call	0x4068	; 0x4068 <move_unit>
    4172:	81 95       	neg	r24
    4174:	04 c0       	rjmp	.+8      	; 0x417e <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4176:	81 3f       	cpi	r24, 0xF1	; 241
    4178:	29 f4       	brne	.+10     	; 0x4184 <mousekey_on+0x1a>
    417a:	0e 94 34 20 	call	0x4068	; 0x4068 <move_unit>
    417e:	80 93 c6 01 	sts	0x01C6, r24
    4182:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4184:	82 3f       	cpi	r24, 0xF2	; 242
    4186:	21 f4       	brne	.+8      	; 0x4190 <mousekey_on+0x26>
    4188:	0e 94 34 20 	call	0x4068	; 0x4068 <move_unit>
    418c:	81 95       	neg	r24
    418e:	04 c0       	rjmp	.+8      	; 0x4198 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4190:	83 3f       	cpi	r24, 0xF3	; 243
    4192:	29 f4       	brne	.+10     	; 0x419e <mousekey_on+0x34>
    4194:	0e 94 34 20 	call	0x4068	; 0x4068 <move_unit>
    4198:	80 93 c5 01 	sts	0x01C5, r24
    419c:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    419e:	89 3f       	cpi	r24, 0xF9	; 249
    41a0:	19 f4       	brne	.+6      	; 0x41a8 <mousekey_on+0x3e>
    41a2:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <wheel_unit>
    41a6:	05 c0       	rjmp	.+10     	; 0x41b2 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    41a8:	8a 3f       	cpi	r24, 0xFA	; 250
    41aa:	31 f4       	brne	.+12     	; 0x41b8 <mousekey_on+0x4e>
    41ac:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <wheel_unit>
    41b0:	81 95       	neg	r24
    41b2:	80 93 c7 01 	sts	0x01C7, r24
    41b6:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    41b8:	8b 3f       	cpi	r24, 0xFB	; 251
    41ba:	21 f4       	brne	.+8      	; 0x41c4 <mousekey_on+0x5a>
    41bc:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <wheel_unit>
    41c0:	81 95       	neg	r24
    41c2:	04 c0       	rjmp	.+8      	; 0x41cc <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    41c4:	8c 3f       	cpi	r24, 0xFC	; 252
    41c6:	29 f4       	brne	.+10     	; 0x41d2 <mousekey_on+0x68>
    41c8:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <wheel_unit>
    41cc:	80 93 c8 01 	sts	0x01C8, r24
    41d0:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    41d2:	84 3f       	cpi	r24, 0xF4	; 244
    41d4:	21 f4       	brne	.+8      	; 0x41de <mousekey_on+0x74>
    41d6:	80 91 c4 01 	lds	r24, 0x01C4
    41da:	81 60       	ori	r24, 0x01	; 1
    41dc:	17 c0       	rjmp	.+46     	; 0x420c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    41de:	85 3f       	cpi	r24, 0xF5	; 245
    41e0:	21 f4       	brne	.+8      	; 0x41ea <mousekey_on+0x80>
    41e2:	80 91 c4 01 	lds	r24, 0x01C4
    41e6:	82 60       	ori	r24, 0x02	; 2
    41e8:	11 c0       	rjmp	.+34     	; 0x420c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    41ea:	86 3f       	cpi	r24, 0xF6	; 246
    41ec:	21 f4       	brne	.+8      	; 0x41f6 <mousekey_on+0x8c>
    41ee:	80 91 c4 01 	lds	r24, 0x01C4
    41f2:	84 60       	ori	r24, 0x04	; 4
    41f4:	0b c0       	rjmp	.+22     	; 0x420c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    41f6:	87 3f       	cpi	r24, 0xF7	; 247
    41f8:	21 f4       	brne	.+8      	; 0x4202 <mousekey_on+0x98>
    41fa:	80 91 c4 01 	lds	r24, 0x01C4
    41fe:	88 60       	ori	r24, 0x08	; 8
    4200:	05 c0       	rjmp	.+10     	; 0x420c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4202:	88 3f       	cpi	r24, 0xF8	; 248
    4204:	31 f4       	brne	.+12     	; 0x4212 <mousekey_on+0xa8>
    4206:	80 91 c4 01 	lds	r24, 0x01C4
    420a:	80 61       	ori	r24, 0x10	; 16
    420c:	80 93 c4 01 	sts	0x01C4, r24
    4210:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4212:	8d 3f       	cpi	r24, 0xFD	; 253
    4214:	21 f4       	brne	.+8      	; 0x421e <mousekey_on+0xb4>
    4216:	80 91 c2 01 	lds	r24, 0x01C2
    421a:	81 60       	ori	r24, 0x01	; 1
    421c:	0b c0       	rjmp	.+22     	; 0x4234 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    421e:	8e 3f       	cpi	r24, 0xFE	; 254
    4220:	21 f4       	brne	.+8      	; 0x422a <mousekey_on+0xc0>
    4222:	80 91 c2 01 	lds	r24, 0x01C2
    4226:	82 60       	ori	r24, 0x02	; 2
    4228:	05 c0       	rjmp	.+10     	; 0x4234 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    422a:	8f 3f       	cpi	r24, 0xFF	; 255
    422c:	29 f4       	brne	.+10     	; 0x4238 <mousekey_on+0xce>
    422e:	80 91 c2 01 	lds	r24, 0x01C2
    4232:	84 60       	ori	r24, 0x04	; 4
    4234:	80 93 c2 01 	sts	0x01C2, r24
    4238:	08 95       	ret

0000423a <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    423a:	80 3f       	cpi	r24, 0xF0	; 240
    423c:	39 f4       	brne	.+14     	; 0x424c <mousekey_off+0x12>
    423e:	80 91 c6 01 	lds	r24, 0x01C6
    4242:	87 ff       	sbrs	r24, 7
    4244:	6c c0       	rjmp	.+216    	; 0x431e <mousekey_off+0xe4>
    4246:	10 92 c6 01 	sts	0x01C6, r1
    424a:	69 c0       	rjmp	.+210    	; 0x431e <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    424c:	81 3f       	cpi	r24, 0xF1	; 241
    424e:	29 f4       	brne	.+10     	; 0x425a <mousekey_off+0x20>
    4250:	80 91 c6 01 	lds	r24, 0x01C6
    4254:	18 16       	cp	r1, r24
    4256:	bc f3       	brlt	.-18     	; 0x4246 <mousekey_off+0xc>
    4258:	62 c0       	rjmp	.+196    	; 0x431e <mousekey_off+0xe4>
    425a:	90 91 c5 01 	lds	r25, 0x01C5
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    425e:	82 3f       	cpi	r24, 0xF2	; 242
    4260:	29 f4       	brne	.+10     	; 0x426c <mousekey_off+0x32>
    4262:	97 ff       	sbrs	r25, 7
    4264:	5c c0       	rjmp	.+184    	; 0x431e <mousekey_off+0xe4>
    4266:	10 92 c5 01 	sts	0x01C5, r1
    426a:	59 c0       	rjmp	.+178    	; 0x431e <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    426c:	83 3f       	cpi	r24, 0xF3	; 243
    426e:	19 f4       	brne	.+6      	; 0x4276 <mousekey_off+0x3c>
    4270:	19 16       	cp	r1, r25
    4272:	cc f3       	brlt	.-14     	; 0x4266 <mousekey_off+0x2c>
    4274:	54 c0       	rjmp	.+168    	; 0x431e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4276:	89 3f       	cpi	r24, 0xF9	; 249
    4278:	41 f4       	brne	.+16     	; 0x428a <mousekey_off+0x50>
    427a:	80 91 c7 01 	lds	r24, 0x01C7
    427e:	18 16       	cp	r1, r24
    4280:	0c f0       	brlt	.+2      	; 0x4284 <mousekey_off+0x4a>
    4282:	4d c0       	rjmp	.+154    	; 0x431e <mousekey_off+0xe4>
    4284:	10 92 c7 01 	sts	0x01C7, r1
    4288:	4a c0       	rjmp	.+148    	; 0x431e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    428a:	8a 3f       	cpi	r24, 0xFA	; 250
    428c:	29 f4       	brne	.+10     	; 0x4298 <mousekey_off+0x5e>
    428e:	80 91 c7 01 	lds	r24, 0x01C7
    4292:	87 ff       	sbrs	r24, 7
    4294:	44 c0       	rjmp	.+136    	; 0x431e <mousekey_off+0xe4>
    4296:	f6 cf       	rjmp	.-20     	; 0x4284 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4298:	8b 3f       	cpi	r24, 0xFB	; 251
    429a:	39 f4       	brne	.+14     	; 0x42aa <mousekey_off+0x70>
    429c:	80 91 c8 01 	lds	r24, 0x01C8
    42a0:	87 ff       	sbrs	r24, 7
    42a2:	3d c0       	rjmp	.+122    	; 0x431e <mousekey_off+0xe4>
    42a4:	10 92 c8 01 	sts	0x01C8, r1
    42a8:	3a c0       	rjmp	.+116    	; 0x431e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    42aa:	8c 3f       	cpi	r24, 0xFC	; 252
    42ac:	29 f4       	brne	.+10     	; 0x42b8 <mousekey_off+0x7e>
    42ae:	80 91 c8 01 	lds	r24, 0x01C8
    42b2:	18 16       	cp	r1, r24
    42b4:	bc f3       	brlt	.-18     	; 0x42a4 <mousekey_off+0x6a>
    42b6:	33 c0       	rjmp	.+102    	; 0x431e <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    42b8:	84 3f       	cpi	r24, 0xF4	; 244
    42ba:	21 f4       	brne	.+8      	; 0x42c4 <mousekey_off+0x8a>
    42bc:	80 91 c4 01 	lds	r24, 0x01C4
    42c0:	8e 7f       	andi	r24, 0xFE	; 254
    42c2:	17 c0       	rjmp	.+46     	; 0x42f2 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    42c4:	85 3f       	cpi	r24, 0xF5	; 245
    42c6:	21 f4       	brne	.+8      	; 0x42d0 <mousekey_off+0x96>
    42c8:	80 91 c4 01 	lds	r24, 0x01C4
    42cc:	8d 7f       	andi	r24, 0xFD	; 253
    42ce:	11 c0       	rjmp	.+34     	; 0x42f2 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    42d0:	86 3f       	cpi	r24, 0xF6	; 246
    42d2:	21 f4       	brne	.+8      	; 0x42dc <mousekey_off+0xa2>
    42d4:	80 91 c4 01 	lds	r24, 0x01C4
    42d8:	8b 7f       	andi	r24, 0xFB	; 251
    42da:	0b c0       	rjmp	.+22     	; 0x42f2 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    42dc:	87 3f       	cpi	r24, 0xF7	; 247
    42de:	21 f4       	brne	.+8      	; 0x42e8 <mousekey_off+0xae>
    42e0:	80 91 c4 01 	lds	r24, 0x01C4
    42e4:	87 7f       	andi	r24, 0xF7	; 247
    42e6:	05 c0       	rjmp	.+10     	; 0x42f2 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    42e8:	88 3f       	cpi	r24, 0xF8	; 248
    42ea:	31 f4       	brne	.+12     	; 0x42f8 <mousekey_off+0xbe>
    42ec:	80 91 c4 01 	lds	r24, 0x01C4
    42f0:	8f 7e       	andi	r24, 0xEF	; 239
    42f2:	80 93 c4 01 	sts	0x01C4, r24
    42f6:	13 c0       	rjmp	.+38     	; 0x431e <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    42f8:	8d 3f       	cpi	r24, 0xFD	; 253
    42fa:	21 f4       	brne	.+8      	; 0x4304 <mousekey_off+0xca>
    42fc:	80 91 c2 01 	lds	r24, 0x01C2
    4300:	8e 7f       	andi	r24, 0xFE	; 254
    4302:	0b c0       	rjmp	.+22     	; 0x431a <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4304:	8e 3f       	cpi	r24, 0xFE	; 254
    4306:	21 f4       	brne	.+8      	; 0x4310 <mousekey_off+0xd6>
    4308:	80 91 c2 01 	lds	r24, 0x01C2
    430c:	8d 7f       	andi	r24, 0xFD	; 253
    430e:	05 c0       	rjmp	.+10     	; 0x431a <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4310:	8f 3f       	cpi	r24, 0xFF	; 255
    4312:	29 f4       	brne	.+10     	; 0x431e <mousekey_off+0xe4>
    4314:	80 91 c2 01 	lds	r24, 0x01C2
    4318:	8b 7f       	andi	r24, 0xFB	; 251
    431a:	80 93 c2 01 	sts	0x01C2, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    431e:	80 91 c5 01 	lds	r24, 0x01C5
    4322:	81 11       	cpse	r24, r1
    4324:	0e c0       	rjmp	.+28     	; 0x4342 <mousekey_off+0x108>
    4326:	80 91 c6 01 	lds	r24, 0x01C6
    432a:	81 11       	cpse	r24, r1
    432c:	0a c0       	rjmp	.+20     	; 0x4342 <mousekey_off+0x108>
    432e:	80 91 c7 01 	lds	r24, 0x01C7
    4332:	81 11       	cpse	r24, r1
    4334:	06 c0       	rjmp	.+12     	; 0x4342 <mousekey_off+0x108>
    4336:	80 91 c8 01 	lds	r24, 0x01C8
    433a:	81 11       	cpse	r24, r1
    433c:	02 c0       	rjmp	.+4      	; 0x4342 <mousekey_off+0x108>
        mousekey_repeat = 0;
    433e:	10 92 c3 01 	sts	0x01C3, r1
    4342:	08 95       	ret

00004344 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4344:	80 91 ba 01 	lds	r24, 0x01BA
    4348:	83 ff       	sbrs	r24, 3
    434a:	7e c0       	rjmp	.+252    	; 0x4448 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    434c:	8c ee       	ldi	r24, 0xEC	; 236
    434e:	93 e0       	ldi	r25, 0x03	; 3
    4350:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    phex(mouse_report.buttons); print("|");
    4354:	80 91 c4 01 	lds	r24, 0x01C4
    4358:	1f 92       	push	r1
    435a:	8f 93       	push	r24
    435c:	87 ee       	ldi	r24, 0xE7	; 231
    435e:	93 e0       	ldi	r25, 0x03	; 3
    4360:	9f 93       	push	r25
    4362:	8f 93       	push	r24
    4364:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4368:	85 ee       	ldi	r24, 0xE5	; 229
    436a:	93 e0       	ldi	r25, 0x03	; 3
    436c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_decs(mouse_report.x); print(" ");
    4370:	20 91 c5 01 	lds	r18, 0x01C5
    4374:	82 2f       	mov	r24, r18
    4376:	99 27       	eor	r25, r25
    4378:	87 fd       	sbrc	r24, 7
    437a:	90 95       	com	r25
    437c:	9f 93       	push	r25
    437e:	2f 93       	push	r18
    4380:	82 ee       	ldi	r24, 0xE2	; 226
    4382:	93 e0       	ldi	r25, 0x03	; 3
    4384:	9f 93       	push	r25
    4386:	8f 93       	push	r24
    4388:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    438c:	80 ee       	ldi	r24, 0xE0	; 224
    438e:	93 e0       	ldi	r25, 0x03	; 3
    4390:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_decs(mouse_report.y); print(" ");
    4394:	20 91 c6 01 	lds	r18, 0x01C6
    4398:	82 2f       	mov	r24, r18
    439a:	99 27       	eor	r25, r25
    439c:	87 fd       	sbrc	r24, 7
    439e:	90 95       	com	r25
    43a0:	9f 93       	push	r25
    43a2:	2f 93       	push	r18
    43a4:	8d ed       	ldi	r24, 0xDD	; 221
    43a6:	93 e0       	ldi	r25, 0x03	; 3
    43a8:	9f 93       	push	r25
    43aa:	8f 93       	push	r24
    43ac:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    43b0:	8b ed       	ldi	r24, 0xDB	; 219
    43b2:	93 e0       	ldi	r25, 0x03	; 3
    43b4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_decs(mouse_report.v); print(" ");
    43b8:	20 91 c7 01 	lds	r18, 0x01C7
    43bc:	82 2f       	mov	r24, r18
    43be:	99 27       	eor	r25, r25
    43c0:	87 fd       	sbrc	r24, 7
    43c2:	90 95       	com	r25
    43c4:	9f 93       	push	r25
    43c6:	2f 93       	push	r18
    43c8:	88 ed       	ldi	r24, 0xD8	; 216
    43ca:	93 e0       	ldi	r25, 0x03	; 3
    43cc:	9f 93       	push	r25
    43ce:	8f 93       	push	r24
    43d0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    43d4:	86 ed       	ldi	r24, 0xD6	; 214
    43d6:	93 e0       	ldi	r25, 0x03	; 3
    43d8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_decs(mouse_report.h); print("](");
    43dc:	20 91 c8 01 	lds	r18, 0x01C8
    43e0:	82 2f       	mov	r24, r18
    43e2:	99 27       	eor	r25, r25
    43e4:	87 fd       	sbrc	r24, 7
    43e6:	90 95       	com	r25
    43e8:	9f 93       	push	r25
    43ea:	2f 93       	push	r18
    43ec:	83 ed       	ldi	r24, 0xD3	; 211
    43ee:	93 e0       	ldi	r25, 0x03	; 3
    43f0:	9f 93       	push	r25
    43f2:	8f 93       	push	r24
    43f4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    43f8:	80 ed       	ldi	r24, 0xD0	; 208
    43fa:	93 e0       	ldi	r25, 0x03	; 3
    43fc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_dec(mousekey_repeat); print("/");
    4400:	80 91 c3 01 	lds	r24, 0x01C3
    4404:	1f 92       	push	r1
    4406:	8f 93       	push	r24
    4408:	8d ec       	ldi	r24, 0xCD	; 205
    440a:	93 e0       	ldi	r25, 0x03	; 3
    440c:	9f 93       	push	r25
    440e:	8f 93       	push	r24
    4410:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4414:	8b ec       	ldi	r24, 0xCB	; 203
    4416:	93 e0       	ldi	r25, 0x03	; 3
    4418:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print_dec(mousekey_accel); print(")\n");
    441c:	80 91 c2 01 	lds	r24, 0x01C2
    4420:	1f 92       	push	r1
    4422:	8f 93       	push	r24
    4424:	88 ec       	ldi	r24, 0xC8	; 200
    4426:	93 e0       	ldi	r25, 0x03	; 3
    4428:	9f 93       	push	r25
    442a:	8f 93       	push	r24
    442c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4430:	85 ec       	ldi	r24, 0xC5	; 197
    4432:	93 e0       	ldi	r25, 0x03	; 3
    4434:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4438:	8d b7       	in	r24, 0x3d	; 61
    443a:	9e b7       	in	r25, 0x3e	; 62
    443c:	4c 96       	adiw	r24, 0x1c	; 28
    443e:	0f b6       	in	r0, 0x3f	; 63
    4440:	f8 94       	cli
    4442:	9e bf       	out	0x3e, r25	; 62
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4448:	84 ec       	ldi	r24, 0xC4	; 196
    444a:	91 e0       	ldi	r25, 0x01	; 1
    444c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <host_mouse_send>
    last_timer = timer_read();
    4450:	0e 94 a9 1c 	call	0x3952	; 0x3952 <timer_read>
    4454:	90 93 c1 01 	sts	0x01C1, r25
    4458:	80 93 c0 01 	sts	0x01C0, r24
    445c:	08 95       	ret

0000445e <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    445e:	1f 93       	push	r17
    4460:	cf 93       	push	r28
    4462:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4464:	80 91 c0 01 	lds	r24, 0x01C0
    4468:	90 91 c1 01 	lds	r25, 0x01C1
    446c:	0e 94 c1 1c 	call	0x3982	; 0x3982 <timer_elapsed>
    4470:	40 91 c3 01 	lds	r20, 0x01C3
    4474:	44 23       	and	r20, r20
    4476:	21 f0       	breq	.+8      	; 0x4480 <mousekey_task+0x22>
    4478:	20 91 12 01 	lds	r18, 0x0112
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	06 c0       	rjmp	.+12     	; 0x448c <mousekey_task+0x2e>
    4480:	20 91 13 01 	lds	r18, 0x0113
    4484:	5a e0       	ldi	r21, 0x0A	; 10
    4486:	25 9f       	mul	r18, r21
    4488:	90 01       	movw	r18, r0
    448a:	11 24       	eor	r1, r1
    448c:	82 17       	cp	r24, r18
    448e:	93 07       	cpc	r25, r19
    4490:	08 f4       	brcc	.+2      	; 0x4494 <mousekey_task+0x36>
    4492:	82 c0       	rjmp	.+260    	; 0x4598 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4494:	80 91 c5 01 	lds	r24, 0x01C5
    4498:	10 91 c6 01 	lds	r17, 0x01C6
    449c:	d0 91 c7 01 	lds	r29, 0x01C7
    44a0:	c0 91 c8 01 	lds	r28, 0x01C8
    44a4:	81 11       	cpse	r24, r1
    44a6:	07 c0       	rjmp	.+14     	; 0x44b6 <mousekey_task+0x58>
    44a8:	11 11       	cpse	r17, r1
    44aa:	05 c0       	rjmp	.+10     	; 0x44b6 <mousekey_task+0x58>
    44ac:	d1 11       	cpse	r29, r1
    44ae:	03 c0       	rjmp	.+6      	; 0x44b6 <mousekey_task+0x58>
    44b0:	cc 23       	and	r28, r28
    44b2:	09 f4       	brne	.+2      	; 0x44b6 <mousekey_task+0x58>
    44b4:	71 c0       	rjmp	.+226    	; 0x4598 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    44b6:	4f 3f       	cpi	r20, 0xFF	; 255
    44b8:	19 f0       	breq	.+6      	; 0x44c0 <mousekey_task+0x62>
        mousekey_repeat++;
    44ba:	4f 5f       	subi	r20, 0xFF	; 255
    44bc:	40 93 c3 01 	sts	0x01C3, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    44c0:	18 16       	cp	r1, r24
    44c2:	24 f4       	brge	.+8      	; 0x44cc <mousekey_task+0x6e>
    44c4:	0e 94 34 20 	call	0x4068	; 0x4068 <move_unit>
    44c8:	80 93 c5 01 	sts	0x01C5, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    44cc:	80 91 c5 01 	lds	r24, 0x01C5
    44d0:	87 ff       	sbrs	r24, 7
    44d2:	05 c0       	rjmp	.+10     	; 0x44de <mousekey_task+0x80>
    44d4:	0e 94 34 20 	call	0x4068	; 0x4068 <move_unit>
    44d8:	81 95       	neg	r24
    44da:	80 93 c5 01 	sts	0x01C5, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    44de:	11 16       	cp	r1, r17
    44e0:	24 f4       	brge	.+8      	; 0x44ea <mousekey_task+0x8c>
    44e2:	0e 94 34 20 	call	0x4068	; 0x4068 <move_unit>
    44e6:	80 93 c6 01 	sts	0x01C6, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    44ea:	80 91 c6 01 	lds	r24, 0x01C6
    44ee:	87 ff       	sbrs	r24, 7
    44f0:	05 c0       	rjmp	.+10     	; 0x44fc <mousekey_task+0x9e>
    44f2:	0e 94 34 20 	call	0x4068	; 0x4068 <move_unit>
    44f6:	81 95       	neg	r24
    44f8:	80 93 c6 01 	sts	0x01C6, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    44fc:	60 91 c5 01 	lds	r22, 0x01C5
    4500:	66 23       	and	r22, r22
    4502:	39 f1       	breq	.+78     	; 0x4552 <mousekey_task+0xf4>
    4504:	10 91 c6 01 	lds	r17, 0x01C6
    4508:	11 23       	and	r17, r17
    450a:	19 f1       	breq	.+70     	; 0x4552 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    450c:	77 27       	eor	r23, r23
    450e:	67 fd       	sbrc	r22, 7
    4510:	70 95       	com	r23
    4512:	87 2f       	mov	r24, r23
    4514:	97 2f       	mov	r25, r23
    4516:	0e 94 0a 28 	call	0x5014	; 0x5014 <__floatsisf>
    451a:	23 e3       	ldi	r18, 0x33	; 51
    451c:	33 e3       	ldi	r19, 0x33	; 51
    451e:	43 e3       	ldi	r20, 0x33	; 51
    4520:	5f e3       	ldi	r21, 0x3F	; 63
    4522:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__mulsf3>
    4526:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__fixsfsi>
    452a:	60 93 c5 01 	sts	0x01C5, r22
        mouse_report.y *= 0.7;
    452e:	61 2f       	mov	r22, r17
    4530:	77 27       	eor	r23, r23
    4532:	67 fd       	sbrc	r22, 7
    4534:	70 95       	com	r23
    4536:	87 2f       	mov	r24, r23
    4538:	97 2f       	mov	r25, r23
    453a:	0e 94 0a 28 	call	0x5014	; 0x5014 <__floatsisf>
    453e:	23 e3       	ldi	r18, 0x33	; 51
    4540:	33 e3       	ldi	r19, 0x33	; 51
    4542:	43 e3       	ldi	r20, 0x33	; 51
    4544:	5f e3       	ldi	r21, 0x3F	; 63
    4546:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__mulsf3>
    454a:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__fixsfsi>
    454e:	60 93 c6 01 	sts	0x01C6, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4552:	1d 16       	cp	r1, r29
    4554:	24 f4       	brge	.+8      	; 0x455e <mousekey_task+0x100>
    4556:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <wheel_unit>
    455a:	80 93 c7 01 	sts	0x01C7, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    455e:	80 91 c7 01 	lds	r24, 0x01C7
    4562:	87 ff       	sbrs	r24, 7
    4564:	05 c0       	rjmp	.+10     	; 0x4570 <mousekey_task+0x112>
    4566:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <wheel_unit>
    456a:	81 95       	neg	r24
    456c:	80 93 c7 01 	sts	0x01C7, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4570:	1c 16       	cp	r1, r28
    4572:	24 f4       	brge	.+8      	; 0x457c <mousekey_task+0x11e>
    4574:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <wheel_unit>
    4578:	80 93 c8 01 	sts	0x01C8, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    457c:	80 91 c8 01 	lds	r24, 0x01C8
    4580:	87 ff       	sbrs	r24, 7
    4582:	05 c0       	rjmp	.+10     	; 0x458e <mousekey_task+0x130>
    4584:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <wheel_unit>
    4588:	81 95       	neg	r24
    458a:	80 93 c8 01 	sts	0x01C8, r24

    mousekey_send();
}
    458e:	df 91       	pop	r29
    4590:	cf 91       	pop	r28
    4592:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4594:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <mousekey_send>
}
    4598:	df 91       	pop	r29
    459a:	cf 91       	pop	r28
    459c:	1f 91       	pop	r17
    459e:	08 95       	ret

000045a0 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    45a0:	e4 ec       	ldi	r30, 0xC4	; 196
    45a2:	f1 e0       	ldi	r31, 0x01	; 1
    45a4:	85 e0       	ldi	r24, 0x05	; 5
    45a6:	df 01       	movw	r26, r30
    45a8:	1d 92       	st	X+, r1
    45aa:	8a 95       	dec	r24
    45ac:	e9 f7       	brne	.-6      	; 0x45a8 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    45ae:	10 92 c3 01 	sts	0x01C3, r1
    mousekey_accel = 0;
    45b2:	10 92 c2 01 	sts	0x01C2, r1
    45b6:	08 95       	ret

000045b8 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    45b8:	8f e0       	ldi	r24, 0x0F	; 15
    45ba:	96 e0       	ldi	r25, 0x06	; 6
    45bc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    45c0:	1f 92       	push	r1
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	8f 93       	push	r24
    45c6:	1f 92       	push	r1
    45c8:	85 e0       	ldi	r24, 0x05	; 5
    45ca:	8f 93       	push	r24
    45cc:	81 ec       	ldi	r24, 0xC1	; 193
    45ce:	95 e0       	ldi	r25, 0x05	; 5
    45d0:	9f 93       	push	r25
    45d2:	8f 93       	push	r24
    45d4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    45d8:	0f 90       	pop	r0
    45da:	0f 90       	pop	r0
    45dc:	0f 90       	pop	r0
    45de:	0f 90       	pop	r0
    45e0:	0f 90       	pop	r0
    45e2:	0f 90       	pop	r0
    45e4:	08 95       	ret

000045e6 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    45e6:	83 30       	cpi	r24, 0x03	; 3
    45e8:	e9 f1       	breq	.+122    	; 0x4664 <mousekey_param_inc+0x7e>
    45ea:	28 f4       	brcc	.+10     	; 0x45f6 <mousekey_param_inc+0x10>
    45ec:	81 30       	cpi	r24, 0x01	; 1
    45ee:	61 f0       	breq	.+24     	; 0x4608 <mousekey_param_inc+0x22>
    45f0:	82 30       	cpi	r24, 0x02	; 2
    45f2:	09 f1       	breq	.+66     	; 0x4636 <mousekey_param_inc+0x50>
    45f4:	08 95       	ret
    45f6:	85 30       	cpi	r24, 0x05	; 5
    45f8:	09 f4       	brne	.+2      	; 0x45fc <mousekey_param_inc+0x16>
    45fa:	62 c0       	rjmp	.+196    	; 0x46c0 <mousekey_param_inc+0xda>
    45fc:	08 f4       	brcc	.+2      	; 0x4600 <mousekey_param_inc+0x1a>
    45fe:	49 c0       	rjmp	.+146    	; 0x4692 <mousekey_param_inc+0xac>
    4600:	86 30       	cpi	r24, 0x06	; 6
    4602:	09 f4       	brne	.+2      	; 0x4606 <mousekey_param_inc+0x20>
    4604:	74 c0       	rjmp	.+232    	; 0x46ee <mousekey_param_inc+0x108>
    4606:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4608:	20 91 13 01 	lds	r18, 0x0113
    460c:	86 2f       	mov	r24, r22
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	82 0f       	add	r24, r18
    4612:	91 1d       	adc	r25, r1
    4614:	8f 3f       	cpi	r24, 0xFF	; 255
    4616:	91 05       	cpc	r25, r1
    4618:	20 f4       	brcc	.+8      	; 0x4622 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    461a:	62 0f       	add	r22, r18
    461c:	60 93 13 01 	sts	0x0113, r22
    4620:	03 c0       	rjmp	.+6      	; 0x4628 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4622:	8f ef       	ldi	r24, 0xFF	; 255
    4624:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_delay);
    4628:	80 91 13 01 	lds	r24, 0x0113
    462c:	1f 92       	push	r1
    462e:	8f 93       	push	r24
    4630:	8a ef       	ldi	r24, 0xFA	; 250
    4632:	94 e0       	ldi	r25, 0x04	; 4
    4634:	72 c0       	rjmp	.+228    	; 0x471a <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4636:	20 91 12 01 	lds	r18, 0x0112
    463a:	86 2f       	mov	r24, r22
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	82 0f       	add	r24, r18
    4640:	91 1d       	adc	r25, r1
    4642:	8f 3f       	cpi	r24, 0xFF	; 255
    4644:	91 05       	cpc	r25, r1
    4646:	20 f4       	brcc	.+8      	; 0x4650 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    4648:	62 0f       	add	r22, r18
    464a:	60 93 12 01 	sts	0x0112, r22
    464e:	03 c0       	rjmp	.+6      	; 0x4656 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4650:	8f ef       	ldi	r24, 0xFF	; 255
    4652:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_interval);
    4656:	80 91 12 01 	lds	r24, 0x0112
    465a:	1f 92       	push	r1
    465c:	8f 93       	push	r24
    465e:	88 ee       	ldi	r24, 0xE8	; 232
    4660:	94 e0       	ldi	r25, 0x04	; 4
    4662:	5b c0       	rjmp	.+182    	; 0x471a <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4664:	20 91 11 01 	lds	r18, 0x0111
    4668:	86 2f       	mov	r24, r22
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	82 0f       	add	r24, r18
    466e:	91 1d       	adc	r25, r1
    4670:	8f 3f       	cpi	r24, 0xFF	; 255
    4672:	91 05       	cpc	r25, r1
    4674:	20 f4       	brcc	.+8      	; 0x467e <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    4676:	62 0f       	add	r22, r18
    4678:	60 93 11 01 	sts	0x0111, r22
    467c:	03 c0       	rjmp	.+6      	; 0x4684 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    467e:	8f ef       	ldi	r24, 0xFF	; 255
    4680:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    4684:	80 91 11 01 	lds	r24, 0x0111
    4688:	1f 92       	push	r1
    468a:	8f 93       	push	r24
    468c:	85 ed       	ldi	r24, 0xD5	; 213
    468e:	94 e0       	ldi	r25, 0x04	; 4
    4690:	44 c0       	rjmp	.+136    	; 0x471a <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4692:	20 91 10 01 	lds	r18, 0x0110
    4696:	86 2f       	mov	r24, r22
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	82 0f       	add	r24, r18
    469c:	91 1d       	adc	r25, r1
    469e:	8f 3f       	cpi	r24, 0xFF	; 255
    46a0:	91 05       	cpc	r25, r1
    46a2:	20 f4       	brcc	.+8      	; 0x46ac <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    46a4:	62 0f       	add	r22, r18
    46a6:	60 93 10 01 	sts	0x0110, r22
    46aa:	03 c0       	rjmp	.+6      	; 0x46b2 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    46ac:	8f ef       	ldi	r24, 0xFF	; 255
    46ae:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_time_to_max);
    46b2:	80 91 10 01 	lds	r24, 0x0110
    46b6:	1f 92       	push	r1
    46b8:	8f 93       	push	r24
    46ba:	80 ec       	ldi	r24, 0xC0	; 192
    46bc:	94 e0       	ldi	r25, 0x04	; 4
    46be:	2d c0       	rjmp	.+90     	; 0x471a <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    46c0:	20 91 0f 01 	lds	r18, 0x010F
    46c4:	86 2f       	mov	r24, r22
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	82 0f       	add	r24, r18
    46ca:	91 1d       	adc	r25, r1
    46cc:	8f 3f       	cpi	r24, 0xFF	; 255
    46ce:	91 05       	cpc	r25, r1
    46d0:	20 f4       	brcc	.+8      	; 0x46da <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    46d2:	62 0f       	add	r22, r18
    46d4:	60 93 0f 01 	sts	0x010F, r22
    46d8:	03 c0       	rjmp	.+6      	; 0x46e0 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    46da:	8f ef       	ldi	r24, 0xFF	; 255
    46dc:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    46e0:	80 91 0f 01 	lds	r24, 0x010F
    46e4:	1f 92       	push	r1
    46e6:	8f 93       	push	r24
    46e8:	87 ea       	ldi	r24, 0xA7	; 167
    46ea:	94 e0       	ldi	r25, 0x04	; 4
    46ec:	16 c0       	rjmp	.+44     	; 0x471a <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    46ee:	20 91 0e 01 	lds	r18, 0x010E
    46f2:	86 2f       	mov	r24, r22
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	82 0f       	add	r24, r18
    46f8:	91 1d       	adc	r25, r1
    46fa:	8f 3f       	cpi	r24, 0xFF	; 255
    46fc:	91 05       	cpc	r25, r1
    46fe:	20 f4       	brcc	.+8      	; 0x4708 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4700:	62 0f       	add	r22, r18
    4702:	60 93 0e 01 	sts	0x010E, r22
    4706:	03 c0       	rjmp	.+6      	; 0x470e <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4708:	8f ef       	ldi	r24, 0xFF	; 255
    470a:	80 93 0e 01 	sts	0x010E, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    470e:	80 91 0e 01 	lds	r24, 0x010E
    4712:	1f 92       	push	r1
    4714:	8f 93       	push	r24
    4716:	8c e8       	ldi	r24, 0x8C	; 140
    4718:	94 e0       	ldi	r25, 0x04	; 4
    471a:	9f 93       	push	r25
    471c:	8f 93       	push	r24
    471e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
            break;
    4722:	0f 90       	pop	r0
    4724:	0f 90       	pop	r0
    4726:	0f 90       	pop	r0
    4728:	0f 90       	pop	r0
    472a:	08 95       	ret

0000472c <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    472c:	83 30       	cpi	r24, 0x03	; 3
    472e:	81 f1       	breq	.+96     	; 0x4790 <mousekey_param_dec+0x64>
    4730:	28 f4       	brcc	.+10     	; 0x473c <mousekey_param_dec+0x10>
    4732:	81 30       	cpi	r24, 0x01	; 1
    4734:	59 f0       	breq	.+22     	; 0x474c <mousekey_param_dec+0x20>
    4736:	82 30       	cpi	r24, 0x02	; 2
    4738:	d1 f0       	breq	.+52     	; 0x476e <mousekey_param_dec+0x42>
    473a:	08 95       	ret
    473c:	85 30       	cpi	r24, 0x05	; 5
    473e:	09 f4       	brne	.+2      	; 0x4742 <mousekey_param_dec+0x16>
    4740:	49 c0       	rjmp	.+146    	; 0x47d4 <mousekey_param_dec+0xa8>
    4742:	b8 f1       	brcs	.+110    	; 0x47b2 <mousekey_param_dec+0x86>
    4744:	86 30       	cpi	r24, 0x06	; 6
    4746:	09 f4       	brne	.+2      	; 0x474a <mousekey_param_dec+0x1e>
    4748:	56 c0       	rjmp	.+172    	; 0x47f6 <mousekey_param_dec+0xca>
    474a:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    474c:	80 91 13 01 	lds	r24, 0x0113
    4750:	68 17       	cp	r22, r24
    4752:	20 f4       	brcc	.+8      	; 0x475c <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4754:	86 1b       	sub	r24, r22
    4756:	80 93 13 01 	sts	0x0113, r24
    475a:	02 c0       	rjmp	.+4      	; 0x4760 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    475c:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_delay);
    4760:	80 91 13 01 	lds	r24, 0x0113
    4764:	1f 92       	push	r1
    4766:	8f 93       	push	r24
    4768:	8d e7       	ldi	r24, 0x7D	; 125
    476a:	94 e0       	ldi	r25, 0x04	; 4
    476c:	54 c0       	rjmp	.+168    	; 0x4816 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    476e:	80 91 12 01 	lds	r24, 0x0112
    4772:	68 17       	cp	r22, r24
    4774:	20 f4       	brcc	.+8      	; 0x477e <mousekey_param_dec+0x52>
                mk_interval -= dec;
    4776:	86 1b       	sub	r24, r22
    4778:	80 93 12 01 	sts	0x0112, r24
    477c:	02 c0       	rjmp	.+4      	; 0x4782 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    477e:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_interval);
    4782:	80 91 12 01 	lds	r24, 0x0112
    4786:	1f 92       	push	r1
    4788:	8f 93       	push	r24
    478a:	8b e6       	ldi	r24, 0x6B	; 107
    478c:	94 e0       	ldi	r25, 0x04	; 4
    478e:	43 c0       	rjmp	.+134    	; 0x4816 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4790:	80 91 11 01 	lds	r24, 0x0111
    4794:	68 17       	cp	r22, r24
    4796:	20 f4       	brcc	.+8      	; 0x47a0 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4798:	86 1b       	sub	r24, r22
    479a:	80 93 11 01 	sts	0x0111, r24
    479e:	02 c0       	rjmp	.+4      	; 0x47a4 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    47a0:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    47a4:	80 91 11 01 	lds	r24, 0x0111
    47a8:	1f 92       	push	r1
    47aa:	8f 93       	push	r24
    47ac:	88 e5       	ldi	r24, 0x58	; 88
    47ae:	94 e0       	ldi	r25, 0x04	; 4
    47b0:	32 c0       	rjmp	.+100    	; 0x4816 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    47b2:	80 91 10 01 	lds	r24, 0x0110
    47b6:	68 17       	cp	r22, r24
    47b8:	20 f4       	brcc	.+8      	; 0x47c2 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    47ba:	86 1b       	sub	r24, r22
    47bc:	80 93 10 01 	sts	0x0110, r24
    47c0:	02 c0       	rjmp	.+4      	; 0x47c6 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    47c2:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_time_to_max);
    47c6:	80 91 10 01 	lds	r24, 0x0110
    47ca:	1f 92       	push	r1
    47cc:	8f 93       	push	r24
    47ce:	83 e4       	ldi	r24, 0x43	; 67
    47d0:	94 e0       	ldi	r25, 0x04	; 4
    47d2:	21 c0       	rjmp	.+66     	; 0x4816 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    47d4:	80 91 0f 01 	lds	r24, 0x010F
    47d8:	68 17       	cp	r22, r24
    47da:	20 f4       	brcc	.+8      	; 0x47e4 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    47dc:	86 1b       	sub	r24, r22
    47de:	80 93 0f 01 	sts	0x010F, r24
    47e2:	02 c0       	rjmp	.+4      	; 0x47e8 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    47e4:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    47e8:	80 91 0f 01 	lds	r24, 0x010F
    47ec:	1f 92       	push	r1
    47ee:	8f 93       	push	r24
    47f0:	8a e2       	ldi	r24, 0x2A	; 42
    47f2:	94 e0       	ldi	r25, 0x04	; 4
    47f4:	10 c0       	rjmp	.+32     	; 0x4816 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    47f6:	80 91 0e 01 	lds	r24, 0x010E
    47fa:	68 17       	cp	r22, r24
    47fc:	20 f4       	brcc	.+8      	; 0x4806 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    47fe:	86 1b       	sub	r24, r22
    4800:	80 93 0e 01 	sts	0x010E, r24
    4804:	02 c0       	rjmp	.+4      	; 0x480a <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4806:	10 92 0e 01 	sts	0x010E, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    480a:	80 91 0e 01 	lds	r24, 0x010E
    480e:	1f 92       	push	r1
    4810:	8f 93       	push	r24
    4812:	8f e0       	ldi	r24, 0x0F	; 15
    4814:	94 e0       	ldi	r25, 0x04	; 4
    4816:	9f 93       	push	r25
    4818:	8f 93       	push	r24
    481a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
            break;
    481e:	0f 90       	pop	r0
    4820:	0f 90       	pop	r0
    4822:	0f 90       	pop	r0
    4824:	0f 90       	pop	r0
    4826:	08 95       	ret

00004828 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4828:	cf 93       	push	r28
    482a:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    482c:	1f 92       	push	r1
    482e:	8f 93       	push	r24
    4830:	24 e1       	ldi	r18, 0x14	; 20
    4832:	37 e0       	ldi	r19, 0x07	; 7
    4834:	3f 93       	push	r19
    4836:	2f 93       	push	r18
    4838:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    default_layer_set(1UL<<layer);
    483c:	61 e0       	ldi	r22, 0x01	; 1
    483e:	70 e0       	ldi	r23, 0x00	; 0
    4840:	80 e0       	ldi	r24, 0x00	; 0
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	04 c0       	rjmp	.+8      	; 0x484e <switch_default_layer+0x26>
    4846:	66 0f       	add	r22, r22
    4848:	77 1f       	adc	r23, r23
    484a:	88 1f       	adc	r24, r24
    484c:	99 1f       	adc	r25, r25
    484e:	ca 95       	dec	r28
    4850:	d2 f7       	brpl	.-12     	; 0x4846 <switch_default_layer+0x1e>
    4852:	0e 94 31 1a 	call	0x3462	; 0x3462 <default_layer_set>
    clear_keyboard();
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	0f 90       	pop	r0
}
    485e:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4860:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <clear_keyboard>

00004864 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4864:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4866:	87 32       	cpi	r24, 0x27	; 39
    4868:	b0 f5       	brcc	.+108    	; 0x48d6 <command_common+0x72>
    486a:	8e 31       	cpi	r24, 0x1E	; 30
    486c:	08 f0       	brcs	.+2      	; 0x4870 <command_common+0xc>
    486e:	3d c2       	rjmp	.+1146   	; 0x4cea <command_common+0x486>
    4870:	8e 30       	cpi	r24, 0x0E	; 14
    4872:	09 f4       	brne	.+2      	; 0x4876 <command_common+0x12>
    4874:	bd c1       	rjmp	.+890    	; 0x4bf0 <command_common+0x38c>
    4876:	00 f5       	brcc	.+64     	; 0x48b8 <command_common+0x54>
    4878:	87 30       	cpi	r24, 0x07	; 7
    487a:	09 f4       	brne	.+2      	; 0x487e <command_common+0x1a>
    487c:	8d c1       	rjmp	.+794    	; 0x4b98 <command_common+0x334>
    487e:	a8 f4       	brcc	.+42     	; 0x48aa <command_common+0x46>
    4880:	86 30       	cpi	r24, 0x06	; 6
    4882:	09 f0       	breq	.+2      	; 0x4886 <command_common+0x22>
    4884:	36 c2       	rjmp	.+1132   	; 0x4cf2 <command_common+0x48e>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4886:	80 91 ba 01 	lds	r24, 0x01BA
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    488a:	81 7f       	andi	r24, 0xF1	; 241
    488c:	8e 7f       	andi	r24, 0xFE	; 254
    488e:	80 93 ba 01 	sts	0x01BA, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4892:	89 e1       	ldi	r24, 0x19	; 25
    4894:	97 e0       	ldi	r25, 0x07	; 7
    4896:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    489a:	88 e0       	ldi	r24, 0x08	; 8
    489c:	9b e0       	ldi	r25, 0x0B	; 11
    489e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            command_state = CONSOLE;
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	80 93 ca 01 	sts	0x01CA, r24
    48a8:	75 c1       	rjmp	.+746    	; 0x4b94 <command_common+0x330>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    48aa:	88 30       	cpi	r24, 0x08	; 8
    48ac:	09 f4       	brne	.+2      	; 0x48b0 <command_common+0x4c>
    48ae:	3f c0       	rjmp	.+126    	; 0x492e <command_common+0xca>
    48b0:	8b 30       	cpi	r24, 0x0B	; 11
    48b2:	09 f4       	brne	.+2      	; 0x48b6 <command_common+0x52>
    48b4:	6b c1       	rjmp	.+726    	; 0x4b8c <command_common+0x328>
    48b6:	1d c2       	rjmp	.+1082   	; 0x4cf2 <command_common+0x48e>
    48b8:	86 31       	cpi	r24, 0x16	; 22
    48ba:	09 f4       	brne	.+2      	; 0x48be <command_common+0x5a>
    48bc:	dd c1       	rjmp	.+954    	; 0x4c78 <command_common+0x414>
    48be:	20 f4       	brcc	.+8      	; 0x48c8 <command_common+0x64>
    48c0:	80 31       	cpi	r24, 0x10	; 16
    48c2:	09 f4       	brne	.+2      	; 0x48c6 <command_common+0x62>
    48c4:	a8 c1       	rjmp	.+848    	; 0x4c16 <command_common+0x3b2>
    48c6:	15 c2       	rjmp	.+1066   	; 0x4cf2 <command_common+0x48e>
    48c8:	89 31       	cpi	r24, 0x19	; 25
    48ca:	09 f4       	brne	.+2      	; 0x48ce <command_common+0x6a>
    48cc:	be c1       	rjmp	.+892    	; 0x4c4a <command_common+0x3e6>
    48ce:	8b 31       	cpi	r24, 0x1B	; 27
    48d0:	09 f4       	brne	.+2      	; 0x48d4 <command_common+0x70>
    48d2:	7b c1       	rjmp	.+758    	; 0x4bca <command_common+0x366>
    48d4:	0e c2       	rjmp	.+1052   	; 0x4cf2 <command_common+0x48e>
    48d6:	88 33       	cpi	r24, 0x38	; 56
    48d8:	09 f4       	brne	.+2      	; 0x48dc <command_common+0x78>
    48da:	58 c1       	rjmp	.+688    	; 0x4b8c <command_common+0x328>
    48dc:	50 f4       	brcc	.+20     	; 0x48f2 <command_common+0x8e>
    48de:	89 32       	cpi	r24, 0x29	; 41
    48e0:	09 f4       	brne	.+2      	; 0x48e4 <command_common+0x80>
    48e2:	01 c2       	rjmp	.+1026   	; 0x4ce6 <command_common+0x482>
    48e4:	85 33       	cpi	r24, 0x35	; 53
    48e6:	09 f4       	brne	.+2      	; 0x48ea <command_common+0x86>
    48e8:	fe c1       	rjmp	.+1020   	; 0x4ce6 <command_common+0x482>
    48ea:	87 32       	cpi	r24, 0x27	; 39
    48ec:	09 f0       	breq	.+2      	; 0x48f0 <command_common+0x8c>
    48ee:	01 c2       	rjmp	.+1026   	; 0x4cf2 <command_common+0x48e>
    48f0:	fa c1       	rjmp	.+1012   	; 0x4ce6 <command_common+0x482>
    48f2:	83 34       	cpi	r24, 0x43	; 67
    48f4:	09 f4       	brne	.+2      	; 0x48f8 <command_common+0x94>
    48f6:	f7 c1       	rjmp	.+1006   	; 0x4ce6 <command_common+0x482>
    48f8:	28 f4       	brcc	.+10     	; 0x4904 <command_common+0xa0>
    48fa:	8a 33       	cpi	r24, 0x3A	; 58
    48fc:	08 f4       	brcc	.+2      	; 0x4900 <command_common+0x9c>
    48fe:	f9 c1       	rjmp	.+1010   	; 0x4cf2 <command_common+0x48e>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4900:	89 53       	subi	r24, 0x39	; 57
    4902:	f4 c1       	rjmp	.+1000   	; 0x4cec <command_common+0x488>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4904:	88 34       	cpi	r24, 0x48	; 72
    4906:	09 f0       	breq	.+2      	; 0x490a <command_common+0xa6>
    4908:	f4 c1       	rjmp	.+1000   	; 0x4cf2 <command_common+0x48e>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    490a:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <clear_keyboard>
            print("\n\nbootloader... ");
    490e:	87 ef       	ldi	r24, 0xF7	; 247
    4910:	9a e0       	ldi	r25, 0x0A	; 10
    4912:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4916:	9f ef       	ldi	r25, 0xFF	; 255
    4918:	23 ed       	ldi	r18, 0xD3	; 211
    491a:	80 e3       	ldi	r24, 0x30	; 48
    491c:	91 50       	subi	r25, 0x01	; 1
    491e:	20 40       	sbci	r18, 0x00	; 0
    4920:	80 40       	sbci	r24, 0x00	; 0
    4922:	e1 f7       	brne	.-8      	; 0x491c <command_common+0xb8>
    4924:	00 c0       	rjmp	.+0      	; 0x4926 <command_common+0xc2>
    4926:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4928:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <bootloader_jump>
    492c:	33 c1       	rjmp	.+614    	; 0x4b94 <command_common+0x330>
            sleep_led_test = !sleep_led_test;
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    492e:	8c e0       	ldi	r24, 0x0C	; 12
    4930:	9b e0       	ldi	r25, 0x0B	; 11
    4932:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4936:	80 e1       	ldi	r24, 0x10	; 16
    4938:	99 e0       	ldi	r25, 0x09	; 9
    493a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    493e:	0e 94 22 20 	call	0x4044	; 0x4044 <eeconfig_read_default_layer>
    4942:	1f 92       	push	r1
    4944:	8f 93       	push	r24
    4946:	8d e0       	ldi	r24, 0x0D	; 13
    4948:	99 e0       	ldi	r25, 0x09	; 9
    494a:	9f 93       	push	r25
    494c:	8f 93       	push	r24
    494e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4952:	8b e0       	ldi	r24, 0x0B	; 11
    4954:	99 e0       	ldi	r25, 0x09	; 9
    4956:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    495a:	0e 94 19 20 	call	0x4032	; 0x4032 <eeconfig_read_debug>
    495e:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4960:	88 ef       	ldi	r24, 0xF8	; 248
    4962:	98 e0       	ldi	r25, 0x08	; 8
    4964:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4968:	1f 92       	push	r1
    496a:	cf 93       	push	r28
    496c:	23 ef       	ldi	r18, 0xF3	; 243
    496e:	38 e0       	ldi	r19, 0x08	; 8
    4970:	3f 93       	push	r19
    4972:	2f 93       	push	r18
    4974:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4978:	81 ef       	ldi	r24, 0xF1	; 241
    497a:	98 e0       	ldi	r25, 0x08	; 8
    497c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4980:	87 ee       	ldi	r24, 0xE7	; 231
    4982:	98 e0       	ldi	r25, 0x08	; 8
    4984:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4988:	8c 2f       	mov	r24, r28
    498a:	81 70       	andi	r24, 0x01	; 1
    498c:	1f 92       	push	r1
    498e:	8f 93       	push	r24
    4990:	24 ee       	ldi	r18, 0xE4	; 228
    4992:	38 e0       	ldi	r19, 0x08	; 8
    4994:	3f 93       	push	r19
    4996:	2f 93       	push	r18
    4998:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    499c:	82 ee       	ldi	r24, 0xE2	; 226
    499e:	98 e0       	ldi	r25, 0x08	; 8
    49a0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    49a4:	88 ed       	ldi	r24, 0xD8	; 216
    49a6:	98 e0       	ldi	r25, 0x08	; 8
    49a8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    49ac:	c1 fb       	bst	r28, 1
    49ae:	88 27       	eor	r24, r24
    49b0:	80 f9       	bld	r24, 0
    49b2:	1f 92       	push	r1
    49b4:	8f 93       	push	r24
    49b6:	25 ed       	ldi	r18, 0xD5	; 213
    49b8:	38 e0       	ldi	r19, 0x08	; 8
    49ba:	3f 93       	push	r19
    49bc:	2f 93       	push	r18
    49be:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    49c2:	83 ed       	ldi	r24, 0xD3	; 211
    49c4:	98 e0       	ldi	r25, 0x08	; 8
    49c6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    49ca:	87 ec       	ldi	r24, 0xC7	; 199
    49cc:	98 e0       	ldi	r25, 0x08	; 8
    49ce:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    49d2:	c2 fb       	bst	r28, 2
    49d4:	88 27       	eor	r24, r24
    49d6:	80 f9       	bld	r24, 0
    49d8:	1f 92       	push	r1
    49da:	8f 93       	push	r24
    49dc:	24 ec       	ldi	r18, 0xC4	; 196
    49de:	38 e0       	ldi	r19, 0x08	; 8
    49e0:	3f 93       	push	r19
    49e2:	2f 93       	push	r18
    49e4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    49e8:	82 ec       	ldi	r24, 0xC2	; 194
    49ea:	98 e0       	ldi	r25, 0x08	; 8
    49ec:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    49f0:	89 eb       	ldi	r24, 0xB9	; 185
    49f2:	98 e0       	ldi	r25, 0x08	; 8
    49f4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    49f8:	c3 fb       	bst	r28, 3
    49fa:	cc 27       	eor	r28, r28
    49fc:	c0 f9       	bld	r28, 0
    49fe:	1f 92       	push	r1
    4a00:	cf 93       	push	r28
    4a02:	86 eb       	ldi	r24, 0xB6	; 182
    4a04:	98 e0       	ldi	r25, 0x08	; 8
    4a06:	9f 93       	push	r25
    4a08:	8f 93       	push	r24
    4a0a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4a0e:	84 eb       	ldi	r24, 0xB4	; 180
    4a10:	98 e0       	ldi	r25, 0x08	; 8
    4a12:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4a16:	0e 94 2b 20 	call	0x4056	; 0x4056 <eeconfig_read_keymap>
    4a1a:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4a1c:	80 ea       	ldi	r24, 0xA0	; 160
    4a1e:	98 e0       	ldi	r25, 0x08	; 8
    4a20:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4a24:	1f 92       	push	r1
    4a26:	cf 93       	push	r28
    4a28:	2b e9       	ldi	r18, 0x9B	; 155
    4a2a:	38 e0       	ldi	r19, 0x08	; 8
    4a2c:	3f 93       	push	r19
    4a2e:	2f 93       	push	r18
    4a30:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4a34:	89 e9       	ldi	r24, 0x99	; 153
    4a36:	98 e0       	ldi	r25, 0x08	; 8
    4a38:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4a3c:	80 e8       	ldi	r24, 0x80	; 128
    4a3e:	98 e0       	ldi	r25, 0x08	; 8
    4a40:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4a44:	8c 2f       	mov	r24, r28
    4a46:	81 70       	andi	r24, 0x01	; 1
    4a48:	1f 92       	push	r1
    4a4a:	8f 93       	push	r24
    4a4c:	2d e7       	ldi	r18, 0x7D	; 125
    4a4e:	38 e0       	ldi	r19, 0x08	; 8
    4a50:	3f 93       	push	r19
    4a52:	2f 93       	push	r18
    4a54:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4a58:	8d b7       	in	r24, 0x3d	; 61
    4a5a:	9e b7       	in	r25, 0x3e	; 62
    4a5c:	80 96       	adiw	r24, 0x20	; 32
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	f8 94       	cli
    4a62:	9e bf       	out	0x3e, r25	; 62
    4a64:	0f be       	out	0x3f, r0	; 63
    4a66:	8d bf       	out	0x3d, r24	; 61
    4a68:	8b e7       	ldi	r24, 0x7B	; 123
    4a6a:	98 e0       	ldi	r25, 0x08	; 8
    4a6c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4a70:	84 e6       	ldi	r24, 0x64	; 100
    4a72:	98 e0       	ldi	r25, 0x08	; 8
    4a74:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4a78:	c1 fb       	bst	r28, 1
    4a7a:	88 27       	eor	r24, r24
    4a7c:	80 f9       	bld	r24, 0
    4a7e:	1f 92       	push	r1
    4a80:	8f 93       	push	r24
    4a82:	21 e6       	ldi	r18, 0x61	; 97
    4a84:	38 e0       	ldi	r19, 0x08	; 8
    4a86:	3f 93       	push	r19
    4a88:	2f 93       	push	r18
    4a8a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4a8e:	8f e5       	ldi	r24, 0x5F	; 95
    4a90:	98 e0       	ldi	r25, 0x08	; 8
    4a92:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4a96:	8d e4       	ldi	r24, 0x4D	; 77
    4a98:	98 e0       	ldi	r25, 0x08	; 8
    4a9a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4a9e:	c2 fb       	bst	r28, 2
    4aa0:	88 27       	eor	r24, r24
    4aa2:	80 f9       	bld	r24, 0
    4aa4:	1f 92       	push	r1
    4aa6:	8f 93       	push	r24
    4aa8:	2a e4       	ldi	r18, 0x4A	; 74
    4aaa:	38 e0       	ldi	r19, 0x08	; 8
    4aac:	3f 93       	push	r19
    4aae:	2f 93       	push	r18
    4ab0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4ab4:	88 e4       	ldi	r24, 0x48	; 72
    4ab6:	98 e0       	ldi	r25, 0x08	; 8
    4ab8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4abc:	86 e3       	ldi	r24, 0x36	; 54
    4abe:	98 e0       	ldi	r25, 0x08	; 8
    4ac0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4ac4:	c3 fb       	bst	r28, 3
    4ac6:	88 27       	eor	r24, r24
    4ac8:	80 f9       	bld	r24, 0
    4aca:	1f 92       	push	r1
    4acc:	8f 93       	push	r24
    4ace:	23 e3       	ldi	r18, 0x33	; 51
    4ad0:	38 e0       	ldi	r19, 0x08	; 8
    4ad2:	3f 93       	push	r19
    4ad4:	2f 93       	push	r18
    4ad6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4ada:	81 e3       	ldi	r24, 0x31	; 49
    4adc:	98 e0       	ldi	r25, 0x08	; 8
    4ade:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4ae2:	87 e2       	ldi	r24, 0x27	; 39
    4ae4:	98 e0       	ldi	r25, 0x08	; 8
    4ae6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4aea:	c4 fb       	bst	r28, 4
    4aec:	88 27       	eor	r24, r24
    4aee:	80 f9       	bld	r24, 0
    4af0:	1f 92       	push	r1
    4af2:	8f 93       	push	r24
    4af4:	24 e2       	ldi	r18, 0x24	; 36
    4af6:	38 e0       	ldi	r19, 0x08	; 8
    4af8:	3f 93       	push	r19
    4afa:	2f 93       	push	r18
    4afc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4b00:	82 e2       	ldi	r24, 0x22	; 34
    4b02:	98 e0       	ldi	r25, 0x08	; 8
    4b04:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4b08:	80 e1       	ldi	r24, 0x10	; 16
    4b0a:	98 e0       	ldi	r25, 0x08	; 8
    4b0c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4b10:	c5 fb       	bst	r28, 5
    4b12:	88 27       	eor	r24, r24
    4b14:	80 f9       	bld	r24, 0
    4b16:	1f 92       	push	r1
    4b18:	8f 93       	push	r24
    4b1a:	2d e0       	ldi	r18, 0x0D	; 13
    4b1c:	38 e0       	ldi	r19, 0x08	; 8
    4b1e:	3f 93       	push	r19
    4b20:	2f 93       	push	r18
    4b22:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4b26:	8b e0       	ldi	r24, 0x0B	; 11
    4b28:	98 e0       	ldi	r25, 0x08	; 8
    4b2a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4b2e:	8f ee       	ldi	r24, 0xEF	; 239
    4b30:	97 e0       	ldi	r25, 0x07	; 7
    4b32:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4b36:	c6 fb       	bst	r28, 6
    4b38:	88 27       	eor	r24, r24
    4b3a:	80 f9       	bld	r24, 0
    4b3c:	1f 92       	push	r1
    4b3e:	8f 93       	push	r24
    4b40:	2c ee       	ldi	r18, 0xEC	; 236
    4b42:	37 e0       	ldi	r19, 0x07	; 7
    4b44:	3f 93       	push	r19
    4b46:	2f 93       	push	r18
    4b48:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4b4c:	8a ee       	ldi	r24, 0xEA	; 234
    4b4e:	97 e0       	ldi	r25, 0x07	; 7
    4b50:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4b54:	82 ee       	ldi	r24, 0xE2	; 226
    4b56:	97 e0       	ldi	r25, 0x07	; 7
    4b58:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4b5c:	c7 fb       	bst	r28, 7
    4b5e:	cc 27       	eor	r28, r28
    4b60:	c0 f9       	bld	r28, 0
    4b62:	1f 92       	push	r1
    4b64:	cf 93       	push	r28
    4b66:	8f ed       	ldi	r24, 0xDF	; 223
    4b68:	97 e0       	ldi	r25, 0x07	; 7
    4b6a:	9f 93       	push	r25
    4b6c:	8f 93       	push	r24
    4b6e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4b72:	8d ed       	ldi	r24, 0xDD	; 221
    4b74:	97 e0       	ldi	r25, 0x07	; 7
    4b76:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4b7a:	8d b7       	in	r24, 0x3d	; 61
    4b7c:	9e b7       	in	r25, 0x3e	; 62
    4b7e:	4c 96       	adiw	r24, 0x1c	; 28
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	9e bf       	out	0x3e, r25	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	8d bf       	out	0x3d, r24	; 61
    4b8a:	04 c0       	rjmp	.+8      	; 0x4b94 <command_common+0x330>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4b8c:	80 e4       	ldi	r24, 0x40	; 64
    4b8e:	97 e0       	ldi	r25, 0x07	; 7
    4b90:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4b94:	c1 e0       	ldi	r28, 0x01	; 1
    4b96:	b2 c0       	rjmp	.+356    	; 0x4cfc <command_common+0x498>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4b98:	80 91 ba 01 	lds	r24, 0x01BA
    4b9c:	c8 2f       	mov	r28, r24
    4b9e:	c1 70       	andi	r28, 0x01	; 1
    4ba0:	80 ff       	sbrs	r24, 0
    4ba2:	09 c0       	rjmp	.+18     	; 0x4bb6 <command_common+0x352>
                print("\ndebug: off\n");
    4ba4:	8a ee       	ldi	r24, 0xEA	; 234
    4ba6:	9a e0       	ldi	r25, 0x0A	; 10
    4ba8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
                debug_matrix   = false;
    4bac:	80 91 ba 01 	lds	r24, 0x01BA
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4bb0:	81 7f       	andi	r24, 0xF1	; 241
    4bb2:	8e 7f       	andi	r24, 0xFE	; 254
    4bb4:	44 c0       	rjmp	.+136    	; 0x4c3e <command_common+0x3da>
            } else {
                print("\ndebug: on\n");
    4bb6:	8e ed       	ldi	r24, 0xDE	; 222
    4bb8:	9a e0       	ldi	r25, 0x0A	; 10
    4bba:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
                debug_enable   = true;
    4bbe:	80 91 ba 01 	lds	r24, 0x01BA
    4bc2:	81 60       	ori	r24, 0x01	; 1
    4bc4:	80 93 ba 01 	sts	0x01BA, r24
    4bc8:	e5 cf       	rjmp	.-54     	; 0x4b94 <command_common+0x330>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4bca:	80 91 ba 01 	lds	r24, 0x01BA
    4bce:	81 fb       	bst	r24, 1
    4bd0:	cc 27       	eor	r28, r28
    4bd2:	c0 f9       	bld	r28, 0
    4bd4:	91 e0       	ldi	r25, 0x01	; 1
    4bd6:	c9 27       	eor	r28, r25
    4bd8:	c0 fb       	bst	r28, 0
    4bda:	81 f9       	bld	r24, 1
    4bdc:	80 93 ba 01 	sts	0x01BA, r24
            if (debug_matrix) {
    4be0:	cc 23       	and	r28, r28
    4be2:	19 f0       	breq	.+6      	; 0x4bea <command_common+0x386>
                print("\nmatrix: on\n");
    4be4:	81 ed       	ldi	r24, 0xD1	; 209
    4be6:	9a e0       	ldi	r25, 0x0A	; 10
    4be8:	25 c0       	rjmp	.+74     	; 0x4c34 <command_common+0x3d0>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4bea:	83 ec       	ldi	r24, 0xC3	; 195
    4bec:	9a e0       	ldi	r25, 0x0A	; 10
    4bee:	d0 cf       	rjmp	.-96     	; 0x4b90 <command_common+0x32c>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4bf0:	80 91 ba 01 	lds	r24, 0x01BA
    4bf4:	82 fb       	bst	r24, 2
    4bf6:	cc 27       	eor	r28, r28
    4bf8:	c0 f9       	bld	r28, 0
    4bfa:	91 e0       	ldi	r25, 0x01	; 1
    4bfc:	c9 27       	eor	r28, r25
    4bfe:	c0 fb       	bst	r28, 0
    4c00:	82 f9       	bld	r24, 2
    4c02:	80 93 ba 01 	sts	0x01BA, r24
            if (debug_keyboard) {
    4c06:	cc 23       	and	r28, r28
    4c08:	19 f0       	breq	.+6      	; 0x4c10 <command_common+0x3ac>
                print("\nkeyboard: on\n");
    4c0a:	84 eb       	ldi	r24, 0xB4	; 180
    4c0c:	9a e0       	ldi	r25, 0x0A	; 10
    4c0e:	12 c0       	rjmp	.+36     	; 0x4c34 <command_common+0x3d0>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4c10:	84 ea       	ldi	r24, 0xA4	; 164
    4c12:	9a e0       	ldi	r25, 0x0A	; 10
    4c14:	bd cf       	rjmp	.-134    	; 0x4b90 <command_common+0x32c>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4c16:	80 91 ba 01 	lds	r24, 0x01BA
    4c1a:	83 fb       	bst	r24, 3
    4c1c:	cc 27       	eor	r28, r28
    4c1e:	c0 f9       	bld	r28, 0
    4c20:	91 e0       	ldi	r25, 0x01	; 1
    4c22:	c9 27       	eor	r28, r25
    4c24:	c0 fb       	bst	r28, 0
    4c26:	83 f9       	bld	r24, 3
    4c28:	80 93 ba 01 	sts	0x01BA, r24
            if (debug_mouse) {
    4c2c:	cc 23       	and	r28, r28
    4c2e:	51 f0       	breq	.+20     	; 0x4c44 <command_common+0x3e0>
                print("\nmouse: on\n");
    4c30:	88 e9       	ldi	r24, 0x98	; 152
    4c32:	9a e0       	ldi	r25, 0x0A	; 10
    4c34:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
                debug_enable = true;
    4c38:	80 91 ba 01 	lds	r24, 0x01BA
    4c3c:	81 60       	ori	r24, 0x01	; 1
    4c3e:	80 93 ba 01 	sts	0x01BA, r24
    4c42:	5c c0       	rjmp	.+184    	; 0x4cfc <command_common+0x498>
            } else {
                print("\nmouse: off\n");
    4c44:	8b e8       	ldi	r24, 0x8B	; 139
    4c46:	9a e0       	ldi	r25, 0x0A	; 10
    4c48:	a3 cf       	rjmp	.-186    	; 0x4b90 <command_common+0x32c>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4c4a:	8c e7       	ldi	r24, 0x7C	; 124
    4c4c:	9a e0       	ldi	r25, 0x0A	; 10
    4c4e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4c52:	83 e5       	ldi	r24, 0x53	; 83
    4c54:	9a e0       	ldi	r25, 0x0A	; 10
    4c56:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4c5a:	8e e1       	ldi	r24, 0x1E	; 30
    4c5c:	9a e0       	ldi	r25, 0x0A	; 10
    4c5e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4c62:	87 ef       	ldi	r24, 0xF7	; 247
    4c64:	99 e0       	ldi	r25, 0x09	; 9
    4c66:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            /* build options */
            print("OPTIONS:"
    4c6a:	87 eb       	ldi	r24, 0xB7	; 183
    4c6c:	99 e0       	ldi	r25, 0x09	; 9
    4c6e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4c72:	8b e8       	ldi	r24, 0x8B	; 139
    4c74:	99 e0       	ldi	r25, 0x09	; 9
    4c76:	8c cf       	rjmp	.-232    	; 0x4b90 <command_common+0x32c>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4c78:	8d e7       	ldi	r24, 0x7D	; 125
    4c7a:	99 e0       	ldi	r25, 0x09	; 9
    4c7c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            print_val_hex8(host_keyboard_leds());
    4c80:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <host_keyboard_leds>
    4c84:	1f 92       	push	r1
    4c86:	8f 93       	push	r24
    4c88:	83 e6       	ldi	r24, 0x63	; 99
    4c8a:	99 e0       	ldi	r25, 0x09	; 9
    4c8c:	9f 93       	push	r25
    4c8e:	8f 93       	push	r24
    4c90:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4c94:	80 91 0b 01 	lds	r24, 0x010B
    4c98:	1f 92       	push	r1
    4c9a:	8f 93       	push	r24
    4c9c:	8c e4       	ldi	r24, 0x4C	; 76
    4c9e:	99 e0       	ldi	r25, 0x09	; 9
    4ca0:	9f 93       	push	r25
    4ca2:	8f 93       	push	r24
    4ca4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
            print_val_hex8(keyboard_idle);
    4ca8:	80 91 5b 01 	lds	r24, 0x015B
    4cac:	1f 92       	push	r1
    4cae:	8f 93       	push	r24
    4cb0:	89 e3       	ldi	r24, 0x39	; 57
    4cb2:	99 e0       	ldi	r25, 0x09	; 9
    4cb4:	9f 93       	push	r25
    4cb6:	8f 93       	push	r24
    4cb8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_read32());
    4cbc:	0e 94 b5 1c 	call	0x396a	; 0x396a <timer_read32>
    4cc0:	9f 93       	push	r25
    4cc2:	8f 93       	push	r24
    4cc4:	7f 93       	push	r23
    4cc6:	6f 93       	push	r22
    4cc8:	82 e2       	ldi	r24, 0x22	; 34
    4cca:	99 e0       	ldi	r25, 0x09	; 9
    4ccc:	9f 93       	push	r25
    4cce:	8f 93       	push	r24
    4cd0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4cd4:	8d b7       	in	r24, 0x3d	; 61
    4cd6:	9e b7       	in	r25, 0x3e	; 62
    4cd8:	42 96       	adiw	r24, 0x12	; 18
    4cda:	0f b6       	in	r0, 0x3f	; 63
    4cdc:	f8 94       	cli
    4cde:	9e bf       	out	0x3e, r25	; 62
    4ce0:	0f be       	out	0x3f, r0	; 63
    4ce2:	8d bf       	out	0x3d, r24	; 61
    4ce4:	57 cf       	rjmp	.-338    	; 0x4b94 <command_common+0x330>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4ce6:	80 e0       	ldi	r24, 0x00	; 0
    4ce8:	01 c0       	rjmp	.+2      	; 0x4cec <command_common+0x488>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4cea:	8d 51       	subi	r24, 0x1D	; 29
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4cec:	0e 94 14 24 	call	0x4828	; 0x4828 <switch_default_layer>
    4cf0:	51 cf       	rjmp	.-350    	; 0x4b94 <command_common+0x330>
            break;
        default:
            print("?");
    4cf2:	80 e2       	ldi	r24, 0x20	; 32
    4cf4:	99 e0       	ldi	r25, 0x09	; 9
    4cf6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            return false;
    4cfa:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4cfc:	8c 2f       	mov	r24, r28
    4cfe:	cf 91       	pop	r28
    4d00:	08 95       	ret

00004d02 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4d02:	80 e0       	ldi	r24, 0x00	; 0
    4d04:	08 95       	ret

00004d06 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4d06:	80 e0       	ldi	r24, 0x00	; 0
    4d08:	08 95       	ret

00004d0a <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4d0a:	cf 93       	push	r28
    4d0c:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4d0e:	80 91 ca 01 	lds	r24, 0x01CA
    4d12:	81 30       	cpi	r24, 0x01	; 1
    4d14:	71 f0       	breq	.+28     	; 0x4d32 <command_proc+0x28>
    4d16:	20 f0       	brcs	.+8      	; 0x4d20 <command_proc+0x16>
    4d18:	82 30       	cpi	r24, 0x02	; 2
    4d1a:	09 f4       	brne	.+2      	; 0x4d1e <command_proc+0x14>
    4d1c:	48 c0       	rjmp	.+144    	; 0x4dae <command_proc+0xa4>
    4d1e:	3f c1       	rjmp	.+638    	; 0x4f9e <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    4d20:	a0 91 0c 01 	lds	r26, 0x010C
    4d24:	b0 91 0d 01 	lds	r27, 0x010D
    4d28:	8c 91       	ld	r24, X
    4d2a:	82 32       	cpi	r24, 0x22	; 34
    4d2c:	09 f0       	breq	.+2      	; 0x4d30 <command_proc+0x26>
    4d2e:	39 c1       	rjmp	.+626    	; 0x4fa2 <command_proc+0x298>
    4d30:	07 c0       	rjmp	.+14     	; 0x4d40 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4d32:	a0 91 0c 01 	lds	r26, 0x010C
    4d36:	b0 91 0d 01 	lds	r27, 0x010D
    4d3a:	8c 91       	ld	r24, X
    4d3c:	82 32       	cpi	r24, 0x22	; 34
    4d3e:	49 f4       	brne	.+18     	; 0x4d52 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    4d40:	8c 2f       	mov	r24, r28
    4d42:	0e 94 81 26 	call	0x4d02	; 0x4d02 <command_extra>
    4d46:	81 11       	cpse	r24, r1
    4d48:	2f c0       	rjmp	.+94     	; 0x4da8 <command_proc+0x9e>
    4d4a:	8c 2f       	mov	r24, r28
    4d4c:	0e 94 32 24 	call	0x4864	; 0x4864 <command_common>
    4d50:	2c c0       	rjmp	.+88     	; 0x4daa <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    4d52:	8c 2f       	mov	r24, r28
    4d54:	0e 94 83 26 	call	0x4d06	; 0x4d06 <command_console_extra>
    4d58:	81 11       	cpse	r24, r1
    4d5a:	26 c0       	rjmp	.+76     	; 0x4da8 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4d5c:	c4 31       	cpi	r28, 0x14	; 20
    4d5e:	e1 f0       	breq	.+56     	; 0x4d98 <command_proc+0x8e>
    4d60:	70 f4       	brcc	.+28     	; 0x4d7e <command_proc+0x74>
    4d62:	cb 30       	cpi	r28, 0x0B	; 11
    4d64:	81 f0       	breq	.+32     	; 0x4d86 <command_proc+0x7c>
    4d66:	c0 31       	cpi	r28, 0x10	; 16
    4d68:	d1 f4       	brne	.+52     	; 0x4d9e <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4d6a:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <mousekey_console_help>
            print("M> ");
    4d6e:	8c e0       	ldi	r24, 0x0C	; 12
    4d70:	97 e0       	ldi	r25, 0x07	; 7
    4d72:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
            command_state = MOUSEKEY;
    4d76:	82 e0       	ldi	r24, 0x02	; 2
    4d78:	80 93 ca 01 	sts	0x01CA, r24
    4d7c:	15 c0       	rjmp	.+42     	; 0x4da8 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4d7e:	c9 32       	cpi	r28, 0x29	; 41
    4d80:	59 f0       	breq	.+22     	; 0x4d98 <command_proc+0x8e>
    4d82:	c8 33       	cpi	r28, 0x38	; 56
    4d84:	61 f4       	brne	.+24     	; 0x4d9e <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4d86:	89 e1       	ldi	r24, 0x19	; 25
    4d88:	97 e0       	ldi	r25, 0x07	; 7
    4d8a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4d8e:	80 e1       	ldi	r24, 0x10	; 16
    4d90:	97 e0       	ldi	r25, 0x07	; 7
    4d92:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4d96:	08 c0       	rjmp	.+16     	; 0x4da8 <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4d98:	10 92 ca 01 	sts	0x01CA, r1
    4d9c:	04 c1       	rjmp	.+520    	; 0x4fa6 <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4d9e:	8a e0       	ldi	r24, 0x0A	; 10
    4da0:	97 e0       	ldi	r25, 0x07	; 7
    4da2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4da6:	ff c0       	rjmp	.+510    	; 0x4fa6 <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4da8:	81 e0       	ldi	r24, 0x01	; 1
    4daa:	81 70       	andi	r24, 0x01	; 1
    4dac:	fe c0       	rjmp	.+508    	; 0x4faa <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4dae:	c4 32       	cpi	r28, 0x24	; 36
    4db0:	28 f5       	brcc	.+74     	; 0x4dfc <command_proc+0xf2>
    4db2:	ce 31       	cpi	r28, 0x1E	; 30
    4db4:	08 f0       	brcs	.+2      	; 0x4db8 <command_proc+0xae>
    4db6:	c1 c0       	rjmp	.+386    	; 0x4f3a <command_proc+0x230>
    4db8:	cb 30       	cpi	r28, 0x0B	; 11
    4dba:	a1 f1       	breq	.+104    	; 0x4e24 <command_proc+0x11a>
    4dbc:	d0 f4       	brcc	.+52     	; 0x4df2 <command_proc+0xe8>
    4dbe:	c7 30       	cpi	r28, 0x07	; 7
    4dc0:	09 f0       	breq	.+2      	; 0x4dc4 <command_proc+0xba>
    4dc2:	d3 c0       	rjmp	.+422    	; 0x4f6a <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4dc4:	8e e1       	ldi	r24, 0x1E	; 30
    4dc6:	80 93 13 01 	sts	0x0113, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4dca:	82 e3       	ldi	r24, 0x32	; 50
    4dcc:	80 93 12 01 	sts	0x0112, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4dd0:	8a e0       	ldi	r24, 0x0A	; 10
    4dd2:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4dd6:	84 e1       	ldi	r24, 0x14	; 20
    4dd8:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4ddc:	88 e0       	ldi	r24, 0x08	; 8
    4dde:	80 93 0f 01 	sts	0x010F, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4de2:	88 e2       	ldi	r24, 0x28	; 40
    4de4:	80 93 0e 01 	sts	0x010E, r24
            print("set default\n");
    4de8:	80 eb       	ldi	r24, 0xB0	; 176
    4dea:	95 e0       	ldi	r25, 0x05	; 5
    4dec:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4df0:	bf c0       	rjmp	.+382    	; 0x4f70 <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4df2:	c3 31       	cpi	r28, 0x13	; 19
    4df4:	49 f1       	breq	.+82     	; 0x4e48 <command_proc+0x13e>
    4df6:	c4 31       	cpi	r28, 0x14	; 20
    4df8:	c1 f0       	breq	.+48     	; 0x4e2a <command_proc+0x120>
    4dfa:	b7 c0       	rjmp	.+366    	; 0x4f6a <command_proc+0x260>
    4dfc:	cb 34       	cpi	r28, 0x4B	; 75
    4dfe:	09 f4       	brne	.+2      	; 0x4e02 <command_proc+0xf8>
    4e00:	a9 c0       	rjmp	.+338    	; 0x4f54 <command_proc+0x24a>
    4e02:	28 f4       	brcc	.+10     	; 0x4e0e <command_proc+0x104>
    4e04:	c9 32       	cpi	r28, 0x29	; 41
    4e06:	89 f0       	breq	.+34     	; 0x4e2a <command_proc+0x120>
    4e08:	c8 33       	cpi	r28, 0x38	; 56
    4e0a:	61 f0       	breq	.+24     	; 0x4e24 <command_proc+0x11a>
    4e0c:	ae c0       	rjmp	.+348    	; 0x4f6a <command_proc+0x260>
    4e0e:	c1 35       	cpi	r28, 0x51	; 81
    4e10:	09 f4       	brne	.+2      	; 0x4e14 <command_proc+0x10a>
    4e12:	9e c0       	rjmp	.+316    	; 0x4f50 <command_proc+0x246>
    4e14:	c2 35       	cpi	r28, 0x52	; 82
    4e16:	09 f4       	brne	.+2      	; 0x4e1a <command_proc+0x110>
    4e18:	99 c0       	rjmp	.+306    	; 0x4f4c <command_proc+0x242>
    4e1a:	ce 34       	cpi	r28, 0x4E	; 78
    4e1c:	09 f0       	breq	.+2      	; 0x4e20 <command_proc+0x116>
    4e1e:	a5 c0       	rjmp	.+330    	; 0x4f6a <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4e20:	6a e0       	ldi	r22, 0x0A	; 10
    4e22:	9e c0       	rjmp	.+316    	; 0x4f60 <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4e24:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <mousekey_console_help>
    4e28:	a3 c0       	rjmp	.+326    	; 0x4f70 <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    4e2a:	80 91 c9 01 	lds	r24, 0x01C9
    4e2e:	88 23       	and	r24, r24
    4e30:	19 f0       	breq	.+6      	; 0x4e38 <command_proc+0x12e>
                mousekey_param = 0;
    4e32:	10 92 c9 01 	sts	0x01C9, r1
    4e36:	9c c0       	rjmp	.+312    	; 0x4f70 <command_proc+0x266>
            } else {
                print("C> ");
    4e38:	8d eb       	ldi	r24, 0xBD	; 189
    4e3a:	95 e0       	ldi	r25, 0x05	; 5
    4e3c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
                command_state = CONSOLE;
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	80 93 ca 01 	sts	0x01CA, r24
    4e46:	b1 c0       	rjmp	.+354    	; 0x4faa <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    4e48:	87 e9       	ldi	r24, 0x97	; 151
    4e4a:	95 e0       	ldi	r25, 0x05	; 5
    4e4c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4e50:	85 e8       	ldi	r24, 0x85	; 133
    4e52:	95 e0       	ldi	r25, 0x05	; 5
    4e54:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4e58:	80 91 13 01 	lds	r24, 0x0113
    4e5c:	1f 92       	push	r1
    4e5e:	8f 93       	push	r24
    4e60:	82 e8       	ldi	r24, 0x82	; 130
    4e62:	95 e0       	ldi	r25, 0x05	; 5
    4e64:	9f 93       	push	r25
    4e66:	8f 93       	push	r24
    4e68:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4e6c:	80 e8       	ldi	r24, 0x80	; 128
    4e6e:	95 e0       	ldi	r25, 0x05	; 5
    4e70:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4e74:	8e e6       	ldi	r24, 0x6E	; 110
    4e76:	95 e0       	ldi	r25, 0x05	; 5
    4e78:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4e7c:	80 91 12 01 	lds	r24, 0x0112
    4e80:	1f 92       	push	r1
    4e82:	8f 93       	push	r24
    4e84:	8b e6       	ldi	r24, 0x6B	; 107
    4e86:	95 e0       	ldi	r25, 0x05	; 5
    4e88:	9f 93       	push	r25
    4e8a:	8f 93       	push	r24
    4e8c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4e90:	89 e6       	ldi	r24, 0x69	; 105
    4e92:	95 e0       	ldi	r25, 0x05	; 5
    4e94:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    4e98:	8a e5       	ldi	r24, 0x5A	; 90
    4e9a:	95 e0       	ldi	r25, 0x05	; 5
    4e9c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4ea0:	80 91 11 01 	lds	r24, 0x0111
    4ea4:	1f 92       	push	r1
    4ea6:	8f 93       	push	r24
    4ea8:	87 e5       	ldi	r24, 0x57	; 87
    4eaa:	95 e0       	ldi	r25, 0x05	; 5
    4eac:	9f 93       	push	r25
    4eae:	8f 93       	push	r24
    4eb0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4eb4:	85 e5       	ldi	r24, 0x55	; 85
    4eb6:	95 e0       	ldi	r25, 0x05	; 5
    4eb8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    4ebc:	84 e4       	ldi	r24, 0x44	; 68
    4ebe:	95 e0       	ldi	r25, 0x05	; 5
    4ec0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4ec4:	80 91 10 01 	lds	r24, 0x0110
    4ec8:	1f 92       	push	r1
    4eca:	8f 93       	push	r24
    4ecc:	81 e4       	ldi	r24, 0x41	; 65
    4ece:	95 e0       	ldi	r25, 0x05	; 5
    4ed0:	9f 93       	push	r25
    4ed2:	8f 93       	push	r24
    4ed4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4ed8:	8f e3       	ldi	r24, 0x3F	; 63
    4eda:	95 e0       	ldi	r25, 0x05	; 5
    4edc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    4ee0:	8a e2       	ldi	r24, 0x2A	; 42
    4ee2:	95 e0       	ldi	r25, 0x05	; 5
    4ee4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4ee8:	80 91 0f 01 	lds	r24, 0x010F
    4eec:	1f 92       	push	r1
    4eee:	8f 93       	push	r24
    4ef0:	87 e2       	ldi	r24, 0x27	; 39
    4ef2:	95 e0       	ldi	r25, 0x05	; 5
    4ef4:	9f 93       	push	r25
    4ef6:	8f 93       	push	r24
    4ef8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4efc:	85 e2       	ldi	r24, 0x25	; 37
    4efe:	95 e0       	ldi	r25, 0x05	; 5
    4f00:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    4f04:	8e e0       	ldi	r24, 0x0E	; 14
    4f06:	95 e0       	ldi	r25, 0x05	; 5
    4f08:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4f0c:	80 91 0e 01 	lds	r24, 0x010E
    4f10:	1f 92       	push	r1
    4f12:	8f 93       	push	r24
    4f14:	8b e0       	ldi	r24, 0x0B	; 11
    4f16:	95 e0       	ldi	r25, 0x05	; 5
    4f18:	9f 93       	push	r25
    4f1a:	8f 93       	push	r24
    4f1c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4f20:	89 e0       	ldi	r24, 0x09	; 9
    4f22:	95 e0       	ldi	r25, 0x05	; 5
    4f24:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
    4f28:	8d b7       	in	r24, 0x3d	; 61
    4f2a:	9e b7       	in	r25, 0x3e	; 62
    4f2c:	48 96       	adiw	r24, 0x18	; 24
    4f2e:	0f b6       	in	r0, 0x3f	; 63
    4f30:	f8 94       	cli
    4f32:	9e bf       	out	0x3e, r25	; 62
    4f34:	0f be       	out	0x3f, r0	; 63
    4f36:	8d bf       	out	0x3d, r24	; 61
    4f38:	1b c0       	rjmp	.+54     	; 0x4f70 <command_proc+0x266>
    4f3a:	ce 51       	subi	r28, 0x1E	; 30
    4f3c:	ec 2f       	mov	r30, r28
    4f3e:	f0 e0       	ldi	r31, 0x00	; 0
    4f40:	e7 5d       	subi	r30, 0xD7	; 215
    4f42:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    4f44:	80 81       	ld	r24, Z
    4f46:	80 93 c9 01 	sts	0x01C9, r24
    4f4a:	12 c0       	rjmp	.+36     	; 0x4f70 <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    4f4c:	61 e0       	ldi	r22, 0x01	; 1
    4f4e:	03 c0       	rjmp	.+6      	; 0x4f56 <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    4f50:	61 e0       	ldi	r22, 0x01	; 1
    4f52:	06 c0       	rjmp	.+12     	; 0x4f60 <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    4f54:	6a e0       	ldi	r22, 0x0A	; 10
    4f56:	80 91 c9 01 	lds	r24, 0x01C9
    4f5a:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <mousekey_param_inc>
    4f5e:	08 c0       	rjmp	.+16     	; 0x4f70 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4f60:	80 91 c9 01 	lds	r24, 0x01C9
    4f64:	0e 94 96 23 	call	0x472c	; 0x472c <mousekey_param_dec>
    4f68:	03 c0       	rjmp	.+6      	; 0x4f70 <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    4f6a:	8e ea       	ldi	r24, 0xAE	; 174
    4f6c:	95 e0       	ldi	r25, 0x05	; 5
    4f6e:	13 c0       	rjmp	.+38     	; 0x4f96 <command_proc+0x28c>
            return false;
    }
    if (mousekey_param) {
    4f70:	80 91 c9 01 	lds	r24, 0x01C9
    4f74:	88 23       	and	r24, r24
    4f76:	69 f0       	breq	.+26     	; 0x4f92 <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    4f78:	1f 92       	push	r1
    4f7a:	8f 93       	push	r24
    4f7c:	88 ea       	ldi	r24, 0xA8	; 168
    4f7e:	95 e0       	ldi	r25, 0x05	; 5
    4f80:	9f 93       	push	r25
    4f82:	8f 93       	push	r24
    4f84:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__xprintf>
    4f88:	0f 90       	pop	r0
    4f8a:	0f 90       	pop	r0
    4f8c:	0f 90       	pop	r0
    4f8e:	0f 90       	pop	r0
    4f90:	04 c0       	rjmp	.+8      	; 0x4f9a <command_proc+0x290>
    } else {
        print("M>" );
    4f92:	85 ea       	ldi	r24, 0xA5	; 165
    4f94:	95 e0       	ldi	r25, 0x05	; 5
    4f96:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	06 c0       	rjmp	.+12     	; 0x4faa <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    4f9e:	10 92 ca 01 	sts	0x01CA, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    4fa2:	80 e0       	ldi	r24, 0x00	; 0
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
    4fa8:	00 cf       	rjmp	.-512    	; 0x4daa <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    4faa:	cf 91       	pop	r28
    4fac:	08 95       	ret

00004fae <__fixsfsi>:
    4fae:	04 d0       	rcall	.+8      	; 0x4fb8 <__fixunssfsi>
    4fb0:	68 94       	set
    4fb2:	b1 11       	cpse	r27, r1
    4fb4:	8d c0       	rjmp	.+282    	; 0x50d0 <__fp_szero>
    4fb6:	08 95       	ret

00004fb8 <__fixunssfsi>:
    4fb8:	70 d0       	rcall	.+224    	; 0x509a <__fp_splitA>
    4fba:	88 f0       	brcs	.+34     	; 0x4fde <__fixunssfsi+0x26>
    4fbc:	9f 57       	subi	r25, 0x7F	; 127
    4fbe:	90 f0       	brcs	.+36     	; 0x4fe4 <__fixunssfsi+0x2c>
    4fc0:	b9 2f       	mov	r27, r25
    4fc2:	99 27       	eor	r25, r25
    4fc4:	b7 51       	subi	r27, 0x17	; 23
    4fc6:	a0 f0       	brcs	.+40     	; 0x4ff0 <__fixunssfsi+0x38>
    4fc8:	d1 f0       	breq	.+52     	; 0x4ffe <__fixunssfsi+0x46>
    4fca:	66 0f       	add	r22, r22
    4fcc:	77 1f       	adc	r23, r23
    4fce:	88 1f       	adc	r24, r24
    4fd0:	99 1f       	adc	r25, r25
    4fd2:	1a f0       	brmi	.+6      	; 0x4fda <__fixunssfsi+0x22>
    4fd4:	ba 95       	dec	r27
    4fd6:	c9 f7       	brne	.-14     	; 0x4fca <__fixunssfsi+0x12>
    4fd8:	12 c0       	rjmp	.+36     	; 0x4ffe <__fixunssfsi+0x46>
    4fda:	b1 30       	cpi	r27, 0x01	; 1
    4fdc:	81 f0       	breq	.+32     	; 0x4ffe <__fixunssfsi+0x46>
    4fde:	77 d0       	rcall	.+238    	; 0x50ce <__fp_zero>
    4fe0:	b1 e0       	ldi	r27, 0x01	; 1
    4fe2:	08 95       	ret
    4fe4:	74 c0       	rjmp	.+232    	; 0x50ce <__fp_zero>
    4fe6:	67 2f       	mov	r22, r23
    4fe8:	78 2f       	mov	r23, r24
    4fea:	88 27       	eor	r24, r24
    4fec:	b8 5f       	subi	r27, 0xF8	; 248
    4fee:	39 f0       	breq	.+14     	; 0x4ffe <__fixunssfsi+0x46>
    4ff0:	b9 3f       	cpi	r27, 0xF9	; 249
    4ff2:	cc f3       	brlt	.-14     	; 0x4fe6 <__fixunssfsi+0x2e>
    4ff4:	86 95       	lsr	r24
    4ff6:	77 95       	ror	r23
    4ff8:	67 95       	ror	r22
    4ffa:	b3 95       	inc	r27
    4ffc:	d9 f7       	brne	.-10     	; 0x4ff4 <__fixunssfsi+0x3c>
    4ffe:	3e f4       	brtc	.+14     	; 0x500e <__fixunssfsi+0x56>
    5000:	90 95       	com	r25
    5002:	80 95       	com	r24
    5004:	70 95       	com	r23
    5006:	61 95       	neg	r22
    5008:	7f 4f       	sbci	r23, 0xFF	; 255
    500a:	8f 4f       	sbci	r24, 0xFF	; 255
    500c:	9f 4f       	sbci	r25, 0xFF	; 255
    500e:	08 95       	ret

00005010 <__floatunsisf>:
    5010:	e8 94       	clt
    5012:	09 c0       	rjmp	.+18     	; 0x5026 <__floatsisf+0x12>

00005014 <__floatsisf>:
    5014:	97 fb       	bst	r25, 7
    5016:	3e f4       	brtc	.+14     	; 0x5026 <__floatsisf+0x12>
    5018:	90 95       	com	r25
    501a:	80 95       	com	r24
    501c:	70 95       	com	r23
    501e:	61 95       	neg	r22
    5020:	7f 4f       	sbci	r23, 0xFF	; 255
    5022:	8f 4f       	sbci	r24, 0xFF	; 255
    5024:	9f 4f       	sbci	r25, 0xFF	; 255
    5026:	99 23       	and	r25, r25
    5028:	a9 f0       	breq	.+42     	; 0x5054 <__floatsisf+0x40>
    502a:	f9 2f       	mov	r31, r25
    502c:	96 e9       	ldi	r25, 0x96	; 150
    502e:	bb 27       	eor	r27, r27
    5030:	93 95       	inc	r25
    5032:	f6 95       	lsr	r31
    5034:	87 95       	ror	r24
    5036:	77 95       	ror	r23
    5038:	67 95       	ror	r22
    503a:	b7 95       	ror	r27
    503c:	f1 11       	cpse	r31, r1
    503e:	f8 cf       	rjmp	.-16     	; 0x5030 <__floatsisf+0x1c>
    5040:	fa f4       	brpl	.+62     	; 0x5080 <__floatsisf+0x6c>
    5042:	bb 0f       	add	r27, r27
    5044:	11 f4       	brne	.+4      	; 0x504a <__floatsisf+0x36>
    5046:	60 ff       	sbrs	r22, 0
    5048:	1b c0       	rjmp	.+54     	; 0x5080 <__floatsisf+0x6c>
    504a:	6f 5f       	subi	r22, 0xFF	; 255
    504c:	7f 4f       	sbci	r23, 0xFF	; 255
    504e:	8f 4f       	sbci	r24, 0xFF	; 255
    5050:	9f 4f       	sbci	r25, 0xFF	; 255
    5052:	16 c0       	rjmp	.+44     	; 0x5080 <__floatsisf+0x6c>
    5054:	88 23       	and	r24, r24
    5056:	11 f0       	breq	.+4      	; 0x505c <__floatsisf+0x48>
    5058:	96 e9       	ldi	r25, 0x96	; 150
    505a:	11 c0       	rjmp	.+34     	; 0x507e <__floatsisf+0x6a>
    505c:	77 23       	and	r23, r23
    505e:	21 f0       	breq	.+8      	; 0x5068 <__floatsisf+0x54>
    5060:	9e e8       	ldi	r25, 0x8E	; 142
    5062:	87 2f       	mov	r24, r23
    5064:	76 2f       	mov	r23, r22
    5066:	05 c0       	rjmp	.+10     	; 0x5072 <__floatsisf+0x5e>
    5068:	66 23       	and	r22, r22
    506a:	71 f0       	breq	.+28     	; 0x5088 <__floatsisf+0x74>
    506c:	96 e8       	ldi	r25, 0x86	; 134
    506e:	86 2f       	mov	r24, r22
    5070:	70 e0       	ldi	r23, 0x00	; 0
    5072:	60 e0       	ldi	r22, 0x00	; 0
    5074:	2a f0       	brmi	.+10     	; 0x5080 <__floatsisf+0x6c>
    5076:	9a 95       	dec	r25
    5078:	66 0f       	add	r22, r22
    507a:	77 1f       	adc	r23, r23
    507c:	88 1f       	adc	r24, r24
    507e:	da f7       	brpl	.-10     	; 0x5076 <__floatsisf+0x62>
    5080:	88 0f       	add	r24, r24
    5082:	96 95       	lsr	r25
    5084:	87 95       	ror	r24
    5086:	97 f9       	bld	r25, 7
    5088:	08 95       	ret

0000508a <__fp_split3>:
    508a:	57 fd       	sbrc	r21, 7
    508c:	90 58       	subi	r25, 0x80	; 128
    508e:	44 0f       	add	r20, r20
    5090:	55 1f       	adc	r21, r21
    5092:	59 f0       	breq	.+22     	; 0x50aa <__fp_splitA+0x10>
    5094:	5f 3f       	cpi	r21, 0xFF	; 255
    5096:	71 f0       	breq	.+28     	; 0x50b4 <__fp_splitA+0x1a>
    5098:	47 95       	ror	r20

0000509a <__fp_splitA>:
    509a:	88 0f       	add	r24, r24
    509c:	97 fb       	bst	r25, 7
    509e:	99 1f       	adc	r25, r25
    50a0:	61 f0       	breq	.+24     	; 0x50ba <__fp_splitA+0x20>
    50a2:	9f 3f       	cpi	r25, 0xFF	; 255
    50a4:	79 f0       	breq	.+30     	; 0x50c4 <__fp_splitA+0x2a>
    50a6:	87 95       	ror	r24
    50a8:	08 95       	ret
    50aa:	12 16       	cp	r1, r18
    50ac:	13 06       	cpc	r1, r19
    50ae:	14 06       	cpc	r1, r20
    50b0:	55 1f       	adc	r21, r21
    50b2:	f2 cf       	rjmp	.-28     	; 0x5098 <__fp_split3+0xe>
    50b4:	46 95       	lsr	r20
    50b6:	f1 df       	rcall	.-30     	; 0x509a <__fp_splitA>
    50b8:	08 c0       	rjmp	.+16     	; 0x50ca <__fp_splitA+0x30>
    50ba:	16 16       	cp	r1, r22
    50bc:	17 06       	cpc	r1, r23
    50be:	18 06       	cpc	r1, r24
    50c0:	99 1f       	adc	r25, r25
    50c2:	f1 cf       	rjmp	.-30     	; 0x50a6 <__fp_splitA+0xc>
    50c4:	86 95       	lsr	r24
    50c6:	71 05       	cpc	r23, r1
    50c8:	61 05       	cpc	r22, r1
    50ca:	08 94       	sec
    50cc:	08 95       	ret

000050ce <__fp_zero>:
    50ce:	e8 94       	clt

000050d0 <__fp_szero>:
    50d0:	bb 27       	eor	r27, r27
    50d2:	66 27       	eor	r22, r22
    50d4:	77 27       	eor	r23, r23
    50d6:	cb 01       	movw	r24, r22
    50d8:	97 f9       	bld	r25, 7
    50da:	08 95       	ret

000050dc <__mulsf3>:
    50dc:	0b d0       	rcall	.+22     	; 0x50f4 <__mulsf3x>
    50de:	78 c0       	rjmp	.+240    	; 0x51d0 <__fp_round>
    50e0:	69 d0       	rcall	.+210    	; 0x51b4 <__fp_pscA>
    50e2:	28 f0       	brcs	.+10     	; 0x50ee <__mulsf3+0x12>
    50e4:	6e d0       	rcall	.+220    	; 0x51c2 <__fp_pscB>
    50e6:	18 f0       	brcs	.+6      	; 0x50ee <__mulsf3+0x12>
    50e8:	95 23       	and	r25, r21
    50ea:	09 f0       	breq	.+2      	; 0x50ee <__mulsf3+0x12>
    50ec:	5a c0       	rjmp	.+180    	; 0x51a2 <__fp_inf>
    50ee:	5f c0       	rjmp	.+190    	; 0x51ae <__fp_nan>
    50f0:	11 24       	eor	r1, r1
    50f2:	ee cf       	rjmp	.-36     	; 0x50d0 <__fp_szero>

000050f4 <__mulsf3x>:
    50f4:	ca df       	rcall	.-108    	; 0x508a <__fp_split3>
    50f6:	a0 f3       	brcs	.-24     	; 0x50e0 <__mulsf3+0x4>

000050f8 <__mulsf3_pse>:
    50f8:	95 9f       	mul	r25, r21
    50fa:	d1 f3       	breq	.-12     	; 0x50f0 <__mulsf3+0x14>
    50fc:	95 0f       	add	r25, r21
    50fe:	50 e0       	ldi	r21, 0x00	; 0
    5100:	55 1f       	adc	r21, r21
    5102:	62 9f       	mul	r22, r18
    5104:	f0 01       	movw	r30, r0
    5106:	72 9f       	mul	r23, r18
    5108:	bb 27       	eor	r27, r27
    510a:	f0 0d       	add	r31, r0
    510c:	b1 1d       	adc	r27, r1
    510e:	63 9f       	mul	r22, r19
    5110:	aa 27       	eor	r26, r26
    5112:	f0 0d       	add	r31, r0
    5114:	b1 1d       	adc	r27, r1
    5116:	aa 1f       	adc	r26, r26
    5118:	64 9f       	mul	r22, r20
    511a:	66 27       	eor	r22, r22
    511c:	b0 0d       	add	r27, r0
    511e:	a1 1d       	adc	r26, r1
    5120:	66 1f       	adc	r22, r22
    5122:	82 9f       	mul	r24, r18
    5124:	22 27       	eor	r18, r18
    5126:	b0 0d       	add	r27, r0
    5128:	a1 1d       	adc	r26, r1
    512a:	62 1f       	adc	r22, r18
    512c:	73 9f       	mul	r23, r19
    512e:	b0 0d       	add	r27, r0
    5130:	a1 1d       	adc	r26, r1
    5132:	62 1f       	adc	r22, r18
    5134:	83 9f       	mul	r24, r19
    5136:	a0 0d       	add	r26, r0
    5138:	61 1d       	adc	r22, r1
    513a:	22 1f       	adc	r18, r18
    513c:	74 9f       	mul	r23, r20
    513e:	33 27       	eor	r19, r19
    5140:	a0 0d       	add	r26, r0
    5142:	61 1d       	adc	r22, r1
    5144:	23 1f       	adc	r18, r19
    5146:	84 9f       	mul	r24, r20
    5148:	60 0d       	add	r22, r0
    514a:	21 1d       	adc	r18, r1
    514c:	82 2f       	mov	r24, r18
    514e:	76 2f       	mov	r23, r22
    5150:	6a 2f       	mov	r22, r26
    5152:	11 24       	eor	r1, r1
    5154:	9f 57       	subi	r25, 0x7F	; 127
    5156:	50 40       	sbci	r21, 0x00	; 0
    5158:	8a f0       	brmi	.+34     	; 0x517c <__mulsf3_pse+0x84>
    515a:	e1 f0       	breq	.+56     	; 0x5194 <__mulsf3_pse+0x9c>
    515c:	88 23       	and	r24, r24
    515e:	4a f0       	brmi	.+18     	; 0x5172 <__mulsf3_pse+0x7a>
    5160:	ee 0f       	add	r30, r30
    5162:	ff 1f       	adc	r31, r31
    5164:	bb 1f       	adc	r27, r27
    5166:	66 1f       	adc	r22, r22
    5168:	77 1f       	adc	r23, r23
    516a:	88 1f       	adc	r24, r24
    516c:	91 50       	subi	r25, 0x01	; 1
    516e:	50 40       	sbci	r21, 0x00	; 0
    5170:	a9 f7       	brne	.-22     	; 0x515c <__mulsf3_pse+0x64>
    5172:	9e 3f       	cpi	r25, 0xFE	; 254
    5174:	51 05       	cpc	r21, r1
    5176:	70 f0       	brcs	.+28     	; 0x5194 <__mulsf3_pse+0x9c>
    5178:	14 c0       	rjmp	.+40     	; 0x51a2 <__fp_inf>
    517a:	aa cf       	rjmp	.-172    	; 0x50d0 <__fp_szero>
    517c:	5f 3f       	cpi	r21, 0xFF	; 255
    517e:	ec f3       	brlt	.-6      	; 0x517a <__mulsf3_pse+0x82>
    5180:	98 3e       	cpi	r25, 0xE8	; 232
    5182:	dc f3       	brlt	.-10     	; 0x517a <__mulsf3_pse+0x82>
    5184:	86 95       	lsr	r24
    5186:	77 95       	ror	r23
    5188:	67 95       	ror	r22
    518a:	b7 95       	ror	r27
    518c:	f7 95       	ror	r31
    518e:	e7 95       	ror	r30
    5190:	9f 5f       	subi	r25, 0xFF	; 255
    5192:	c1 f7       	brne	.-16     	; 0x5184 <__mulsf3_pse+0x8c>
    5194:	fe 2b       	or	r31, r30
    5196:	88 0f       	add	r24, r24
    5198:	91 1d       	adc	r25, r1
    519a:	96 95       	lsr	r25
    519c:	87 95       	ror	r24
    519e:	97 f9       	bld	r25, 7
    51a0:	08 95       	ret

000051a2 <__fp_inf>:
    51a2:	97 f9       	bld	r25, 7
    51a4:	9f 67       	ori	r25, 0x7F	; 127
    51a6:	80 e8       	ldi	r24, 0x80	; 128
    51a8:	70 e0       	ldi	r23, 0x00	; 0
    51aa:	60 e0       	ldi	r22, 0x00	; 0
    51ac:	08 95       	ret

000051ae <__fp_nan>:
    51ae:	9f ef       	ldi	r25, 0xFF	; 255
    51b0:	80 ec       	ldi	r24, 0xC0	; 192
    51b2:	08 95       	ret

000051b4 <__fp_pscA>:
    51b4:	00 24       	eor	r0, r0
    51b6:	0a 94       	dec	r0
    51b8:	16 16       	cp	r1, r22
    51ba:	17 06       	cpc	r1, r23
    51bc:	18 06       	cpc	r1, r24
    51be:	09 06       	cpc	r0, r25
    51c0:	08 95       	ret

000051c2 <__fp_pscB>:
    51c2:	00 24       	eor	r0, r0
    51c4:	0a 94       	dec	r0
    51c6:	12 16       	cp	r1, r18
    51c8:	13 06       	cpc	r1, r19
    51ca:	14 06       	cpc	r1, r20
    51cc:	05 06       	cpc	r0, r21
    51ce:	08 95       	ret

000051d0 <__fp_round>:
    51d0:	09 2e       	mov	r0, r25
    51d2:	03 94       	inc	r0
    51d4:	00 0c       	add	r0, r0
    51d6:	11 f4       	brne	.+4      	; 0x51dc <__fp_round+0xc>
    51d8:	88 23       	and	r24, r24
    51da:	52 f0       	brmi	.+20     	; 0x51f0 <__fp_round+0x20>
    51dc:	bb 0f       	add	r27, r27
    51de:	40 f4       	brcc	.+16     	; 0x51f0 <__fp_round+0x20>
    51e0:	bf 2b       	or	r27, r31
    51e2:	11 f4       	brne	.+4      	; 0x51e8 <__fp_round+0x18>
    51e4:	60 ff       	sbrs	r22, 0
    51e6:	04 c0       	rjmp	.+8      	; 0x51f0 <__fp_round+0x20>
    51e8:	6f 5f       	subi	r22, 0xFF	; 255
    51ea:	7f 4f       	sbci	r23, 0xFF	; 255
    51ec:	8f 4f       	sbci	r24, 0xFF	; 255
    51ee:	9f 4f       	sbci	r25, 0xFF	; 255
    51f0:	08 95       	ret

000051f2 <__udivmodqi4>:
    51f2:	99 1b       	sub	r25, r25
    51f4:	79 e0       	ldi	r23, 0x09	; 9
    51f6:	04 c0       	rjmp	.+8      	; 0x5200 <__udivmodqi4_ep>

000051f8 <__udivmodqi4_loop>:
    51f8:	99 1f       	adc	r25, r25
    51fa:	96 17       	cp	r25, r22
    51fc:	08 f0       	brcs	.+2      	; 0x5200 <__udivmodqi4_ep>
    51fe:	96 1b       	sub	r25, r22

00005200 <__udivmodqi4_ep>:
    5200:	88 1f       	adc	r24, r24
    5202:	7a 95       	dec	r23
    5204:	c9 f7       	brne	.-14     	; 0x51f8 <__udivmodqi4_loop>
    5206:	80 95       	com	r24
    5208:	08 95       	ret

0000520a <__divmodhi4>:
    520a:	97 fb       	bst	r25, 7
    520c:	07 2e       	mov	r0, r23
    520e:	16 f4       	brtc	.+4      	; 0x5214 <__divmodhi4+0xa>
    5210:	00 94       	com	r0
    5212:	07 d0       	rcall	.+14     	; 0x5222 <__divmodhi4_neg1>
    5214:	77 fd       	sbrc	r23, 7
    5216:	09 d0       	rcall	.+18     	; 0x522a <__divmodhi4_neg2>
    5218:	0e 94 1f 29 	call	0x523e	; 0x523e <__udivmodhi4>
    521c:	07 fc       	sbrc	r0, 7
    521e:	05 d0       	rcall	.+10     	; 0x522a <__divmodhi4_neg2>
    5220:	3e f4       	brtc	.+14     	; 0x5230 <__divmodhi4_exit>

00005222 <__divmodhi4_neg1>:
    5222:	90 95       	com	r25
    5224:	81 95       	neg	r24
    5226:	9f 4f       	sbci	r25, 0xFF	; 255
    5228:	08 95       	ret

0000522a <__divmodhi4_neg2>:
    522a:	70 95       	com	r23
    522c:	61 95       	neg	r22
    522e:	7f 4f       	sbci	r23, 0xFF	; 255

00005230 <__divmodhi4_exit>:
    5230:	08 95       	ret

00005232 <__tablejump2__>:
    5232:	ee 0f       	add	r30, r30
    5234:	ff 1f       	adc	r31, r31

00005236 <__tablejump__>:
    5236:	05 90       	lpm	r0, Z+
    5238:	f4 91       	lpm	r31, Z
    523a:	e0 2d       	mov	r30, r0
    523c:	09 94       	ijmp

0000523e <__udivmodhi4>:
    523e:	aa 1b       	sub	r26, r26
    5240:	bb 1b       	sub	r27, r27
    5242:	51 e1       	ldi	r21, 0x11	; 17
    5244:	07 c0       	rjmp	.+14     	; 0x5254 <__udivmodhi4_ep>

00005246 <__udivmodhi4_loop>:
    5246:	aa 1f       	adc	r26, r26
    5248:	bb 1f       	adc	r27, r27
    524a:	a6 17       	cp	r26, r22
    524c:	b7 07       	cpc	r27, r23
    524e:	10 f0       	brcs	.+4      	; 0x5254 <__udivmodhi4_ep>
    5250:	a6 1b       	sub	r26, r22
    5252:	b7 0b       	sbc	r27, r23

00005254 <__udivmodhi4_ep>:
    5254:	88 1f       	adc	r24, r24
    5256:	99 1f       	adc	r25, r25
    5258:	5a 95       	dec	r21
    525a:	a9 f7       	brne	.-22     	; 0x5246 <__udivmodhi4_loop>
    525c:	80 95       	com	r24
    525e:	90 95       	com	r25
    5260:	bc 01       	movw	r22, r24
    5262:	cd 01       	movw	r24, r26
    5264:	08 95       	ret

00005266 <__eerd_byte_usb1286>:
    5266:	f9 99       	sbic	0x1f, 1	; 31
    5268:	fe cf       	rjmp	.-4      	; 0x5266 <__eerd_byte_usb1286>
    526a:	92 bd       	out	0x22, r25	; 34
    526c:	81 bd       	out	0x21, r24	; 33
    526e:	f8 9a       	sbi	0x1f, 0	; 31
    5270:	99 27       	eor	r25, r25
    5272:	80 b5       	in	r24, 0x20	; 32
    5274:	08 95       	ret

00005276 <__eerd_word_usb1286>:
    5276:	a8 e1       	ldi	r26, 0x18	; 24
    5278:	b0 e0       	ldi	r27, 0x00	; 0
    527a:	42 e0       	ldi	r20, 0x02	; 2
    527c:	50 e0       	ldi	r21, 0x00	; 0
    527e:	0c 94 56 29 	jmp	0x52ac	; 0x52ac <__eerd_blraw_usb1286>

00005282 <__eewr_byte_usb1286>:
    5282:	26 2f       	mov	r18, r22

00005284 <__eewr_r18_usb1286>:
    5284:	f9 99       	sbic	0x1f, 1	; 31
    5286:	fe cf       	rjmp	.-4      	; 0x5284 <__eewr_r18_usb1286>
    5288:	1f ba       	out	0x1f, r1	; 31
    528a:	92 bd       	out	0x22, r25	; 34
    528c:	81 bd       	out	0x21, r24	; 33
    528e:	20 bd       	out	0x20, r18	; 32
    5290:	0f b6       	in	r0, 0x3f	; 63
    5292:	f8 94       	cli
    5294:	fa 9a       	sbi	0x1f, 2	; 31
    5296:	f9 9a       	sbi	0x1f, 1	; 31
    5298:	0f be       	out	0x3f, r0	; 63
    529a:	01 96       	adiw	r24, 0x01	; 1
    529c:	08 95       	ret

0000529e <__eewr_word_usb1286>:
    529e:	0e 94 41 29 	call	0x5282	; 0x5282 <__eewr_byte_usb1286>
    52a2:	27 2f       	mov	r18, r23
    52a4:	0c 94 42 29 	jmp	0x5284	; 0x5284 <__eewr_r18_usb1286>

000052a8 <__eerd_block_usb1286>:
    52a8:	dc 01       	movw	r26, r24
    52aa:	cb 01       	movw	r24, r22

000052ac <__eerd_blraw_usb1286>:
    52ac:	fc 01       	movw	r30, r24
    52ae:	f9 99       	sbic	0x1f, 1	; 31
    52b0:	fe cf       	rjmp	.-4      	; 0x52ae <__eerd_blraw_usb1286+0x2>
    52b2:	06 c0       	rjmp	.+12     	; 0x52c0 <__eerd_blraw_usb1286+0x14>
    52b4:	f2 bd       	out	0x22, r31	; 34
    52b6:	e1 bd       	out	0x21, r30	; 33
    52b8:	f8 9a       	sbi	0x1f, 0	; 31
    52ba:	31 96       	adiw	r30, 0x01	; 1
    52bc:	00 b4       	in	r0, 0x20	; 32
    52be:	0d 92       	st	X+, r0
    52c0:	41 50       	subi	r20, 0x01	; 1
    52c2:	50 40       	sbci	r21, 0x00	; 0
    52c4:	b8 f7       	brcc	.-18     	; 0x52b4 <__eerd_blraw_usb1286+0x8>
    52c6:	08 95       	ret

000052c8 <_exit>:
    52c8:	f8 94       	cli

000052ca <__stop_program>:
    52ca:	ff cf       	rjmp	.-2      	; 0x52ca <__stop_program>
