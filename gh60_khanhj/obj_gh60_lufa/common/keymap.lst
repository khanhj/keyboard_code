   1               		.file	"keymap.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.keycode_to_action,"ax",@progbits
  13               	keycode_to_action:
  14               	.LFB13:
  15               		.file 1 "../../tmk_core/common/keymap.c"
   1:../../tmk_core/common/keymap.c **** /*
   2:../../tmk_core/common/keymap.c **** Copyright 2013,2016 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keymap.c **** 
   4:../../tmk_core/common/keymap.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keymap.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keymap.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keymap.c **** (at your option) any later version.
   8:../../tmk_core/common/keymap.c **** 
   9:../../tmk_core/common/keymap.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keymap.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keymap.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keymap.c **** GNU General Public License for more details.
  13:../../tmk_core/common/keymap.c **** 
  14:../../tmk_core/common/keymap.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keymap.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keymap.c **** */
  17:../../tmk_core/common/keymap.c **** #include "keymap.h"
  18:../../tmk_core/common/keymap.c **** #include "report.h"
  19:../../tmk_core/common/keymap.c **** #include "keycode.h"
  20:../../tmk_core/common/keymap.c **** #include "action_layer.h"
  21:../../tmk_core/common/keymap.c **** #include "action.h"
  22:../../tmk_core/common/keymap.c **** #include "action_macro.h"
  23:../../tmk_core/common/keymap.c **** #include "wait.h"
  24:../../tmk_core/common/keymap.c **** #include "debug.h"
  25:../../tmk_core/common/keymap.c **** #include "bootloader.h"
  26:../../tmk_core/common/keymap.c **** #if defined(__AVR__)
  27:../../tmk_core/common/keymap.c **** #include <avr/pgmspace.h>
  28:../../tmk_core/common/keymap.c **** #endif
  29:../../tmk_core/common/keymap.c **** 
  30:../../tmk_core/common/keymap.c **** #ifdef BOOTMAGIC_ENABLE
  31:../../tmk_core/common/keymap.c **** extern keymap_config_t keymap_config;
  32:../../tmk_core/common/keymap.c **** #endif
  33:../../tmk_core/common/keymap.c **** 
  34:../../tmk_core/common/keymap.c **** static action_t keycode_to_action(uint8_t keycode);
  35:../../tmk_core/common/keymap.c **** 
  36:../../tmk_core/common/keymap.c **** 
  37:../../tmk_core/common/keymap.c **** /* converts key to action */
  38:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
  39:../../tmk_core/common/keymap.c **** action_t action_for_key(uint8_t layer, keypos_t key)
  40:../../tmk_core/common/keymap.c **** {
  41:../../tmk_core/common/keymap.c ****     uint8_t keycode = keymap_key_to_keycode(layer, key);
  42:../../tmk_core/common/keymap.c ****     switch (keycode) {
  43:../../tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
  44:../../tmk_core/common/keymap.c ****             return keymap_fn_to_action(keycode);
  45:../../tmk_core/common/keymap.c **** #ifdef BOOTMAGIC_ENABLE
  46:../../tmk_core/common/keymap.c ****         case KC_CAPSLOCK:
  47:../../tmk_core/common/keymap.c ****         case KC_LOCKING_CAPS:
  48:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
  49:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LCTL);
  50:../../tmk_core/common/keymap.c ****             }
  51:../../tmk_core/common/keymap.c ****             return keycode_to_action(keycode);
  52:../../tmk_core/common/keymap.c ****         case KC_LCTL:
  53:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock) {
  54:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_CAPSLOCK);
  55:../../tmk_core/common/keymap.c ****             }
  56:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_LCTL);
  57:../../tmk_core/common/keymap.c ****         case KC_LALT:
  58:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_lalt_lgui) {
  59:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
  60:../../tmk_core/common/keymap.c ****                     return keycode_to_action(KC_NO);
  61:../../tmk_core/common/keymap.c ****                 }
  62:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LGUI);
  63:../../tmk_core/common/keymap.c ****             }
  64:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_LALT);
  65:../../tmk_core/common/keymap.c ****         case KC_LGUI:
  66:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_lalt_lgui) {
  67:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LALT);
  68:../../tmk_core/common/keymap.c ****             }
  69:../../tmk_core/common/keymap.c ****             if (keymap_config.no_gui) {
  70:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_NO);
  71:../../tmk_core/common/keymap.c ****             }
  72:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_LGUI);
  73:../../tmk_core/common/keymap.c ****         case KC_RALT:
  74:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_ralt_rgui) {
  75:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
  76:../../tmk_core/common/keymap.c ****                     return keycode_to_action(KC_NO);
  77:../../tmk_core/common/keymap.c ****                 }
  78:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RGUI);
  79:../../tmk_core/common/keymap.c ****             }
  80:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_RALT);
  81:../../tmk_core/common/keymap.c ****         case KC_RGUI:
  82:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_ralt_rgui) {
  83:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RALT);
  84:../../tmk_core/common/keymap.c ****             }
  85:../../tmk_core/common/keymap.c ****             if (keymap_config.no_gui) {
  86:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_NO);
  87:../../tmk_core/common/keymap.c ****             }
  88:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_RGUI);
  89:../../tmk_core/common/keymap.c ****         case KC_GRAVE:
  90:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_grave_esc) {
  91:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_ESC);
  92:../../tmk_core/common/keymap.c ****             }
  93:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_GRAVE);
  94:../../tmk_core/common/keymap.c ****         case KC_ESC:
  95:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_grave_esc) {
  96:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_GRAVE);
  97:../../tmk_core/common/keymap.c ****             }
  98:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_ESC);
  99:../../tmk_core/common/keymap.c ****         case KC_BSLASH:
 100:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_backslash_backspace) {
 101:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSPACE);
 102:../../tmk_core/common/keymap.c ****             }
 103:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_BSLASH);
 104:../../tmk_core/common/keymap.c ****         case KC_BSPACE:
 105:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_backslash_backspace) {
 106:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSLASH);
 107:../../tmk_core/common/keymap.c ****             }
 108:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_BSPACE);
 109:../../tmk_core/common/keymap.c **** #endif
 110:../../tmk_core/common/keymap.c ****         default:
 111:../../tmk_core/common/keymap.c ****             return keycode_to_action(keycode);
 112:../../tmk_core/common/keymap.c ****     }
 113:../../tmk_core/common/keymap.c **** }
 114:../../tmk_core/common/keymap.c **** 
 115:../../tmk_core/common/keymap.c **** 
 116:../../tmk_core/common/keymap.c **** /* Macro */
 117:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 118:../../tmk_core/common/keymap.c **** const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
 119:../../tmk_core/common/keymap.c **** {
 120:../../tmk_core/common/keymap.c ****     (void)record;
 121:../../tmk_core/common/keymap.c ****     (void)id;
 122:../../tmk_core/common/keymap.c ****     (void)opt;
 123:../../tmk_core/common/keymap.c ****     return MACRO_NONE;
 124:../../tmk_core/common/keymap.c **** }
 125:../../tmk_core/common/keymap.c **** 
 126:../../tmk_core/common/keymap.c **** /* Function */
 127:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 128:../../tmk_core/common/keymap.c **** void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
 129:../../tmk_core/common/keymap.c **** {
 130:../../tmk_core/common/keymap.c ****     (void)record;
 131:../../tmk_core/common/keymap.c ****     (void)id;
 132:../../tmk_core/common/keymap.c ****     (void)opt;
 133:../../tmk_core/common/keymap.c **** }
 134:../../tmk_core/common/keymap.c **** 
 135:../../tmk_core/common/keymap.c **** 
 136:../../tmk_core/common/keymap.c **** 
 137:../../tmk_core/common/keymap.c **** /* translates keycode to action */
 138:../../tmk_core/common/keymap.c **** static action_t keycode_to_action(uint8_t keycode)
 139:../../tmk_core/common/keymap.c **** {
  16               		.loc 1 139 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 140:../../tmk_core/common/keymap.c ****     switch (keycode) {
  23               		.loc 1 140 0
  24 0000 8D3B      		cpi r24,lo8(-67)
  25 0002 00F4      		brsh .L3
  26 0004 883A      		cpi r24,lo8(-88)
  27 0006 00F4      		brsh .L4
  28 0008 853A      		cpi r24,lo8(-91)
  29 000a 00F4      		brsh .L5
  30 000c 8430      		cpi r24,lo8(4)
  31 000e 00F4      		brsh .L6
  32 0010 8130      		cpi r24,lo8(1)
  33 0012 01F0      		breq .+2
  34 0014 00C0      		rjmp .L2
 141:../../tmk_core/common/keymap.c ****         case KC_A ... KC_EXSEL:
 142:../../tmk_core/common/keymap.c ****         case KC_LCTRL ... KC_RGUI:
 143:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_KEY(keycode);
 144:../../tmk_core/common/keymap.c ****             break;
 145:../../tmk_core/common/keymap.c ****         case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
 146:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
 147:../../tmk_core/common/keymap.c ****             break;
 148:../../tmk_core/common/keymap.c ****         case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 150:../../tmk_core/common/keymap.c ****             break;
 151:../../tmk_core/common/keymap.c ****         case KC_MS_UP ... KC_MS_ACCEL2:
 152:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_MOUSEKEY(keycode);
 153:../../tmk_core/common/keymap.c ****             break;
 154:../../tmk_core/common/keymap.c ****         case KC_TRNS:
 155:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_TRANSPARENT;
  35               		.loc 1 155 0
  36 0016 81E0      		ldi r24,lo8(1)
  37 0018 90E0      		ldi r25,0
  38               	.LVL1:
  39 001a 0895      		ret
  40               	.LVL2:
  41               	.L3:
 140:../../tmk_core/common/keymap.c ****     switch (keycode) {
  42               		.loc 1 140 0
  43 001c 883E      		cpi r24,lo8(-24)
  44 001e 00F4      		brsh .L8
  45 0020 803E      		cpi r24,lo8(-32)
  46 0022 00F4      		brsh .L6
  47 0024 8F3B      		cpi r24,lo8(-65)
  48 0026 01F0      		breq .+2
  49 0028 00C0      		rjmp .L2
 156:../../tmk_core/common/keymap.c ****             break;
 157:../../tmk_core/common/keymap.c ****         case KC_BOOTLOADER:
 158:../../tmk_core/common/keymap.c ****             clear_keyboard();
  50               		.loc 1 158 0
  51 002a 0E94 0000 		call clear_keyboard
  52               	.LVL3:
  53               	.LBB4:
  54               	.LBB5:
  55               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  56               		.loc 2 164 0
  57 002e 2FEF      		ldi r18,lo8(159999)
  58 0030 80E7      		ldi r24,hi8(159999)
  59 0032 92E0      		ldi r25,hlo8(159999)
  60 0034 2150      		1: subi r18,1
  61 0036 8040      		sbci r24,0
  62 0038 9040      		sbci r25,0
  63 003a 01F4      		brne 1b
  64 003c 00C0      		rjmp .
  65 003e 0000      		nop
  66               	.LBE5:
  67               	.LBE4:
 159:../../tmk_core/common/keymap.c ****             wait_ms(50);
 160:../../tmk_core/common/keymap.c ****             bootloader_jump(); // not return
  68               		.loc 1 160 0
  69 0040 0E94 0000 		call bootloader_jump
  70               	.LVL4:
  71 0044 00C0      		rjmp .L2
  72               	.LVL5:
  73               	.L8:
 140:../../tmk_core/common/keymap.c ****     switch (keycode) {
  74               		.loc 1 140 0
  75 0046 803F      		cpi r24,lo8(-16)
  76 0048 00F4      		brsh .+2
  77 004a 00C0      		rjmp .L2
 152:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_MOUSEKEY(keycode);
  78               		.loc 1 152 0
  79 004c 90E0      		ldi r25,0
  80 004e 9065      		ori r25,80
  81               	.LVL6:
  82 0050 0895      		ret
  83               	.LVL7:
  84               	.L6:
 143:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_KEY(keycode);
  85               		.loc 1 143 0
  86 0052 90E0      		ldi r25,0
  87 0054 0895      		ret
  88               	.L5:
 146:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
  89               		.loc 1 146 0
  90 0056 853A      		cpi r24,lo8(-91)
  91 0058 01F0      		breq .L14
 146:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
  92               		.loc 1 146 0 is_stmt 0 discriminator 1
  93 005a 863A      		cpi r24,lo8(-90)
  94 005c 01F4      		brne .L15
 146:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
  95               		.loc 1 146 0
  96 005e 32E8      		ldi r19,lo8(-126)
  97 0060 00C0      		rjmp .L38
  98               	.L14:
  99 0062 31E8      		ldi r19,lo8(-127)
 100 0064 00C0      		rjmp .L38
 101               	.L15:
 102 0066 33E8      		ldi r19,lo8(-125)
 103               	.L38:
 104 0068 20E4      		ldi r18,lo8(64)
 105 006a 00C0      		rjmp .L13
 106               	.L4:
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 107               		.loc 1 149 0 is_stmt 1
 108 006c 883A      		cpi r24,lo8(-88)
 109 006e 01F0      		breq .L16
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 110               		.loc 1 149 0 is_stmt 0 discriminator 1
 111 0070 893A      		cpi r24,lo8(-87)
 112 0072 01F0      		breq .L17
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 113               		.loc 1 149 0 discriminator 3
 114 0074 8A3A      		cpi r24,lo8(-86)
 115 0076 01F0      		breq .L18
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 116               		.loc 1 149 0 discriminator 5
 117 0078 8B3A      		cpi r24,lo8(-85)
 118 007a 01F0      		breq .L19
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 119               		.loc 1 149 0 discriminator 7
 120 007c 8C3A      		cpi r24,lo8(-84)
 121 007e 01F0      		breq .L20
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 122               		.loc 1 149 0 discriminator 9
 123 0080 8D3A      		cpi r24,lo8(-83)
 124 0082 01F0      		breq .L21
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 125               		.loc 1 149 0 discriminator 11
 126 0084 8E3A      		cpi r24,lo8(-82)
 127 0086 01F0      		breq .L22
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 128               		.loc 1 149 0 discriminator 13
 129 0088 8F3A      		cpi r24,lo8(-81)
 130 008a 01F0      		breq .L23
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 131               		.loc 1 149 0 discriminator 15
 132 008c 813B      		cpi r24,lo8(-79)
 133 008e 01F0      		breq .L24
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 134               		.loc 1 149 0 discriminator 17
 135 0090 803B      		cpi r24,lo8(-80)
 136 0092 01F0      		breq .L25
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 137               		.loc 1 149 0 discriminator 19
 138 0094 823B      		cpi r24,lo8(-78)
 139 0096 01F0      		breq .L26
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 140               		.loc 1 149 0 discriminator 21
 141 0098 833B      		cpi r24,lo8(-77)
 142 009a 01F0      		breq .L27
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 143               		.loc 1 149 0 discriminator 23
 144 009c 843B      		cpi r24,lo8(-76)
 145 009e 01F0      		breq .L28
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 146               		.loc 1 149 0 discriminator 25
 147 00a0 853B      		cpi r24,lo8(-75)
 148 00a2 01F0      		breq .L29
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 149               		.loc 1 149 0 discriminator 27
 150 00a4 863B      		cpi r24,lo8(-74)
 151 00a6 01F0      		breq .L30
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 152               		.loc 1 149 0 discriminator 29
 153 00a8 873B      		cpi r24,lo8(-73)
 154 00aa 01F0      		breq .L31
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 155               		.loc 1 149 0 discriminator 31
 156 00ac 883B      		cpi r24,lo8(-72)
 157 00ae 01F0      		breq .L32
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 158               		.loc 1 149 0 discriminator 33
 159 00b0 893B      		cpi r24,lo8(-71)
 160 00b2 01F0      		breq .L33
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 161               		.loc 1 149 0 discriminator 35
 162 00b4 8A3B      		cpi r24,lo8(-70)
 163 00b6 01F0      		breq .L34
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 164               		.loc 1 149 0 discriminator 37
 165 00b8 8B3B      		cpi r24,lo8(-69)
 166 00ba 01F0      		breq .L35
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 167               		.loc 1 149 0 discriminator 39
 168 00bc 8C3B      		cpi r24,lo8(-68)
 169 00be 01F4      		brne .L36
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 170               		.loc 1 149 0
 171 00c0 3AE2      		ldi r19,lo8(42)
 172 00c2 00C0      		rjmp .L39
 173               	.L16:
 174 00c4 32EE      		ldi r19,lo8(-30)
 175 00c6 00C0      		rjmp .L40
 176               	.L17:
 177 00c8 39EE      		ldi r19,lo8(-23)
 178 00ca 00C0      		rjmp .L40
 179               	.L18:
 180 00cc 3AEE      		ldi r19,lo8(-22)
 181 00ce 00C0      		rjmp .L40
 182               	.L19:
 183 00d0 35EB      		ldi r19,lo8(-75)
 184 00d2 00C0      		rjmp .L40
 185               	.L20:
 186 00d4 36EB      		ldi r19,lo8(-74)
 187 00d6 00C0      		rjmp .L40
 188               	.L21:
 189 00d8 33EB      		ldi r19,lo8(-77)
 190 00da 00C0      		rjmp .L40
 191               	.L22:
 192 00dc 34EB      		ldi r19,lo8(-76)
 193 00de 00C0      		rjmp .L40
 194               	.L23:
 195 00e0 37EB      		ldi r19,lo8(-73)
 196 00e2 00C0      		rjmp .L40
 197               	.L24:
 198 00e4 3CEC      		ldi r19,lo8(-52)
 199 00e6 00C0      		rjmp .L40
 200               	.L25:
 201 00e8 3DEC      		ldi r19,lo8(-51)
 202 00ea 00C0      		rjmp .L40
 203               	.L26:
 204 00ec 33E8      		ldi r19,lo8(-125)
 205 00ee 00C0      		rjmp .L41
 206               	.L27:
 207 00f0 3AE8      		ldi r19,lo8(-118)
 208 00f2 00C0      		rjmp .L41
 209               	.L28:
 210 00f4 32E9      		ldi r19,lo8(-110)
 211 00f6 00C0      		rjmp .L41
 212               	.L29:
 213 00f8 34E9      		ldi r19,lo8(-108)
 214               	.L41:
 215 00fa 25E4      		ldi r18,lo8(69)
 216 00fc 00C0      		rjmp .L13
 217               	.L30:
 218 00fe 31E2      		ldi r19,lo8(33)
 219 0100 00C0      		rjmp .L39
 220               	.L31:
 221 0102 33E2      		ldi r19,lo8(35)
 222 0104 00C0      		rjmp .L39
 223               	.L32:
 224 0106 34E2      		ldi r19,lo8(36)
 225 0108 00C0      		rjmp .L39
 226               	.L33:
 227 010a 35E2      		ldi r19,lo8(37)
 228 010c 00C0      		rjmp .L39
 229               	.L34:
 230 010e 36E2      		ldi r19,lo8(38)
 231               	.L39:
 232 0110 26E4      		ldi r18,lo8(70)
 233 0112 00C0      		rjmp .L13
 234               	.L35:
 235 0114 37E2      		ldi r19,lo8(39)
 236 0116 00C0      		rjmp .L39
 237               	.L36:
 238 0118 30E0      		ldi r19,0
 239               	.L40:
 240 011a 24E4      		ldi r18,lo8(68)
 241               	.L13:
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 242               		.loc 1 149 0 discriminator 43
 243 011c 832F      		mov r24,r19
 244               	.LVL8:
 245 011e 922F      		mov r25,r18
 246 0120 0895      		ret
 247               	.L2:
 161:../../tmk_core/common/keymap.c ****             break;
 162:../../tmk_core/common/keymap.c ****         default:
 163:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_NO;
 248               		.loc 1 163 0 is_stmt 1
 249 0122 80E0      		ldi r24,0
 250 0124 90E0      		ldi r25,0
 164:../../tmk_core/common/keymap.c ****             break;
 165:../../tmk_core/common/keymap.c ****     }
 166:../../tmk_core/common/keymap.c ****     return (action_t)ACTION_NO;
 167:../../tmk_core/common/keymap.c **** }
 251               		.loc 1 167 0
 252 0126 0895      		ret
 253               		.cfi_endproc
 254               	.LFE13:
 256               		.section	.text.action_get_macro,"ax",@progbits
 257               		.weak	action_get_macro
 259               	action_get_macro:
 260               	.LFB11:
 119:../../tmk_core/common/keymap.c **** {
 261               		.loc 1 119 0
 262               		.cfi_startproc
 263               	.LVL9:
 264               	/* prologue: function */
 265               	/* frame size = 0 */
 266               	/* stack size = 0 */
 267               	.L__stack_usage = 0
 124:../../tmk_core/common/keymap.c **** }
 268               		.loc 1 124 0
 269 0000 80E0      		ldi r24,0
 270 0002 90E0      		ldi r25,0
 271               	.LVL10:
 272 0004 0895      		ret
 273               		.cfi_endproc
 274               	.LFE11:
 276               		.section	.text.action_function,"ax",@progbits
 277               		.weak	action_function
 279               	action_function:
 280               	.LFB12:
 129:../../tmk_core/common/keymap.c **** {
 281               		.loc 1 129 0
 282               		.cfi_startproc
 283               	.LVL11:
 284               	/* prologue: function */
 285               	/* frame size = 0 */
 286               	/* stack size = 0 */
 287               	.L__stack_usage = 0
 288 0000 0895      		ret
 289               		.cfi_endproc
 290               	.LFE12:
 292               		.section	.text.keymap_key_to_keycode,"ax",@progbits
 293               		.weak	keymap_key_to_keycode
 295               	keymap_key_to_keycode:
 296               	.LFB14:
 168:../../tmk_core/common/keymap.c **** 
 169:../../tmk_core/common/keymap.c **** 
 170:../../tmk_core/common/keymap.c **** 
 171:../../tmk_core/common/keymap.c **** #ifdef USE_LEGACY_KEYMAP
 172:../../tmk_core/common/keymap.c **** /*
 173:../../tmk_core/common/keymap.c ****  * Legacy keymap support
 174:../../tmk_core/common/keymap.c ****  *      Consider using new keymap API instead.
 175:../../tmk_core/common/keymap.c ****  */
 176:../../tmk_core/common/keymap.c **** extern const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 177:../../tmk_core/common/keymap.c **** extern const uint8_t fn_layer[];
 178:../../tmk_core/common/keymap.c **** extern const uint8_t fn_keycode[];
 179:../../tmk_core/common/keymap.c **** 
 180:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 181:../../tmk_core/common/keymap.c **** uint8_t keymap_get_keycode(uint8_t layer, uint8_t row, uint8_t col)
 182:../../tmk_core/common/keymap.c **** {
 183:../../tmk_core/common/keymap.c ****     return pgm_read_byte(&keymaps[(layer)][(row)][(col)]);
 184:../../tmk_core/common/keymap.c **** }
 185:../../tmk_core/common/keymap.c **** 
 186:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 187:../../tmk_core/common/keymap.c **** uint8_t keymap_fn_layer(uint8_t index)
 188:../../tmk_core/common/keymap.c **** {
 189:../../tmk_core/common/keymap.c ****     return pgm_read_byte(&fn_layer[index]);
 190:../../tmk_core/common/keymap.c **** }
 191:../../tmk_core/common/keymap.c **** 
 192:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 193:../../tmk_core/common/keymap.c **** uint8_t keymap_fn_keycode(uint8_t index)
 194:../../tmk_core/common/keymap.c **** {
 195:../../tmk_core/common/keymap.c ****     return pgm_read_byte(&fn_keycode[index]);
 196:../../tmk_core/common/keymap.c **** }
 197:../../tmk_core/common/keymap.c **** 
 198:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 199:../../tmk_core/common/keymap.c **** uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
 200:../../tmk_core/common/keymap.c **** {
 201:../../tmk_core/common/keymap.c ****     return keymap_get_keycode(layer, key.row, key.col);
 202:../../tmk_core/common/keymap.c **** }
 203:../../tmk_core/common/keymap.c **** 
 204:../../tmk_core/common/keymap.c **** 
 205:../../tmk_core/common/keymap.c **** /* Legacy keymap support */
 206:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 207:../../tmk_core/common/keymap.c **** action_t keymap_fn_to_action(uint8_t keycode)
 208:../../tmk_core/common/keymap.c **** {
 209:../../tmk_core/common/keymap.c ****     switch (keycode) {
 210:../../tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
 211:../../tmk_core/common/keymap.c ****             {
 212:../../tmk_core/common/keymap.c ****                 uint8_t layer = keymap_fn_layer(FN_INDEX(keycode));
 213:../../tmk_core/common/keymap.c ****                 uint8_t key = keymap_fn_keycode(FN_INDEX(keycode));
 214:../../tmk_core/common/keymap.c ****                 if (key) {
 215:../../tmk_core/common/keymap.c ****                     return (action_t)ACTION_LAYER_TAP_KEY(layer, key);
 216:../../tmk_core/common/keymap.c ****                 } else {
 217:../../tmk_core/common/keymap.c ****                     return (action_t)ACTION_LAYER_MOMENTARY(layer);
 218:../../tmk_core/common/keymap.c ****                 }
 219:../../tmk_core/common/keymap.c ****             }
 220:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_NO;
 221:../../tmk_core/common/keymap.c ****         default:
 222:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_NO;
 223:../../tmk_core/common/keymap.c ****     }
 224:../../tmk_core/common/keymap.c **** }
 225:../../tmk_core/common/keymap.c **** 
 226:../../tmk_core/common/keymap.c **** #else
 227:../../tmk_core/common/keymap.c **** 
 228:../../tmk_core/common/keymap.c **** /* user keymaps should be defined somewhere */
 229:../../tmk_core/common/keymap.c **** extern const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 230:../../tmk_core/common/keymap.c **** extern const action_t fn_actions[];
 231:../../tmk_core/common/keymap.c **** 
 232:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 233:../../tmk_core/common/keymap.c **** uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
 234:../../tmk_core/common/keymap.c **** {
 297               		.loc 1 234 0
 298               		.cfi_startproc
 299               	.LVL12:
 300               	/* prologue: function */
 301               	/* frame size = 0 */
 302               	/* stack size = 0 */
 303               	.L__stack_usage = 0
 304               	.LBB6:
 235:../../tmk_core/common/keymap.c **** #if defined(__AVR__)
 236:../../tmk_core/common/keymap.c ****     return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
 305               		.loc 1 236 0
 306 0000 9EE0      		ldi r25,lo8(14)
 307 0002 799F      		mul r23,r25
 308 0004 F001      		movw r30,r0
 309 0006 1124      		clr __zero_reg__
 310 0008 94E5      		ldi r25,lo8(84)
 311 000a 899F      		mul r24,r25
 312 000c E00D      		add r30,r0
 313 000e F11D      		adc r31,r1
 314 0010 1124      		clr __zero_reg__
 315 0012 E60F      		add r30,r22
 316 0014 F11D      		adc r31,__zero_reg__
 317 0016 E050      		subi r30,lo8(-(keymaps))
 318 0018 F040      		sbci r31,hi8(-(keymaps))
 319               	/* #APP */
 320               	 ;  236 "../../tmk_core/common/keymap.c" 1
 321 001a 8491      		lpm r24, Z
 322               		
 323               	 ;  0 "" 2
 324               	.LVL13:
 325               	/* #NOAPP */
 326               	.LBE6:
 237:../../tmk_core/common/keymap.c **** #else
 238:../../tmk_core/common/keymap.c ****     return keymaps[(layer)][(key.row)][(key.col)];
 239:../../tmk_core/common/keymap.c **** #endif
 240:../../tmk_core/common/keymap.c **** }
 327               		.loc 1 240 0
 328 001c 0895      		ret
 329               		.cfi_endproc
 330               	.LFE14:
 332               		.section	.text.keymap_fn_to_action,"ax",@progbits
 333               		.weak	keymap_fn_to_action
 335               	keymap_fn_to_action:
 336               	.LFB15:
 241:../../tmk_core/common/keymap.c **** 
 242:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 243:../../tmk_core/common/keymap.c **** action_t keymap_fn_to_action(uint8_t keycode)
 244:../../tmk_core/common/keymap.c **** {
 337               		.loc 1 244 0
 338               		.cfi_startproc
 339               	.LVL14:
 340               	/* prologue: function */
 341               	/* frame size = 0 */
 342               	/* stack size = 0 */
 343               	.L__stack_usage = 0
 344               	.LBB7:
 245:../../tmk_core/common/keymap.c **** #if defined(__AVR__)
 246:../../tmk_core/common/keymap.c ****     return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
 345               		.loc 1 246 0
 346 0000 E82F      		mov r30,r24
 347 0002 F0E0      		ldi r31,0
 348 0004 EE0F      		lsl r30
 349 0006 FF1F      		rol r31
 350               	.LVL15:
 351 0008 E050      		subi r30,lo8(-(fn_actions-384))
 352 000a F040      		sbci r31,hi8(-(fn_actions-384))
 353               	.LVL16:
 354               	.LBE7:
 247:../../tmk_core/common/keymap.c **** #else
 248:../../tmk_core/common/keymap.c ****     return fn_actions[FN_INDEX(keycode)];
 249:../../tmk_core/common/keymap.c **** #endif
 250:../../tmk_core/common/keymap.c **** }
 355               		.loc 1 250 0
 356               	/* #APP */
 357               	 ;  246 "../../tmk_core/common/keymap.c" 1
 358 000c 8591      		lpm r24, Z+
 359 000e 9491      		lpm r25, Z
 360               		
 361               	 ;  0 "" 2
 362               	/* #NOAPP */
 363 0010 0895      		ret
 364               		.cfi_endproc
 365               	.LFE15:
 367               		.section	.text.action_for_key,"ax",@progbits
 368               		.weak	action_for_key
 370               	action_for_key:
 371               	.LFB10:
  40:../../tmk_core/common/keymap.c **** {
 372               		.loc 1 40 0
 373               		.cfi_startproc
 374               	.LVL17:
 375               	/* prologue: function */
 376               	/* frame size = 0 */
 377               	/* stack size = 0 */
 378               	.L__stack_usage = 0
  41:../../tmk_core/common/keymap.c ****     uint8_t keycode = keymap_key_to_keycode(layer, key);
 379               		.loc 1 41 0
 380 0000 0E94 0000 		call keymap_key_to_keycode
 381               	.LVL18:
  42:../../tmk_core/common/keymap.c ****     switch (keycode) {
 382               		.loc 1 42 0
 383 0004 803E      		cpi r24,lo8(-32)
 384 0006 00F4      		brsh .L49
 385 0008 803C      		cpi r24,lo8(-64)
 386 000a 00F4      		brsh .L50
 387 000c 8133      		cpi r24,lo8(49)
 388 000e 01F4      		brne .+2
 389 0010 00C0      		rjmp .L51
 390 0012 00F4      		brsh .L52
 391 0014 8932      		cpi r24,lo8(41)
 392 0016 01F4      		brne .+2
 393 0018 00C0      		rjmp .L53
 394 001a 8A32      		cpi r24,lo8(42)
 395 001c 01F4      		brne .+2
 396 001e 00C0      		rjmp .L54
 397 0020 00C0      		rjmp .L48
 398               	.L52:
 399 0022 8933      		cpi r24,lo8(57)
 400 0024 01F0      		breq .L55
 401 0026 8238      		cpi r24,lo8(-126)
 402 0028 01F0      		breq .L55
 403 002a 8533      		cpi r24,lo8(53)
 404 002c 01F4      		brne .+2
 405 002e 00C0      		rjmp .L56
 406 0030 00C0      		rjmp .L48
 407               	.L49:
 408 0032 833E      		cpi r24,lo8(-29)
 409 0034 01F0      		breq .L57
 410 0036 00F4      		brsh .L58
 411 0038 803E      		cpi r24,lo8(-32)
 412 003a 01F0      		breq .L59
 413 003c 823E      		cpi r24,lo8(-30)
 414 003e 01F0      		breq .L60
 415 0040 00C0      		rjmp .L48
 416               	.L58:
 417 0042 863E      		cpi r24,lo8(-26)
 418 0044 01F0      		breq .L61
 419 0046 873E      		cpi r24,lo8(-25)
 420 0048 01F0      		breq .L62
 421 004a 00C0      		rjmp .L48
 422               	.L50:
  44:../../tmk_core/common/keymap.c ****             return keymap_fn_to_action(keycode);
 423               		.loc 1 44 0
 424 004c 0E94 0000 		call keymap_fn_to_action
 425               	.LVL19:
 426 0050 0895      		ret
 427               	.LVL20:
 428               	.L55:
  48:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
 429               		.loc 1 48 0
 430 0052 9091 0000 		lds r25,keymap_config
 431 0056 90FD      		sbrc r25,0
 432 0058 00C0      		rjmp .L64
  48:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
 433               		.loc 1 48 0 is_stmt 0 discriminator 1
 434 005a 91FF      		sbrs r25,1
 435 005c 00C0      		rjmp .L48
 436               	.LVL21:
 437               	.L64:
  49:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LCTL);
 438               		.loc 1 49 0 is_stmt 1
 439 005e 80EE      		ldi r24,lo8(-32)
 440 0060 00C0      		rjmp .L48
 441               	.LVL22:
 442               	.L59:
  53:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock) {
 443               		.loc 1 53 0
 444 0062 8091 0000 		lds r24,keymap_config
 445               	.LVL23:
 446 0066 80FF      		sbrs r24,0
 447 0068 00C0      		rjmp .L64
  54:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_CAPSLOCK);
 448               		.loc 1 54 0
 449 006a 89E3      		ldi r24,lo8(57)
 450 006c 00C0      		rjmp .L48
 451               	.LVL24:
 452               	.L60:
  58:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_lalt_lgui) {
 453               		.loc 1 58 0
 454 006e 8091 0000 		lds r24,keymap_config
 455               	.LVL25:
 456 0072 82FF      		sbrs r24,2
 457 0074 00C0      		rjmp .L66
 458               	.L68:
  59:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
 459               		.loc 1 59 0
 460 0076 8091 0000 		lds r24,keymap_config
 461 007a 84FF      		sbrs r24,4
 462 007c 00C0      		rjmp .L67
 463               	.L70:
  60:../../tmk_core/common/keymap.c ****                     return keycode_to_action(KC_NO);
 464               		.loc 1 60 0
 465 007e 80E0      		ldi r24,0
 466 0080 00C0      		rjmp .L48
 467               	.L67:
  62:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LGUI);
 468               		.loc 1 62 0
 469 0082 83EE      		ldi r24,lo8(-29)
 470 0084 00C0      		rjmp .L48
 471               	.LVL26:
 472               	.L57:
  66:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_lalt_lgui) {
 473               		.loc 1 66 0
 474 0086 8091 0000 		lds r24,keymap_config
 475               	.LVL27:
 476 008a 82FF      		sbrs r24,2
 477 008c 00C0      		rjmp .L68
 478               	.L66:
  64:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_LALT);
 479               		.loc 1 64 0
 480 008e 82EE      		ldi r24,lo8(-30)
 481 0090 00C0      		rjmp .L48
 482               	.LVL28:
 483               	.L61:
  74:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_ralt_rgui) {
 484               		.loc 1 74 0
 485 0092 8091 0000 		lds r24,keymap_config
 486               	.LVL29:
 487 0096 83FF      		sbrs r24,3
 488 0098 00C0      		rjmp .L69
 489               	.L71:
  75:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
 490               		.loc 1 75 0
 491 009a 8091 0000 		lds r24,keymap_config
 492 009e 84FD      		sbrc r24,4
 493 00a0 00C0      		rjmp .L70
  78:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RGUI);
 494               		.loc 1 78 0
 495 00a2 87EE      		ldi r24,lo8(-25)
 496 00a4 00C0      		rjmp .L48
 497               	.LVL30:
 498               	.L62:
  82:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_ralt_rgui) {
 499               		.loc 1 82 0
 500 00a6 8091 0000 		lds r24,keymap_config
 501               	.LVL31:
 502 00aa 83FF      		sbrs r24,3
 503 00ac 00C0      		rjmp .L71
 504               	.L69:
  80:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_RALT);
 505               		.loc 1 80 0
 506 00ae 86EE      		ldi r24,lo8(-26)
 507 00b0 00C0      		rjmp .L48
 508               	.LVL32:
 509               	.L56:
  90:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_grave_esc) {
 510               		.loc 1 90 0
 511 00b2 8091 0000 		lds r24,keymap_config
 512               	.LVL33:
 513 00b6 85FF      		sbrs r24,5
 514 00b8 00C0      		rjmp .L72
 515               	.L73:
  91:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_ESC);
 516               		.loc 1 91 0
 517 00ba 89E2      		ldi r24,lo8(41)
 518 00bc 00C0      		rjmp .L48
 519               	.LVL34:
 520               	.L53:
  95:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_grave_esc) {
 521               		.loc 1 95 0
 522 00be 8091 0000 		lds r24,keymap_config
 523               	.LVL35:
 524 00c2 85FF      		sbrs r24,5
 525 00c4 00C0      		rjmp .L73
 526               	.L72:
  93:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_GRAVE);
 527               		.loc 1 93 0
 528 00c6 85E3      		ldi r24,lo8(53)
 529 00c8 00C0      		rjmp .L48
 530               	.LVL36:
 531               	.L51:
 100:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_backslash_backspace) {
 532               		.loc 1 100 0
 533 00ca 8091 0000 		lds r24,keymap_config
 534               	.LVL37:
 535 00ce 86FF      		sbrs r24,6
 536 00d0 00C0      		rjmp .L74
 537               	.L75:
 101:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSPACE);
 538               		.loc 1 101 0
 539 00d2 8AE2      		ldi r24,lo8(42)
 540 00d4 00C0      		rjmp .L48
 541               	.LVL38:
 542               	.L54:
 105:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_backslash_backspace) {
 543               		.loc 1 105 0
 544 00d6 8091 0000 		lds r24,keymap_config
 545               	.LVL39:
 546 00da 86FF      		sbrs r24,6
 547 00dc 00C0      		rjmp .L75
 548               	.L74:
 103:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_BSLASH);
 549               		.loc 1 103 0
 550 00de 81E3      		ldi r24,lo8(49)
 551               	.L48:
 111:../../tmk_core/common/keymap.c ****             return keycode_to_action(keycode);
 552               		.loc 1 111 0
 553 00e0 0E94 0000 		call keycode_to_action
 554               	.LVL40:
 113:../../tmk_core/common/keymap.c **** }
 555               		.loc 1 113 0
 556 00e4 0895      		ret
 557               		.cfi_endproc
 558               	.LFE10:
 560               		.text
 561               	.Letext0:
 562               		.file 3 "/usr/lib/avr/include/stdint.h"
 563               		.file 4 "../../tmk_core/common/keyboard.h"
 564               		.file 5 "../../tmk_core/common/keycode.h"
 565               		.file 6 "../../tmk_core/common/action_code.h"
 566               		.file 7 "../../tmk_core/common/action_macro.h"
 567               		.file 8 "../../tmk_core/common/action.h"
 568               		.file 9 "../../tmk_core/common/keymap.h"
 569               		.file 10 "../../tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keymap.c
     /tmp/ccb4OIQU.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccb4OIQU.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccb4OIQU.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccb4OIQU.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccb4OIQU.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccb4OIQU.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccb4OIQU.s:13     .text.keycode_to_action:0000000000000000 keycode_to_action
     /tmp/ccb4OIQU.s:259    .text.action_get_macro:0000000000000000 action_get_macro
     /tmp/ccb4OIQU.s:279    .text.action_function:0000000000000000 action_function
     /tmp/ccb4OIQU.s:295    .text.keymap_key_to_keycode:0000000000000000 keymap_key_to_keycode
     /tmp/ccb4OIQU.s:335    .text.keymap_fn_to_action:0000000000000000 keymap_fn_to_action
     /tmp/ccb4OIQU.s:370    .text.action_for_key:0000000000000000 action_for_key

UNDEFINED SYMBOLS
clear_keyboard
bootloader_jump
keymaps
fn_actions
keymap_config
