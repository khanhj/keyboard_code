   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.scan_key,"ax",@progbits
  13               	scan_key:
  14               	.LFB11:
  15               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include "wait.h"
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "actionmap.h"
   9:../../tmk_core/common/bootmagic.c **** #include "host.h"
  10:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  11:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  12:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  13:../../tmk_core/common/bootmagic.c **** #include "hook.h"
  14:../../tmk_core/common/bootmagic.c **** 
  15:../../tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  16:../../tmk_core/common/bootmagic.c **** 
  17:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  18:../../tmk_core/common/bootmagic.c **** {
  19:../../tmk_core/common/bootmagic.c ****     /* check signature */
  20:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  21:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  22:../../tmk_core/common/bootmagic.c ****     }
  23:../../tmk_core/common/bootmagic.c **** 
  24:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  25:../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  26:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
  28:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  29:../../tmk_core/common/bootmagic.c **** 
  30:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  31:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
  32:../../tmk_core/common/bootmagic.c ****         return;
  33:../../tmk_core/common/bootmagic.c ****     }
  34:../../tmk_core/common/bootmagic.c **** 
  35:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  36:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  37:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  38:../../tmk_core/common/bootmagic.c ****     }
  39:../../tmk_core/common/bootmagic.c **** 
  40:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  41:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
  42:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  43:../../tmk_core/common/bootmagic.c ****     }
  44:../../tmk_core/common/bootmagic.c **** 
  45:../../tmk_core/common/bootmagic.c ****     /* user-defined checks */
  46:../../tmk_core/common/bootmagic.c ****     hook_bootmagic();
  47:../../tmk_core/common/bootmagic.c **** 
  48:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  49:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  50:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  51:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  53:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  54:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  55:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  56:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  57:../../tmk_core/common/bootmagic.c ****         } else {
  58:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  59:../../tmk_core/common/bootmagic.c ****         }
  60:../../tmk_core/common/bootmagic.c ****     }
  61:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  62:../../tmk_core/common/bootmagic.c **** 
  63:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  64:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  84:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  85:../../tmk_core/common/bootmagic.c ****     }
  86:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
  87:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  88:../../tmk_core/common/bootmagic.c ****     }
  89:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  90:../../tmk_core/common/bootmagic.c **** 
  91:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  92:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  93:../../tmk_core/common/bootmagic.c **** #endif
  94:../../tmk_core/common/bootmagic.c **** 
  95:../../tmk_core/common/bootmagic.c ****     /* default layer */
  96:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 105:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 106:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 107:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 108:../../tmk_core/common/bootmagic.c ****     } else {
 109:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 111:../../tmk_core/common/bootmagic.c ****     }
 112:../../tmk_core/common/bootmagic.c **** }
 113:../../tmk_core/common/bootmagic.c **** 
 114:../../tmk_core/common/bootmagic.c **** static bool scan_key(uint16_t code)
 115:../../tmk_core/common/bootmagic.c **** {
  16               		.loc 1 115 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 BF92      		push r11
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 11, -2
  23 0002 CF92      		push r12
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 12, -3
  27 0004 DF92      		push r13
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 13, -4
  31 0006 EF92      		push r14
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 14, -5
  35 0008 FF92      		push r15
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 15, -6
  39 000a 0F93      		push r16
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 16, -7
  43 000c 1F93      		push r17
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 17, -8
  47 000e CF93      		push r28
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 28, -9
  51 0010 DF93      		push r29
  52               	.LCFI8:
  53               		.cfi_def_cfa_offset 11
  54               		.cfi_offset 29, -10
  55               	/* prologue: function */
  56               	/* frame size = 0 */
  57               	/* stack size = 9 */
  58               	.L__stack_usage = 9
  59 0012 8C01      		movw r16,r24
  60               	.LVL1:
  61               	.LBB6:
 116:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  62               		.loc 1 116 0
  63 0014 B12C      		mov r11,__zero_reg__
  64               	.LBB7:
  65               	.LBB8:
 117:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 118:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 119:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  66               		.loc 1 119 0
  67 0016 EE24      		clr r14
  68 0018 E394      		inc r14
  69 001a F12C      		mov r15,__zero_reg__
  70               	.LVL2:
  71               	.L9:
  72               	.LBE8:
 117:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  73               		.loc 1 117 0
  74 001c 8B2D      		mov r24,r11
  75 001e 0E94 0000 		call matrix_get_row
  76               	.LVL3:
  77 0022 6C01      		movw r12,r24
  78               	.LVL4:
  79 0024 C0E0      		ldi r28,0
  80 0026 D0E0      		ldi r29,0
  81               	.LVL5:
  82               	.L8:
  83               	.LBB10:
  84               		.loc 1 119 0
  85 0028 9701      		movw r18,r14
  86 002a 0C2E      		mov r0,r28
  87 002c 00C0      		rjmp 2f
  88               		1:
  89 002e 220F      		lsl r18
  90 0030 331F      		rol r19
  91               		2:
  92 0032 0A94      		dec r0
  93 0034 02F4      		brpl 1b
  94 0036 2C21      		and r18,r12
  95 0038 3D21      		and r19,r13
  96 003a 232B      		or r18,r19
  97 003c 01F0      		breq .L2
  98               	.LBB9:
 120:../../tmk_core/common/bootmagic.c ****                 // read key from Layer 0
 121:../../tmk_core/common/bootmagic.c ****                 action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
  99               		.loc 1 121 0
 100 003e 6C2F      		mov r22,r28
 101 0040 7B2D      		mov r23,r11
 102 0042 80E0      		ldi r24,0
 103 0044 0E94 0000 		call action_for_key
 104               	.LVL6:
 105 0048 9C01      		movw r18,r24
 106               	.LVL7:
 122:../../tmk_core/common/bootmagic.c ****                 if (action.code == code ||
 107               		.loc 1 122 0
 108 004a 8017      		cp r24,r16
 109 004c 9107      		cpc r25,r17
 110               	.LVL8:
 111 004e 01F0      		breq .L3
 112               		.loc 1 122 0 is_stmt 0 discriminator 1
 113 0050 832F      		mov r24,r19
 114               	.LVL9:
 115 0052 807E      		andi r24,lo8(-32)
 116 0054 932F      		mov r25,r19
 117 0056 907C      		andi r25,lo8(-64)
 118 0058 01F0      		breq .L4
 123:../../tmk_core/common/bootmagic.c ****                     ((action.kind.id == ACT_LMODS ||
 124:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS ||
 125:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LMODS_TAP ||
 126:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS_TAP ||
 119               		.loc 1 126 0 is_stmt 1
 120 005a 803A      		cpi r24,lo8(-96)
 121 005c 01F4      		brne .L2
 122               	.L4:
 127:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP ||
 128:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP_EXT) &&
 129:../../tmk_core/common/bootmagic.c ****                      action.key.code == code)) {
 123               		.loc 1 129 0
 124 005e 30E0      		ldi r19,0
 128:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP_EXT) &&
 125               		.loc 1 128 0
 126 0060 2017      		cp r18,r16
 127 0062 3107      		cpc r19,r17
 128 0064 01F4      		brne .L2
 129               	.LVL10:
 130               	.L3:
 130:../../tmk_core/common/bootmagic.c ****                     return true;
 131               		.loc 1 130 0
 132 0066 81E0      		ldi r24,lo8(1)
 133               	.LVL11:
 134 0068 00C0      		rjmp .L6
 135               	.L2:
 136               	.LVL12:
 137 006a 2196      		adiw r28,1
 138               	.LVL13:
 139               	.LBE9:
 118:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 140               		.loc 1 118 0
 141 006c CE30      		cpi r28,14
 142 006e D105      		cpc r29,__zero_reg__
 143 0070 01F4      		brne .L8
 144               	.LBE10:
 145               	.LBE7:
 116:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 146               		.loc 1 116 0
 147 0072 B394      		inc r11
 148               	.LVL14:
 149 0074 86E0      		ldi r24,lo8(6)
 150 0076 B812      		cpse r11,r24
 151 0078 00C0      		rjmp .L9
 152               	.LBE6:
 131:../../tmk_core/common/bootmagic.c ****                 }
 132:../../tmk_core/common/bootmagic.c ****             }
 133:../../tmk_core/common/bootmagic.c ****         }
 134:../../tmk_core/common/bootmagic.c ****     }
 135:../../tmk_core/common/bootmagic.c ****     return false;
 153               		.loc 1 135 0
 154 007a 80E0      		ldi r24,0
 155               	.LVL15:
 156               	.L6:
 157               	/* epilogue start */
 136:../../tmk_core/common/bootmagic.c **** }
 158               		.loc 1 136 0
 159 007c DF91      		pop r29
 160 007e CF91      		pop r28
 161 0080 1F91      		pop r17
 162 0082 0F91      		pop r16
 163               	.LVL16:
 164 0084 FF90      		pop r15
 165 0086 EF90      		pop r14
 166 0088 DF90      		pop r13
 167 008a CF90      		pop r12
 168               	.LVL17:
 169 008c BF90      		pop r11
 170               	.LVL18:
 171 008e 0895      		ret
 172               		.cfi_endproc
 173               	.LFE11:
 175               		.section	.text.bootmagic_scan_key,"ax",@progbits
 176               	.global	bootmagic_scan_key
 178               	bootmagic_scan_key:
 179               	.LFB12:
 137:../../tmk_core/common/bootmagic.c **** 
 138:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_key(uint16_t code)
 139:../../tmk_core/common/bootmagic.c **** {
 180               		.loc 1 139 0
 181               		.cfi_startproc
 182               	.LVL19:
 183 0000 CF93      		push r28
 184               	.LCFI9:
 185               		.cfi_def_cfa_offset 3
 186               		.cfi_offset 28, -2
 187 0002 DF93      		push r29
 188               	.LCFI10:
 189               		.cfi_def_cfa_offset 4
 190               		.cfi_offset 29, -3
 191               	/* prologue: function */
 192               	/* frame size = 0 */
 193               	/* stack size = 2 */
 194               	.L__stack_usage = 2
 195 0004 EC01      		movw r28,r24
 140:../../tmk_core/common/bootmagic.c ****     if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
 196               		.loc 1 140 0
 197 0006 8CE2      		ldi r24,lo8(44)
 198 0008 90E0      		ldi r25,0
 199               	.LVL20:
 200 000a 0E94 0000 		call scan_key
 201               	.LVL21:
 202 000e 8823      		tst r24
 203 0010 01F0      		breq .L19
 141:../../tmk_core/common/bootmagic.c **** 
 142:../../tmk_core/common/bootmagic.c ****     return scan_key(code);
 204               		.loc 1 142 0
 205 0012 CE01      		movw r24,r28
 206               	/* epilogue start */
 143:../../tmk_core/common/bootmagic.c **** }
 207               		.loc 1 143 0
 208 0014 DF91      		pop r29
 209 0016 CF91      		pop r28
 210               	.LVL22:
 142:../../tmk_core/common/bootmagic.c ****     return scan_key(code);
 211               		.loc 1 142 0
 212 0018 0C94 0000 		jmp scan_key
 213               	.LVL23:
 214               	.L19:
 215               		.loc 1 143 0
 216 001c 80E0      		ldi r24,0
 217               	/* epilogue start */
 218 001e DF91      		pop r29
 219 0020 CF91      		pop r28
 220               	.LVL24:
 221 0022 0895      		ret
 222               		.cfi_endproc
 223               	.LFE12:
 225               		.section	.text.bootmagic,"ax",@progbits
 226               	.global	bootmagic
 228               	bootmagic:
 229               	.LFB10:
  18:../../tmk_core/common/bootmagic.c **** {
 230               		.loc 1 18 0
 231               		.cfi_startproc
 232 0000 CF93      		push r28
 233               	.LCFI11:
 234               		.cfi_def_cfa_offset 3
 235               		.cfi_offset 28, -2
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 1 */
 239               	.L__stack_usage = 1
  20:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
 240               		.loc 1 20 0
 241 0002 0E94 0000 		call eeconfig_is_enabled
 242               	.LVL25:
 243 0006 8111      		cpse r24,__zero_reg__
 244 0008 00C0      		rjmp .L21
  21:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 245               		.loc 1 21 0
 246 000a 0E94 0000 		call eeconfig_init
 247               	.LVL26:
 248               	.L21:
  25:../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
 249               		.loc 1 25 0
 250 000e 80E0      		ldi r24,lo8(__c.2501)
 251 0010 90E0      		ldi r25,hi8(__c.2501)
 252 0012 0E94 0000 		call xputs
 253               	.LVL27:
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
 254               		.loc 1 27 0
 255 0016 C5E6      		ldi r28,lo8(101)
 256               	.LVL28:
 257               	.L22:
 258 0018 C150      		subi r28,lo8(-(-1))
 259               	.LVL29:
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
 260               		.loc 1 27 0 is_stmt 0 discriminator 1
 261 001a 01F0      		breq .L101
 262               	.LVL30:
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
 263               		.loc 1 27 0 discriminator 2
 264 001c 0E94 0000 		call matrix_scan
 265               	.LVL31:
 266               	.LBB11:
 267               	.LBB12:
 268               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 269               		.loc 2 164 0 is_stmt 1 discriminator 2
 270 0020 8FE3      		ldi r24,lo8(-25537)
 271 0022 9CE9      		ldi r25,hi8(-25537)
 272 0024 0197      		1: sbiw r24,1
 273 0026 01F4      		brne 1b
 274 0028 00C0      		rjmp .
 275 002a 0000      		nop
 276 002c 00C0      		rjmp .L22
 277               	.LVL32:
 278               	.L101:
 279               	.LBE12:
 280               	.LBE11:
  28:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 281               		.loc 1 28 0
 282 002e 80E0      		ldi r24,lo8(__c.2507)
 283 0030 90E0      		ldi r25,hi8(__c.2507)
 284 0032 0E94 0000 		call xputs
 285               	.LVL33:
  31:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
 286               		.loc 1 31 0
 287 0036 89E2      		ldi r24,lo8(41)
 288 0038 90E0      		ldi r25,0
 289 003a 0E94 0000 		call bootmagic_scan_key
 290               	.LVL34:
 291 003e 8111      		cpse r24,__zero_reg__
 292 0040 00C0      		rjmp .L20
  36:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
 293               		.loc 1 36 0
 294 0042 8AE2      		ldi r24,lo8(42)
 295 0044 90E0      		ldi r25,0
 296 0046 0E94 0000 		call bootmagic_scan_key
 297               	.LVL35:
 298 004a 8111      		cpse r24,__zero_reg__
  37:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 299               		.loc 1 37 0
 300 004c 0E94 0000 		call eeconfig_init
 301               	.LVL36:
 302               	.L25:
  41:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
 303               		.loc 1 41 0
 304 0050 85E0      		ldi r24,lo8(5)
 305 0052 90E0      		ldi r25,0
 306 0054 0E94 0000 		call bootmagic_scan_key
 307               	.LVL37:
 308 0058 8111      		cpse r24,__zero_reg__
  42:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 309               		.loc 1 42 0
 310 005a 0E94 0000 		call bootloader_jump
 311               	.LVL38:
 312               	.L26:
  46:../../tmk_core/common/bootmagic.c ****     hook_bootmagic();
 313               		.loc 1 46 0
 314 005e 0E94 0000 		call hook_bootmagic
 315               	.LVL39:
  49:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
 316               		.loc 1 49 0
 317 0062 0E94 0000 		call eeconfig_read_debug
 318               	.LVL40:
 319 0066 8093 0000 		sts debug_config,r24
  50:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 320               		.loc 1 50 0
 321 006a 87E0      		ldi r24,lo8(7)
 322 006c 90E0      		ldi r25,0
 323 006e 0E94 0000 		call bootmagic_scan_key
 324               	.LVL41:
 325 0072 8823      		tst r24
 326 0074 01F0      		breq .L27
  51:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 327               		.loc 1 51 0
 328 0076 8BE1      		ldi r24,lo8(27)
 329 0078 90E0      		ldi r25,0
 330 007a 0E94 0000 		call bootmagic_scan_key
 331               	.LVL42:
 332 007e 8823      		tst r24
 333 0080 01F0      		breq .L28
  52:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 334               		.loc 1 52 0
 335 0082 9091 0000 		lds r25,debug_config
 336 0086 91FB      		bst r25,1
 337 0088 8827      		clr r24
 338 008a 80F9      		bld r24,0
 339 008c 21E0      		ldi r18,lo8(1)
 340 008e 8227      		eor r24,r18
 341 0090 80FB      		bst r24,0
 342 0092 91F9      		bld r25,1
 343 0094 00C0      		rjmp .L99
 344               	.L28:
  53:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 345               		.loc 1 53 0
 346 0096 8EE0      		ldi r24,lo8(14)
 347 0098 90E0      		ldi r25,0
 348 009a 0E94 0000 		call bootmagic_scan_key
 349               	.LVL43:
 350 009e 8823      		tst r24
 351 00a0 01F0      		breq .L29
  54:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 352               		.loc 1 54 0
 353 00a2 9091 0000 		lds r25,debug_config
 354 00a6 92FB      		bst r25,2
 355 00a8 8827      		clr r24
 356 00aa 80F9      		bld r24,0
 357 00ac 21E0      		ldi r18,lo8(1)
 358 00ae 8227      		eor r24,r18
 359 00b0 80FB      		bst r24,0
 360 00b2 92F9      		bld r25,2
 361 00b4 00C0      		rjmp .L99
 362               	.L29:
  55:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 363               		.loc 1 55 0
 364 00b6 80E1      		ldi r24,lo8(16)
 365 00b8 90E0      		ldi r25,0
 366 00ba 0E94 0000 		call bootmagic_scan_key
 367               	.LVL44:
 368 00be 9091 0000 		lds r25,debug_config
 369 00c2 8823      		tst r24
 370 00c4 01F0      		breq .L30
  56:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 371               		.loc 1 56 0
 372 00c6 93FB      		bst r25,3
 373 00c8 8827      		clr r24
 374 00ca 80F9      		bld r24,0
 375 00cc 21E0      		ldi r18,lo8(1)
 376 00ce 8227      		eor r24,r18
 377 00d0 80FB      		bst r24,0
 378 00d2 93F9      		bld r25,3
 379 00d4 00C0      		rjmp .L99
 380               	.L30:
  58:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
 381               		.loc 1 58 0
 382 00d6 892F      		mov r24,r25
 383 00d8 8095      		com r24
 384 00da 80FB      		bst r24,0
 385 00dc 90F9      		bld r25,0
 386               	.L99:
 387 00de 9093 0000 		sts debug_config,r25
 388               	.L27:
  61:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
 389               		.loc 1 61 0
 390 00e2 8091 0000 		lds r24,debug_config
 391 00e6 0E94 0000 		call eeconfig_write_debug
 392               	.LVL45:
  64:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
 393               		.loc 1 64 0
 394 00ea 0E94 0000 		call eeconfig_read_keymap
 395               	.LVL46:
 396 00ee 8093 0000 		sts keymap_config,r24
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 397               		.loc 1 65 0
 398 00f2 80EE      		ldi r24,lo8(-32)
 399 00f4 90E0      		ldi r25,0
 400 00f6 0E94 0000 		call bootmagic_scan_key
 401               	.LVL47:
 402 00fa 8823      		tst r24
 403 00fc 01F0      		breq .L31
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 404               		.loc 1 66 0
 405 00fe 8091 0000 		lds r24,keymap_config
 406 0102 982F      		mov r25,r24
 407 0104 9095      		com r25
 408 0106 90FB      		bst r25,0
 409 0108 80F9      		bld r24,0
 410 010a 8093 0000 		sts keymap_config,r24
 411               	.L31:
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
 412               		.loc 1 68 0
 413 010e 89E3      		ldi r24,lo8(57)
 414 0110 90E0      		ldi r25,0
 415 0112 0E94 0000 		call bootmagic_scan_key
 416               	.LVL48:
 417 0116 8823      		tst r24
 418 0118 01F0      		breq .L32
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 419               		.loc 1 69 0
 420 011a 9091 0000 		lds r25,keymap_config
 421 011e 91FB      		bst r25,1
 422 0120 8827      		clr r24
 423 0122 80F9      		bld r24,0
 424 0124 21E0      		ldi r18,lo8(1)
 425 0126 8227      		eor r24,r18
 426 0128 80FB      		bst r24,0
 427 012a 91F9      		bld r25,1
 428 012c 9093 0000 		sts keymap_config,r25
 429               	.L32:
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
 430               		.loc 1 71 0
 431 0130 82EE      		ldi r24,lo8(-30)
 432 0132 90E0      		ldi r25,0
 433 0134 0E94 0000 		call bootmagic_scan_key
 434               	.LVL49:
 435 0138 8823      		tst r24
 436 013a 01F0      		breq .L33
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 437               		.loc 1 72 0
 438 013c 9091 0000 		lds r25,keymap_config
 439 0140 92FB      		bst r25,2
 440 0142 8827      		clr r24
 441 0144 80F9      		bld r24,0
 442 0146 21E0      		ldi r18,lo8(1)
 443 0148 8227      		eor r24,r18
 444 014a 80FB      		bst r24,0
 445 014c 92F9      		bld r25,2
 446 014e 9093 0000 		sts keymap_config,r25
 447               	.L33:
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
 448               		.loc 1 74 0
 449 0152 86EE      		ldi r24,lo8(-26)
 450 0154 90E0      		ldi r25,0
 451 0156 0E94 0000 		call bootmagic_scan_key
 452               	.LVL50:
 453 015a 8823      		tst r24
 454 015c 01F0      		breq .L34
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 455               		.loc 1 75 0
 456 015e 9091 0000 		lds r25,keymap_config
 457 0162 93FB      		bst r25,3
 458 0164 8827      		clr r24
 459 0166 80F9      		bld r24,0
 460 0168 21E0      		ldi r18,lo8(1)
 461 016a 8227      		eor r24,r18
 462 016c 80FB      		bst r24,0
 463 016e 93F9      		bld r25,3
 464 0170 9093 0000 		sts keymap_config,r25
 465               	.L34:
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
 466               		.loc 1 77 0
 467 0174 83EE      		ldi r24,lo8(-29)
 468 0176 90E0      		ldi r25,0
 469 0178 0E94 0000 		call bootmagic_scan_key
 470               	.LVL51:
 471 017c 8823      		tst r24
 472 017e 01F0      		breq .L35
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 473               		.loc 1 78 0
 474 0180 9091 0000 		lds r25,keymap_config
 475 0184 94FB      		bst r25,4
 476 0186 8827      		clr r24
 477 0188 80F9      		bld r24,0
 478 018a 21E0      		ldi r18,lo8(1)
 479 018c 8227      		eor r24,r18
 480 018e 80FB      		bst r24,0
 481 0190 94F9      		bld r25,4
 482 0192 9093 0000 		sts keymap_config,r25
 483               	.L35:
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
 484               		.loc 1 80 0
 485 0196 85E3      		ldi r24,lo8(53)
 486 0198 90E0      		ldi r25,0
 487 019a 0E94 0000 		call bootmagic_scan_key
 488               	.LVL52:
 489 019e 8823      		tst r24
 490 01a0 01F0      		breq .L36
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 491               		.loc 1 81 0
 492 01a2 9091 0000 		lds r25,keymap_config
 493 01a6 95FB      		bst r25,5
 494 01a8 8827      		clr r24
 495 01aa 80F9      		bld r24,0
 496 01ac 21E0      		ldi r18,lo8(1)
 497 01ae 8227      		eor r24,r18
 498 01b0 80FB      		bst r24,0
 499 01b2 95F9      		bld r25,5
 500 01b4 9093 0000 		sts keymap_config,r25
 501               	.L36:
  83:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
 502               		.loc 1 83 0
 503 01b8 81E3      		ldi r24,lo8(49)
 504 01ba 90E0      		ldi r25,0
 505 01bc 0E94 0000 		call bootmagic_scan_key
 506               	.LVL53:
 507 01c0 8823      		tst r24
 508 01c2 01F0      		breq .L37
  84:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 509               		.loc 1 84 0
 510 01c4 9091 0000 		lds r25,keymap_config
 511 01c8 96FB      		bst r25,6
 512 01ca 8827      		clr r24
 513 01cc 80F9      		bld r24,0
 514 01ce 21E0      		ldi r18,lo8(1)
 515 01d0 8227      		eor r24,r18
 516 01d2 80FB      		bst r24,0
 517 01d4 96F9      		bld r25,6
 518 01d6 9093 0000 		sts keymap_config,r25
 519               	.L37:
  86:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
 520               		.loc 1 86 0
 521 01da 81E1      		ldi r24,lo8(17)
 522 01dc 90E0      		ldi r25,0
 523 01de 0E94 0000 		call bootmagic_scan_key
 524               	.LVL54:
 525 01e2 8823      		tst r24
 526 01e4 01F0      		breq .L38
  87:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 527               		.loc 1 87 0
 528 01e6 9091 0000 		lds r25,keymap_config
 529 01ea 97FB      		bst r25,7
 530 01ec 8827      		clr r24
 531 01ee 80F9      		bld r24,0
 532 01f0 21E0      		ldi r18,lo8(1)
 533 01f2 8227      		eor r24,r18
 534 01f4 80FB      		bst r24,0
 535 01f6 97F9      		bld r25,7
 536 01f8 9093 0000 		sts keymap_config,r25
 537               	.L38:
  89:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
 538               		.loc 1 89 0
 539 01fc 8091 0000 		lds r24,keymap_config
 540 0200 0E94 0000 		call eeconfig_write_keymap
 541               	.LVL55:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
 542               		.loc 1 97 0
 543 0204 87E2      		ldi r24,lo8(39)
 544 0206 90E0      		ldi r25,0
 545 0208 0E94 0000 		call bootmagic_scan_key
 546               	.LVL56:
 547 020c C82F      		mov r28,r24
 548               	.LVL57:
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 549               		.loc 1 98 0
 550 020e 8EE1      		ldi r24,lo8(30)
 551 0210 90E0      		ldi r25,0
 552               	.LVL58:
 553 0212 0E94 0000 		call bootmagic_scan_key
 554               	.LVL59:
 555 0216 8111      		cpse r24,__zero_reg__
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 556               		.loc 1 98 0 is_stmt 0 discriminator 1
 557 0218 C260      		ori r28,lo8(2)
 558               	.LVL60:
 559               	.L39:
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 560               		.loc 1 99 0 is_stmt 1
 561 021a 8FE1      		ldi r24,lo8(31)
 562 021c 90E0      		ldi r25,0
 563 021e 0E94 0000 		call bootmagic_scan_key
 564               	.LVL61:
 565 0222 8111      		cpse r24,__zero_reg__
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 566               		.loc 1 99 0 is_stmt 0 discriminator 1
 567 0224 C460      		ori r28,lo8(4)
 568               	.LVL62:
 569               	.L40:
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 570               		.loc 1 100 0 is_stmt 1
 571 0226 80E2      		ldi r24,lo8(32)
 572 0228 90E0      		ldi r25,0
 573 022a 0E94 0000 		call bootmagic_scan_key
 574               	.LVL63:
 575 022e 8111      		cpse r24,__zero_reg__
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 576               		.loc 1 100 0 is_stmt 0 discriminator 1
 577 0230 C860      		ori r28,lo8(8)
 578               	.LVL64:
 579               	.L41:
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 580               		.loc 1 101 0 is_stmt 1
 581 0232 81E2      		ldi r24,lo8(33)
 582 0234 90E0      		ldi r25,0
 583 0236 0E94 0000 		call bootmagic_scan_key
 584               	.LVL65:
 585 023a 8111      		cpse r24,__zero_reg__
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 586               		.loc 1 101 0 is_stmt 0 discriminator 1
 587 023c C061      		ori r28,lo8(16)
 588               	.LVL66:
 589               	.L42:
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 590               		.loc 1 102 0 is_stmt 1
 591 023e 82E2      		ldi r24,lo8(34)
 592 0240 90E0      		ldi r25,0
 593 0242 0E94 0000 		call bootmagic_scan_key
 594               	.LVL67:
 595 0246 8111      		cpse r24,__zero_reg__
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 596               		.loc 1 102 0 is_stmt 0 discriminator 1
 597 0248 C062      		ori r28,lo8(32)
 598               	.LVL68:
 599               	.L43:
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 600               		.loc 1 103 0 is_stmt 1
 601 024a 83E2      		ldi r24,lo8(35)
 602 024c 90E0      		ldi r25,0
 603 024e 0E94 0000 		call bootmagic_scan_key
 604               	.LVL69:
 605 0252 8111      		cpse r24,__zero_reg__
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 606               		.loc 1 103 0 is_stmt 0 discriminator 1
 607 0254 C064      		ori r28,lo8(64)
 608               	.LVL70:
 609               	.L44:
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 610               		.loc 1 104 0 is_stmt 1
 611 0256 84E2      		ldi r24,lo8(36)
 612 0258 90E0      		ldi r25,0
 613 025a 0E94 0000 		call bootmagic_scan_key
 614               	.LVL71:
 615 025e 8823      		tst r24
 616 0260 01F0      		breq .L45
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 617               		.loc 1 104 0 is_stmt 0 discriminator 1
 618 0262 C068      		ori r28,lo8(-128)
 619               	.LVL72:
 620 0264 00C0      		rjmp .L46
 621               	.L45:
 105:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 622               		.loc 1 105 0 is_stmt 1
 623 0266 CC23      		tst r28
 624 0268 01F0      		breq .L47
 625               	.L46:
 106:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 626               		.loc 1 106 0
 627 026a 8C2F      		mov r24,r28
 628 026c 0E94 0000 		call eeconfig_write_default_layer
 629               	.LVL73:
 107:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 630               		.loc 1 107 0
 631 0270 6C2F      		mov r22,r28
 632 0272 00C0      		rjmp .L100
 633               	.L47:
 109:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 634               		.loc 1 109 0
 635 0274 0E94 0000 		call eeconfig_read_default_layer
 636               	.LVL74:
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 637               		.loc 1 110 0
 638 0278 682F      		mov r22,r24
 639               	.LVL75:
 640               	.L100:
 641 027a 70E0      		ldi r23,0
 642 027c 80E0      		ldi r24,0
 643 027e 90E0      		ldi r25,0
 644               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** }
 645               		.loc 1 112 0
 646 0280 CF91      		pop r28
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 647               		.loc 1 110 0
 648 0282 0C94 0000 		jmp default_layer_set
 649               	.LVL76:
 650               	.L20:
 651               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** }
 652               		.loc 1 112 0
 653 0286 CF91      		pop r28
 654               	.LVL77:
 655 0288 0895      		ret
 656               		.cfi_endproc
 657               	.LFE10:
 659               		.section	.progmem.data.__c.2507,"a",@progbits
 662               	__c.2507:
 663 0000 646F 6E65 		.string	"done.\n"
 663      2E0A 00
 664               		.section	.progmem.data.__c.2501,"a",@progbits
 667               	__c.2501:
 668 0000 626F 6F74 		.string	"bootmagic scan: ... "
 668      6D61 6769 
 668      6320 7363 
 668      616E 3A20 
 668      2E2E 2E20 
 669               		.comm	keymap_config,1,1
 670               		.text
 671               	.Letext0:
 672               		.file 3 "/usr/lib/avr/include/stdint.h"
 673               		.file 4 "../../tmk_core/common/matrix.h"
 674               		.file 5 "../../tmk_core/common/debug.h"
 675               		.file 6 "../../tmk_core/common/keyboard.h"
 676               		.file 7 "../../tmk_core/common/keycode.h"
 677               		.file 8 "../../tmk_core/common/action_code.h"
 678               		.file 9 "../../tmk_core/common/keymap.h"
 679               		.file 10 "../../tmk_core/common/action.h"
 680               		.file 11 "../../tmk_core/common/eeconfig.h"
 681               		.file 12 "../../tmk_core/common/bootloader.h"
 682               		.file 13 "../../tmk_core/common/hook.h"
 683               		.file 14 "../../tmk_core/common/avr/xprintf.h"
 684               		.file 15 "../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/ccG9ZoEO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccG9ZoEO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccG9ZoEO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccG9ZoEO.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccG9ZoEO.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccG9ZoEO.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccG9ZoEO.s:13     .text.scan_key:0000000000000000 scan_key
     /tmp/ccG9ZoEO.s:178    .text.bootmagic_scan_key:0000000000000000 bootmagic_scan_key
     /tmp/ccG9ZoEO.s:228    .text.bootmagic:0000000000000000 bootmagic
     /tmp/ccG9ZoEO.s:667    .progmem.data.__c.2501:0000000000000000 __c.2501
     /tmp/ccG9ZoEO.s:662    .progmem.data.__c.2507:0000000000000000 __c.2507
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
action_for_key
eeconfig_is_enabled
eeconfig_init
xputs
matrix_scan
bootloader_jump
hook_bootmagic
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
